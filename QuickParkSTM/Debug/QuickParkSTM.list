
QuickParkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000588  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001154a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002455  00000000  00000000  000175d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00019a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae7  00000000  00000000  0001a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc3a  00000000  00000000  0001b32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e9e  00000000  00000000  00038f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3ea3  00000000  00000000  0004be07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffcaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f48  00000000  00000000  000ffcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00103c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040c4 	.word	0x080040c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080040c4 	.word	0x080040c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <display_init>:
#include "display_barrier.h"

void display_init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    // Nessuna inizializzazione reale
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <display_update>:

void display_update(void) {
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
    // Nessuna azione reale
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 fc0c 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f818 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f000 f94a 	bl	8000540 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ac:	f000 f878 	bl	80003a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002b0:	f000 f8b6 	bl	8000420 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002b4:	f000 f922 	bl	80004fc <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80002b8:	f000 f8f0 	bl	800049c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sensors_init();
 80002bc:	f000 f9c4 	bl	8000648 <sensors_init>
  display_init();
 80002c0:	f7ff ffde 	bl	8000280 <display_init>
  wifi_bot_init();
 80002c4:	f000 fb96 	bl	80009f4 <wifi_bot_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sensors_update();
 80002c8:	f000 f9c6 	bl	8000658 <sensors_update>
	  display_update();
 80002cc:	f7ff ffdf 	bl	800028e <display_update>
	  wifi_bot_handle();
 80002d0:	f000 fb98 	bl	8000a04 <wifi_bot_handle>
	  sensors_update();
 80002d4:	bf00      	nop
 80002d6:	e7f7      	b.n	80002c8 <main+0x2c>

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09e      	sub	sp, #120	@ 0x78
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa6e 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	223c      	movs	r2, #60	@ 0x3c
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fa60 	bl	80037c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000308:	2303      	movs	r3, #3
 800030a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800030c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000310:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	2310      	movs	r3, #16
 800031c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000326:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800032c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f89a 	bl	800146c <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800033e:	f000 f97d 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000352:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000358:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800035c:	2101      	movs	r1, #1
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f892 	bl	8002488 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800036a:	f000 f967 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <SystemClock_Config+0xc4>)
 8000370:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800037a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800037e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fa92 	bl	80028ac <HAL_RCCEx_PeriphCLKConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800038e:	f000 f955 	bl	800063c <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3778      	adds	r7, #120	@ 0x78
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00020022 	.word	0x00020022

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	480e      	ldr	r0, [pc, #56]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	f000 fe4c 	bl	8001078 <HAL_I2C_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f929 	bl	800063c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	2100      	movs	r1, #0
 80003ec:	4809      	ldr	r0, [pc, #36]	@ (8000414 <MX_I2C1_Init+0x74>)
 80003ee:	f000 fede 	bl	80011ae <HAL_I2CEx_ConfigAnalogFilter>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f920 	bl	800063c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	2100      	movs	r1, #0
 80003fe:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_I2C1_Init+0x74>)
 8000400:	f000 ff20 	bl	8001244 <HAL_I2CEx_ConfigDigitalFilter>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f917 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000078 	.word	0x20000078
 8000418:	40005400 	.word	0x40005400
 800041c:	00201d2b 	.word	0x00201d2b

08000420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	@ (8000498 <MX_SPI1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <MX_SPI1_Init+0x74>)
 800042c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000432:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000438:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <MX_SPI1_Init+0x74>)
 800043a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800043e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_SPI1_Init+0x74>)
 800044e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000456:	2208      	movs	r2, #8
 8000458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_SPI1_Init+0x74>)
 800046e:	2207      	movs	r2, #7
 8000470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_SPI1_Init+0x74>)
 800047a:	2208      	movs	r2, #8
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_SPI1_Init+0x74>)
 8000480:	f002 fbc2 	bl	8002c08 <HAL_SPI_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 f8d7 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200000cc 	.word	0x200000cc
 8000498:	40013000 	.word	0x40013000

0800049c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a2:	4a15      	ldr	r2, [pc, #84]	@ (80004f8 <MX_USART2_UART_Init+0x5c>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <MX_USART2_UART_Init+0x58>)
 80004e0:	f002 fc3d 	bl	8002d5e <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ea:	f000 f8a7 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000130 	.word	0x20000130
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000500:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 8000502:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <MX_USB_PCD_Init+0x40>)
 8000504:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 8000508:	2208      	movs	r2, #8
 800050a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800050c:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 800050e:	2202      	movs	r2, #2
 8000510:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 8000514:	2202      	movs	r2, #2
 8000516:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 800051a:	2200      	movs	r2, #0
 800051c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 8000520:	2200      	movs	r2, #0
 8000522:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <MX_USB_PCD_Init+0x3c>)
 8000526:	f000 fed9 	bl	80012dc <HAL_PCD_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000530:	f000 f884 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200001b8 	.word	0x200001b8
 800053c:	40005c00 	.word	0x40005c00

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	@ 0x28
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000556:	4b37      	ldr	r3, [pc, #220]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a36      	ldr	r2, [pc, #216]	@ (8000634 <MX_GPIO_Init+0xf4>)
 800055c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b34      	ldr	r3, [pc, #208]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b31      	ldr	r3, [pc, #196]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a30      	ldr	r2, [pc, #192]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <MX_GPIO_Init+0xf4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2a      	ldr	r2, [pc, #168]	@ (8000634 <MX_GPIO_Init+0xf4>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <MX_GPIO_Init+0xf4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a24      	ldr	r2, [pc, #144]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_GPIO_Init+0xf4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005ce:	2200      	movs	r2, #0
 80005d0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80005d4:	4818      	ldr	r0, [pc, #96]	@ (8000638 <MX_GPIO_Init+0xf8>)
 80005d6:	f000 fd37 	bl	8001048 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005da:	2337      	movs	r3, #55	@ 0x37
 80005dc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005de:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4812      	ldr	r0, [pc, #72]	@ (8000638 <MX_GPIO_Init+0xf8>)
 80005f0:	f000 fbb0 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005f4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80005f8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480a      	ldr	r0, [pc, #40]	@ (8000638 <MX_GPIO_Init+0xf8>)
 800060e:	f000 fba1 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fb94 	bl	8000d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48001000 	.word	0x48001000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <sensors_init>:
#include "sensors.h"

static int counter = 0;

void sensors_init(void) {
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    // Nessuna inizializzazione reale
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <sensors_update>:

void sensors_update(void) {
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    // Simula cambiamento dei posti liberi ogni secondo
    counter = (counter + 1) % 5;  // valori tra 0 e 4
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <sensors_update+0x2c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c59      	adds	r1, r3, #1
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <sensors_update+0x30>)
 8000664:	fb83 2301 	smull	r2, r3, r3, r1
 8000668:	105a      	asrs	r2, r3, #1
 800066a:	17cb      	asrs	r3, r1, #31
 800066c:	1ad2      	subs	r2, r2, r3
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <sensors_update+0x2c>)
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	2000048c 	.word	0x2000048c
 8000688:	66666667 	.word	0x66666667

0800068c <sensors_get_free_slots>:

int sensors_get_free_slots(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
    return 3 + counter;  // tra 3 e 7 posti liberi
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <sensors_get_free_slots+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3303      	adds	r3, #3
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000048c 	.word	0x2000048c

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006da:	2007      	movs	r0, #7
 80006dc:	f000 fb06 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <HAL_I2C_MspInit+0x7c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d127      	bne.n	800075e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_I2C_MspInit+0x80>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000726:	23c0      	movs	r3, #192	@ 0xc0
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072a:	2312      	movs	r3, #18
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000736:	2304      	movs	r3, #4
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <HAL_I2C_MspInit+0x84>)
 8000742:	f000 fb07 	bl	8000d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_I2C_MspInit+0x80>)
 800074c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40005400 	.word	0x40005400
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <HAL_SPI_MspInit+0x7c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d128      	bne.n	80007e8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 800079c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007c6:	23e0      	movs	r3, #224	@ 0xe0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d6:	2305      	movs	r3, #5
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e4:	f000 fab6 	bl	8000d54 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <HAL_UART_MspInit+0x7c>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d128      	bne.n	800086c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <HAL_UART_MspInit+0x80>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <HAL_UART_MspInit+0x80>)
 8000820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_UART_MspInit+0x80>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_UART_MspInit+0x80>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <HAL_UART_MspInit+0x80>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_UART_MspInit+0x80>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800084a:	230c      	movs	r3, #12
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800085a:	2307      	movs	r3, #7
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 fa74 	bl	8000d54 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <HAL_PCD_MspInit+0x80>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d129      	bne.n	80008f2 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008c8:	230e      	movs	r3, #14
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 fa3d 	bl	8000d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_PCD_MspInit+0x84>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	@ 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40005c00 	.word	0x40005c00
 8000900:	40021000 	.word	0x40021000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <NMI_Handler+0x4>

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <MemManage_Handler+0x4>

0800091c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <UsageFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095a:	f000 f8f5 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f002 ff20 	bl	80037d8 <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000a000 	.word	0x2000a000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	20000490 	.word	0x20000490
 80009cc:	200005e8 	.word	0x200005e8

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <wifi_bot_init>:
#include <string.h>

static uint32_t last_sent = 0;           // Timestamp invio precedente
static const uint32_t send_interval = 3000; // intervallo invio in ms

void wifi_bot_init(void) {
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
    // Nessuna inizializzazione necessaria per ora
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <wifi_bot_handle>:

void wifi_bot_handle(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8000a0a:	f000 f8b1 	bl	8000b70 <HAL_GetTick>
 8000a0e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (now - last_sent < send_interval) {
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <wifi_bot_handle+0x58>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d318      	bcc.n	8000a52 <wifi_bot_handle+0x4e>
        return; // troppo presto per inviare di nuovo
    }

    last_sent = now;
 8000a20:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <wifi_bot_handle+0x58>)
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	6013      	str	r3, [r2, #0]

    int free_slots = sensors_get_free_slots();  // funzione fornita dal team
 8000a26:	f7ff fe31 	bl	800068c <sensors_get_free_slots>
 8000a2a:	6238      	str	r0, [r7, #32]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "POSTI:%d\n", free_slots);
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <wifi_bot_handle+0x5c>)
 8000a32:	2120      	movs	r1, #32
 8000a34:	f002 fe92 	bl	800375c <sniprintf>

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fbc8 	bl	80001d0 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4639      	mov	r1, r7
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <wifi_bot_handle+0x60>)
 8000a4c:	f002 f9d5 	bl	8002dfa <HAL_UART_Transmit>
 8000a50:	e000      	b.n	8000a54 <wifi_bot_handle+0x50>
        return; // troppo presto per inviare di nuovo
 8000a52:	bf00      	nop
}
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000494 	.word	0x20000494
 8000a60:	080040dc 	.word	0x080040dc
 8000a64:	20000130 	.word	0x20000130

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff ffb0 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fea5 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fbff 	bl	800029c <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aac:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ab4:	200005e4 	.word	0x200005e4

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f90d 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fde4 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f917 	bl	8000d3a <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f8ed 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000498 	.word	0x20000498

08000b70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000498 	.word	0x20000498

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff47 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff5c 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffb0 	bl	8000ca8 <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e154      	b.n	800100e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8146 	beq.w	8001008 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x40>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 0201 	and.w	r2, r3, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d017      	beq.n	8000e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d123      	bne.n	8000e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	6939      	ldr	r1, [r7, #16]
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0203 	and.w	r2, r3, #3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80a0 	beq.w	8001008 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec8:	4b58      	ldr	r3, [pc, #352]	@ (800102c <HAL_GPIO_Init+0x2d8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a57      	ldr	r2, [pc, #348]	@ (800102c <HAL_GPIO_Init+0x2d8>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b55      	ldr	r3, [pc, #340]	@ (800102c <HAL_GPIO_Init+0x2d8>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee0:	4a53      	ldr	r2, [pc, #332]	@ (8001030 <HAL_GPIO_Init+0x2dc>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f0a:	d019      	beq.n	8000f40 <HAL_GPIO_Init+0x1ec>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a49      	ldr	r2, [pc, #292]	@ (8001034 <HAL_GPIO_Init+0x2e0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x1e8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a48      	ldr	r2, [pc, #288]	@ (8001038 <HAL_GPIO_Init+0x2e4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1e4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a47      	ldr	r2, [pc, #284]	@ (800103c <HAL_GPIO_Init+0x2e8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1e0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a46      	ldr	r2, [pc, #280]	@ (8001040 <HAL_GPIO_Init+0x2ec>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1dc>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e008      	b.n	8000f42 <HAL_GPIO_Init+0x1ee>
 8000f30:	2305      	movs	r3, #5
 8000f32:	e006      	b.n	8000f42 <HAL_GPIO_Init+0x1ee>
 8000f34:	2303      	movs	r3, #3
 8000f36:	e004      	b.n	8000f42 <HAL_GPIO_Init+0x1ee>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x1ee>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <HAL_GPIO_Init+0x1ee>
 8000f40:	2300      	movs	r3, #0
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f52:	4937      	ldr	r1, [pc, #220]	@ (8001030 <HAL_GPIO_Init+0x2dc>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f60:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f84:	4a2f      	ldr	r2, [pc, #188]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fae:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb4:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_GPIO_Init+0x2f0>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f aea3 	bne.w	8000d64 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	48000c00 	.word	0x48000c00
 8001040:	48001000 	.word	0x48001000
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e002      	b.n	800106c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e08d      	b.n	80011a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fb24 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	@ 0x24
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e006      	b.n	8001100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	e007      	b.n	800112a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d138      	bne.n	8001236 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e032      	b.n	8001238 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2224      	movs	r2, #36	@ 0x24
 80011de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001200:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2220      	movs	r2, #32
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001236:	2302      	movs	r3, #2
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b20      	cmp	r3, #32
 8001258:	d139      	bne.n	80012ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001264:	2302      	movs	r3, #2
 8001266:	e033      	b.n	80012d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	@ 0x24
 8001274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001296:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0b9      	b.n	8001462 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff faba 	bl	800087c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 f9e8 	bl	80036ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e03e      	b.n	800139e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3311      	adds	r3, #17
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3310      	adds	r3, #16
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	3313      	adds	r3, #19
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	3320      	adds	r3, #32
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3324      	adds	r3, #36	@ 0x24
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	3301      	adds	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3bb      	bcc.n	8001320 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e044      	b.n	8001438 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3301      	adds	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3b5      	bcc.n	80013ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800144e:	f002 f967 	bl	8003720 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001472:	af00      	add	r7, sp, #0
 8001474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800147c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	f000 bff4 	b.w	800247a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 816d 	beq.w	8001782 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a8:	4bb4      	ldr	r3, [pc, #720]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d00c      	beq.n	80014ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b4:	4bb1      	ldr	r3, [pc, #708]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d157      	bne.n	8001570 <HAL_RCC_OscConfig+0x104>
 80014c0:	4bae      	ldr	r3, [pc, #696]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014cc:	d150      	bne.n	8001570 <HAL_RCC_OscConfig+0x104>
 80014ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80014ee:	d802      	bhi.n	80014f6 <HAL_RCC_OscConfig+0x8a>
 80014f0:	4ba2      	ldr	r3, [pc, #648]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0xb6>
 80014f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014fa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800150a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800150e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001512:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800151e:	4b97      	ldr	r3, [pc, #604]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001522:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001526:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800152a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800152e:	fa92 f2a2 	rbit	r2, r2
 8001532:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001536:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800153a:	fab2 f282 	clz	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f042 0220 	orr.w	r2, r2, #32
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f002 021f 	and.w	r2, r2, #31
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8114 	beq.w	8001780 <HAL_RCC_OscConfig+0x314>
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 810b 	bne.w	8001780 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f000 bf85 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001574:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x124>
 8001582:	4b7e      	ldr	r3, [pc, #504]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7d      	ldr	r2, [pc, #500]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e036      	b.n	80015fe <HAL_RCC_OscConfig+0x192>
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x14e>
 80015a0:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a75      	ldr	r2, [pc, #468]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b73      	ldr	r3, [pc, #460]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a72      	ldr	r2, [pc, #456]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e021      	b.n	80015fe <HAL_RCC_OscConfig+0x192>
 80015ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x17a>
 80015cc:	4b6b      	ldr	r3, [pc, #428]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a6a      	ldr	r2, [pc, #424]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b68      	ldr	r3, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a67      	ldr	r2, [pc, #412]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x192>
 80015e6:	4b65      	ldr	r3, [pc, #404]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a64      	ldr	r2, [pc, #400]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b62      	ldr	r3, [pc, #392]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a61      	ldr	r2, [pc, #388]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 80015f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fe:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	f023 020f 	bic.w	r2, r3, #15
 8001606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	495a      	ldr	r1, [pc, #360]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001614:	4313      	orrs	r3, r2
 8001616:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d054      	beq.n	80016d2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff faa2 	bl	8000b70 <HAL_GetTick>
 800162c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001632:	f7ff fa9d 	bl	8000b70 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d902      	bls.n	8001648 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	f000 bf19 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 8001648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800164c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800165c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b3f      	cmp	r3, #63	@ 0x3f
 8001668:	d802      	bhi.n	8001670 <HAL_RCC_OscConfig+0x204>
 800166a:	4b44      	ldr	r3, [pc, #272]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	e015      	b.n	800169c <HAL_RCC_OscConfig+0x230>
 8001670:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001674:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001688:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800168c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80016a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80016a8:	fa92 f2a2 	rbit	r2, r2
 80016ac:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80016b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80016b4:	fab2 f282 	clz	r2, r2
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	f042 0220 	orr.w	r2, r2, #32
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f002 021f 	and.w	r2, r2, #31
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0b0      	beq.n	8001632 <HAL_RCC_OscConfig+0x1c6>
 80016d0:	e057      	b.n	8001782 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa4d 	bl	8000b70 <HAL_GetTick>
 80016d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa48 	bl	8000b70 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	@ 0x64
 80016ea:	d902      	bls.n	80016f2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f000 bec4 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 80016f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001706:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b3f      	cmp	r3, #63	@ 0x3f
 8001712:	d802      	bhi.n	800171a <HAL_RCC_OscConfig+0x2ae>
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x2da>
 800171a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800172e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001732:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001736:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_RCC_OscConfig+0x310>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800174a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800174e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001752:	fa92 f2a2 	rbit	r2, r2
 8001756:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800175a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f002 021f 	and.w	r2, r2, #31
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1b0      	bne.n	80016dc <HAL_RCC_OscConfig+0x270>
 800177a:	e002      	b.n	8001782 <HAL_RCC_OscConfig+0x316>
 800177c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 816c 	beq.w	8001a70 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001798:	4bcc      	ldr	r3, [pc, #816]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a4:	4bc9      	ldr	r3, [pc, #804]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d16d      	bne.n	800188c <HAL_RCC_OscConfig+0x420>
 80017b0:	4bc6      	ldr	r3, [pc, #792]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d167      	bne.n	800188c <HAL_RCC_OscConfig+0x420>
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80017ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017da:	d802      	bhi.n	80017e2 <HAL_RCC_OscConfig+0x376>
 80017dc:	4bbb      	ldr	r3, [pc, #748]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e013      	b.n	800180a <HAL_RCC_OscConfig+0x39e>
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80017fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001806:	4bb1      	ldr	r3, [pc, #708]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	2202      	movs	r2, #2
 800180c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001810:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001814:	fa92 f2a2 	rbit	r2, r2
 8001818:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800181c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001820:	fab2 f282 	clz	r2, r2
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f002 021f 	and.w	r2, r2, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00a      	beq.n	8001852 <HAL_RCC_OscConfig+0x3e6>
 800183c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	f000 be14 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b9e      	ldr	r3, [pc, #632]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	21f8      	movs	r1, #248	@ 0xf8
 8001868:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001870:	fa91 f1a1 	rbit	r1, r1
 8001874:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001878:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800187c:	fab1 f181 	clz	r1, r1
 8001880:	b2c9      	uxtb	r1, r1
 8001882:	408b      	lsls	r3, r1
 8001884:	4991      	ldr	r1, [pc, #580]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e0f1      	b.n	8001a70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8083 	beq.w	80019a4 <HAL_RCC_OscConfig+0x538>
 800189e:	2301      	movs	r3, #1
 80018a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80018b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f951 	bl	8000b70 <HAL_GetTick>
 80018ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff f94c 	bl	8000b70 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d902      	bls.n	80018ea <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 bdc8 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80018fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b3f      	cmp	r3, #63	@ 0x3f
 8001908:	d802      	bhi.n	8001910 <HAL_RCC_OscConfig+0x4a4>
 800190a:	4b70      	ldr	r3, [pc, #448]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e013      	b.n	8001938 <HAL_RCC_OscConfig+0x4cc>
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001928:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001934:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	2202      	movs	r2, #2
 800193a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800193e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001942:	fa92 f2a2 	rbit	r2, r2
 8001946:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800194a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0220 	orr.w	r2, r2, #32
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0b4      	beq.n	80018d4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b58      	ldr	r3, [pc, #352]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	21f8      	movs	r1, #248	@ 0xf8
 8001980:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001988:	fa91 f1a1 	rbit	r1, r1
 800198c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001990:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001994:	fab1 f181 	clz	r1, r1
 8001998:	b2c9      	uxtb	r1, r1
 800199a:	408b      	lsls	r3, r1
 800199c:	494b      	ldr	r1, [pc, #300]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
 80019a2:	e065      	b.n	8001a70 <HAL_RCC_OscConfig+0x604>
 80019a4:	2301      	movs	r3, #1
 80019a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80019b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f8ce 	bl	8000b70 <HAL_GetTick>
 80019d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f8c9 	bl	8000b70 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d902      	bls.n	80019f0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f000 bd45 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a0e:	d802      	bhi.n	8001a16 <HAL_RCC_OscConfig+0x5aa>
 8001a10:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e013      	b.n	8001a3e <HAL_RCC_OscConfig+0x5d2>
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_RCC_OscConfig+0x660>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001a44:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a48:	fa92 f2a2 	rbit	r2, r2
 8001a4c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001a50:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a54:	fab2 f282 	clz	r2, r2
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f042 0220 	orr.w	r2, r2, #32
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f002 021f 	and.w	r2, r2, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1b4      	bne.n	80019da <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8115 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d07e      	beq.n	8001b94 <HAL_RCC_OscConfig+0x728>
 8001a96:	2301      	movs	r3, #1
 8001a98:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_RCC_OscConfig+0x664>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2301      	movs	r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f856 	bl	8000b70 <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac8:	e00f      	b.n	8001aea <HAL_RCC_OscConfig+0x67e>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f84c 	bl	8000b70 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d902      	bls.n	8001aea <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f000 bcc8 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b44:	4bb0      	ldr	r3, [pc, #704]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b50:	2102      	movs	r1, #2
 8001b52:	6019      	str	r1, [r3, #0]
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f1a3 	rbit	r1, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b6a:	6019      	str	r1, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0a0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x668>
 8001b92:	e08d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x844>
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bc0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b90      	ldr	r3, [pc, #576]	@ (8001e0c <HAL_RCC_OscConfig+0x9a0>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ffcb 	bl	8000b70 <HAL_GetTick>
 8001bda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be0:	f7fe ffc6 	bl	8000b70 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d902      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	f000 bc42 	b.w	800247a <HAL_RCC_OscConfig+0x100e>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f2a3 	rbit	r2, r3
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	4b69      	ldr	r3, [pc, #420]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c6e:	2102      	movs	r1, #2
 8001c70:	6019      	str	r1, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f1a3 	rbit	r1, r3
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c88:	6019      	str	r1, [r3, #0]
  return result;
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d197      	bne.n	8001be0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 819e 	beq.w	8002002 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d116      	bne.n	8001d06 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	61d3      	str	r3, [r2, #28]
 8001ce4:	4b48      	ldr	r3, [pc, #288]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cfe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b42      	ldr	r3, [pc, #264]	@ (8001e10 <HAL_RCC_OscConfig+0x9a4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11a      	bne.n	8001d48 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <HAL_RCC_OscConfig+0x9a4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3e      	ldr	r2, [pc, #248]	@ (8001e10 <HAL_RCC_OscConfig+0x9a4>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff27 	bl	8000b70 <HAL_GetTick>
 8001d22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d28:	f7fe ff22 	bl	8000b70 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	@ 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e39e      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x9a4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x8fa>
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6213      	str	r3, [r2, #32]
 8001d64:	e035      	b.n	8001dd2 <HAL_RCC_OscConfig+0x966>
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x924>
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a23      	ldr	r2, [pc, #140]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a20      	ldr	r2, [pc, #128]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	e020      	b.n	8001dd2 <HAL_RCC_OscConfig+0x966>
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x94e>
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x966>
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_RCC_OscConfig+0x99c>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8087 	beq.w	8001ef2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fec4 	bl	8000b70 <HAL_GetTick>
 8001de8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e012      	b.n	8001e14 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7fe febf 	bl	8000b70 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e339      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	10908120 	.word	0x10908120
 8001e10:	40007000 	.word	0x40007000
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e40:	2202      	movs	r2, #2
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e5a:	601a      	str	r2, [r3, #0]
  return result;
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0xa10>
 8001e76:	4b98      	ldr	r3, [pc, #608]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0xa38>
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e84:	2202      	movs	r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ea8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eac:	2102      	movs	r1, #2
 8001eae:	6011      	str	r1, [r2, #0]
 8001eb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	fa92 f1a2 	rbit	r1, r2
 8001ebe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ec6:	6011      	str	r1, [r2, #0]
  return result;
 8001ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ecc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f002 021f 	and.w	r2, r2, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f43f af7f 	beq.w	8001dee <HAL_RCC_OscConfig+0x982>
 8001ef0:	e07d      	b.n	8001fee <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe3d 	bl	8000b70 <HAL_GetTick>
 8001ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7fe fe38 	bl	8000b70 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e2b2      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8001f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f18:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f40:	2202      	movs	r2, #2
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fa93 f2a3 	rbit	r2, r3
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f5a:	601a      	str	r2, [r3, #0]
  return result;
 8001f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f60:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0xb10>
 8001f76:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb38>
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f84:	2202      	movs	r2, #2
 8001f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fac:	2102      	movs	r1, #2
 8001fae:	6011      	str	r1, [r2, #0]
 8001fb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	fa92 f1a2 	rbit	r1, r2
 8001fbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fc6:	6011      	str	r1, [r2, #0]
  return result;
 8001fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fcc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d186      	bne.n	8001efc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fee:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d105      	bne.n	8002002 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002000:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8232 	beq.w	8002478 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	f000 8201 	beq.w	8002424 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002026:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	2b02      	cmp	r3, #2
 8002030:	f040 8157 	bne.w	80022e2 <HAL_RCC_OscConfig+0xe76>
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800203c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002058:	601a      	str	r2, [r3, #0]
  return result;
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002062:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800206e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	461a      	mov	r2, r3
 8002076:	2300      	movs	r3, #0
 8002078:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fd79 	bl	8000b70 <HAL_GetTick>
 800207e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fd74 	bl	8000b70 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1f0      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020bc:	601a      	str	r2, [r3, #0]
  return result;
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80020d0:	d804      	bhi.n	80020dc <HAL_RCC_OscConfig+0xc70>
 80020d2:	4b01      	ldr	r3, [pc, #4]	@ (80020d8 <HAL_RCC_OscConfig+0xc6c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e029      	b.n	800212c <HAL_RCC_OscConfig+0xcc0>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800210a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4bc3      	ldr	r3, [pc, #780]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002130:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002134:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800213e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002150:	6011      	str	r1, [r2, #0]
  return result;
 8002152:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002156:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d185      	bne.n	8002084 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4baf      	ldr	r3, [pc, #700]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800218c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	430b      	orrs	r3, r1
 800219a:	49a7      	ldr	r1, [pc, #668]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021c4:	601a      	str	r2, [r3, #0]
  return result;
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	2301      	movs	r3, #1
 80021e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fcc3 	bl	8000b70 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ee:	e009      	b.n	8002204 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fcbe 	bl	8000b70 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e13a      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800220c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002228:	601a      	str	r2, [r3, #0]
  return result;
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002232:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b3f      	cmp	r3, #63	@ 0x3f
 800223c:	d802      	bhi.n	8002244 <HAL_RCC_OscConfig+0xdd8>
 800223e:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e027      	b.n	8002294 <HAL_RCC_OscConfig+0xe28>
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800224c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002272:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	4b69      	ldr	r3, [pc, #420]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002298:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800229c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022a0:	6011      	str	r1, [r2, #0]
 80022a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fa92 f1a2 	rbit	r1, r2
 80022b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022b8:	6011      	str	r1, [r2, #0]
  return result;
 80022ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d087      	beq.n	80021f0 <HAL_RCC_OscConfig+0xd84>
 80022e0:	e0ca      	b.n	8002478 <HAL_RCC_OscConfig+0x100c>
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80022ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002310:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800231c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fc22 	bl	8000b70 <HAL_GetTick>
 800232c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	e009      	b.n	8002346 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fc1d 	bl	8000b70 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e099      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800234e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002374:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b3f      	cmp	r3, #63	@ 0x3f
 800237e:	d802      	bhi.n	8002386 <HAL_RCC_OscConfig+0xf1a>
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e027      	b.n	80023d6 <HAL_RCC_OscConfig+0xf6a>
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800238e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_OscConfig+0xfcc>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80023de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023e2:	6011      	str	r1, [r2, #0]
 80023e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	fa92 f1a2 	rbit	r1, r2
 80023f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80023fa:	6011      	str	r1, [r2, #0]
  return result;
 80023fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002400:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f042 0220 	orr.w	r2, r2, #32
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d187      	bne.n	8002332 <HAL_RCC_OscConfig+0xec6>
 8002422:	e029      	b.n	8002478 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d103      	bne.n	800243c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e020      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
 8002438:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_OscConfig+0x1018>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002444:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002448:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	429a      	cmp	r2, r3
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800245c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002460:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b09e      	sub	sp, #120	@ 0x78
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e154      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b89      	ldr	r3, [pc, #548]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b86      	ldr	r3, [pc, #536]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4984      	ldr	r1, [pc, #528]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e13c      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b7b      	ldr	r3, [pc, #492]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4978      	ldr	r1, [pc, #480]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80cd 	beq.w	8002696 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d137      	bne.n	8002574 <HAL_RCC_ClockConfig+0xec>
 8002504:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002508:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002512:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b3f      	cmp	r3, #63	@ 0x3f
 800251c:	d802      	bhi.n	8002524 <HAL_RCC_ClockConfig+0x9c>
 800251e:	4b6b      	ldr	r3, [pc, #428]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e00f      	b.n	8002544 <HAL_RCC_ClockConfig+0xbc>
 8002524:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002528:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	667b      	str	r3, [r7, #100]	@ 0x64
 8002532:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002536:	663b      	str	r3, [r7, #96]	@ 0x60
 8002538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002540:	4b62      	ldr	r3, [pc, #392]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002548:	65ba      	str	r2, [r7, #88]	@ 0x58
 800254a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800254c:	fa92 f2a2 	rbit	r2, r2
 8002550:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002552:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f042 0220 	orr.w	r2, r2, #32
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d171      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0ea      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d137      	bne.n	80025ec <HAL_RCC_ClockConfig+0x164>
 800257c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002580:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800258a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b3f      	cmp	r3, #63	@ 0x3f
 8002594:	d802      	bhi.n	800259c <HAL_RCC_ClockConfig+0x114>
 8002596:	4b4d      	ldr	r3, [pc, #308]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e00f      	b.n	80025bc <HAL_RCC_ClockConfig+0x134>
 800259c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80025b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b8:	4b44      	ldr	r3, [pc, #272]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80025ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d135      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0ae      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
 80025ec:	2302      	movs	r3, #2
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b3f      	cmp	r3, #63	@ 0x3f
 8002602:	d802      	bhi.n	800260a <HAL_RCC_ClockConfig+0x182>
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e00d      	b.n	8002626 <HAL_RCC_ClockConfig+0x19e>
 800260a:	2302      	movs	r3, #2
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	2202      	movs	r2, #2
 8002628:	61ba      	str	r2, [r7, #24]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	617a      	str	r2, [r7, #20]
  return result;
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e07a      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 0203 	bic.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	491a      	ldr	r1, [pc, #104]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002666:	f7fe fa83 	bl	8000b70 <HAL_GetTick>
 800266a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266c:	e00a      	b.n	8002684 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266e:	f7fe fa7f 	bl	8000b70 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e062      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_RCC_ClockConfig+0x244>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 020c 	and.w	r2, r3, #12
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	429a      	cmp	r2, r3
 8002694:	d1eb      	bne.n	800266e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d215      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4906      	ldr	r1, [pc, #24]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <HAL_RCC_ClockConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d006      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e041      	b.n	800274a <HAL_RCC_ClockConfig+0x2c2>
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCC_ClockConfig+0x2cc>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	491a      	ldr	r1, [pc, #104]	@ (8002754 <HAL_RCC_ClockConfig+0x2cc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <HAL_RCC_ClockConfig+0x2cc>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4912      	ldr	r1, [pc, #72]	@ (8002754 <HAL_RCC_ClockConfig+0x2cc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800270e:	f000 f829 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002712:	4601      	mov	r1, r0
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <HAL_RCC_ClockConfig+0x2cc>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800271c:	22f0      	movs	r2, #240	@ 0xf0
 800271e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	60fa      	str	r2, [r7, #12]
  return result;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	40d3      	lsrs	r3, r2
 8002732:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x2d0>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	fa21 f303 	lsr.w	r3, r1, r3
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_RCC_ClockConfig+0x2d4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_RCC_ClockConfig+0x2d8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f9d0 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3778      	adds	r7, #120	@ 0x78
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	080040e8 	.word	0x080040e8
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d002      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x30>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x36>
 8002792:	e026      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002796:	613b      	str	r3, [r7, #16]
      break;
 8002798:	e026      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c0:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e004      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	e002      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e8:	693b      	ldr	r3, [r7, #16]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	08004100 	.word	0x08004100
 8002804:	08004110 	.word	0x08004110
 8002808:	003d0900 	.word	0x003d0900

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800282a:	f7ff ffef 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282e:	4601      	mov	r1, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002838:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800283c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	603a      	str	r2, [r7, #0]
  return result;
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	40d3      	lsrs	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	080040f8 	.word	0x080040f8

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800286e:	f7ff ffcd 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002872:	4601      	mov	r1, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800287c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002880:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	fa92 f2a2 	rbit	r2, r2
 8002888:	603a      	str	r2, [r7, #0]
  return result;
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	40d3      	lsrs	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080040f8 	.word	0x080040f8

080028ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b092      	sub	sp, #72	@ 0x48
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80d2 	beq.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10e      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a49      	ldr	r2, [pc, #292]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a40      	ldr	r2, [pc, #256]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe f92d 	bl	8000b70 <HAL_GetTick>
 8002916:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe f929 	bl	8000b70 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	@ 0x64
 8002926:	d901      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e167      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002938:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8082 	beq.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002952:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002954:	429a      	cmp	r2, r3
 8002956:	d07a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002958:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	461a      	mov	r2, r3
 8002982:	2301      	movs	r3, #1
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800298a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	461a      	mov	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d049      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe f8d9 	bl	8000b70 <HAL_GetTick>
 80029be:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe f8d5 	bl	8000b70 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e111      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	61fb      	str	r3, [r7, #28]
  return result;
 80029f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a02:	4b01      	ldr	r3, [pc, #4]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	e00d      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	10908100 	.word	0x10908100
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	2202      	movs	r2, #2
 8002a26:	613a      	str	r2, [r7, #16]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	fab2 f282 	clz	r2, r2
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f002 021f 	and.w	r2, r2, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0b9      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	496a      	ldr	r1, [pc, #424]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b66      	ldr	r3, [pc, #408]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	4a65      	ldr	r2, [pc, #404]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a80:	4b60      	ldr	r3, [pc, #384]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f023 0203 	bic.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	495d      	ldr	r1, [pc, #372]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9e:	4b59      	ldr	r3, [pc, #356]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4956      	ldr	r1, [pc, #344]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002abc:	4b51      	ldr	r3, [pc, #324]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	494e      	ldr	r1, [pc, #312]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b4a      	ldr	r3, [pc, #296]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f023 0210 	bic.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4947      	ldr	r1, [pc, #284]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002af8:	4b42      	ldr	r3, [pc, #264]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	493f      	ldr	r1, [pc, #252]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f023 0220 	bic.w	r2, r3, #32
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4938      	ldr	r1, [pc, #224]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b34:	4b33      	ldr	r3, [pc, #204]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4930      	ldr	r1, [pc, #192]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b52:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	4929      	ldr	r1, [pc, #164]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	4921      	ldr	r1, [pc, #132]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	491a      	ldr	r1, [pc, #104]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bac:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	4912      	ldr	r1, [pc, #72]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	490b      	ldr	r1, [pc, #44]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	4903      	ldr	r1, [pc, #12]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3748      	adds	r7, #72	@ 0x48
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e09d      	b.n	8002d56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c2a:	d009      	beq.n	8002c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
 8002c32:	e005      	b.n	8002c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fd fd8a 	bl	8000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c80:	d902      	bls.n	8002c88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e002      	b.n	8002c8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c96:	d007      	beq.n	8002ca8 <HAL_SPI_Init+0xa0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ca0:	d002      	beq.n	8002ca8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	ea42 0103 	orr.w	r1, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0204 	and.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e040      	b.n	8002df2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd fd39 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	@ 0x24
 8002d8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa85 	bl	80032b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8ae 	bl	8002f0c <UART_SetConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01b      	b.n	8002df2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb04 	bl	80033f8 <UART_CheckIdleState>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b08a      	sub	sp, #40	@ 0x28
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d177      	bne.n	8002f02 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_UART_Transmit+0x24>
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e070      	b.n	8002f04 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2221      	movs	r2, #33	@ 0x21
 8002e2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e30:	f7fd fe9e 	bl	8000b70 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4e:	d108      	bne.n	8002e62 <HAL_UART_Transmit+0x68>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e003      	b.n	8002e6a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e6a:	e02f      	b.n	8002ecc <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2180      	movs	r1, #128	@ 0x80
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fb66 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03b      	b.n	8002f04 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e007      	b.n	8002eba <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1c9      	bne.n	8002e6c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2140      	movs	r1, #64	@ 0x40
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fb30 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e005      	b.n	8002f04 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002f3a:	f023 030c 	bic.w	r3, r3, #12
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4aa7      	ldr	r2, [pc, #668]	@ (8003224 <UART_SetConfig+0x318>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d120      	bne.n	8002fce <UART_SetConfig+0xc2>
 8002f8c:	4ba6      	ldr	r3, [pc, #664]	@ (8003228 <UART_SetConfig+0x31c>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d817      	bhi.n	8002fc8 <UART_SetConfig+0xbc>
 8002f98:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <UART_SetConfig+0x94>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fbd 	.word	0x08002fbd
 8002fa8:	08002fc3 	.word	0x08002fc3
 8002fac:	08002fb7 	.word	0x08002fb7
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0b5      	b.n	8003122 <UART_SetConfig+0x216>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0b2      	b.n	8003122 <UART_SetConfig+0x216>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e0af      	b.n	8003122 <UART_SetConfig+0x216>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e0ac      	b.n	8003122 <UART_SetConfig+0x216>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e0a9      	b.n	8003122 <UART_SetConfig+0x216>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a96      	ldr	r2, [pc, #600]	@ (800322c <UART_SetConfig+0x320>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d124      	bne.n	8003022 <UART_SetConfig+0x116>
 8002fd8:	4b93      	ldr	r3, [pc, #588]	@ (8003228 <UART_SetConfig+0x31c>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fe0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fe4:	d011      	beq.n	800300a <UART_SetConfig+0xfe>
 8002fe6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fea:	d817      	bhi.n	800301c <UART_SetConfig+0x110>
 8002fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ff0:	d011      	beq.n	8003016 <UART_SetConfig+0x10a>
 8002ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ff6:	d811      	bhi.n	800301c <UART_SetConfig+0x110>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <UART_SetConfig+0xf8>
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003000:	d006      	beq.n	8003010 <UART_SetConfig+0x104>
 8003002:	e00b      	b.n	800301c <UART_SetConfig+0x110>
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e08b      	b.n	8003122 <UART_SetConfig+0x216>
 800300a:	2302      	movs	r3, #2
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e088      	b.n	8003122 <UART_SetConfig+0x216>
 8003010:	2304      	movs	r3, #4
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e085      	b.n	8003122 <UART_SetConfig+0x216>
 8003016:	2308      	movs	r3, #8
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e082      	b.n	8003122 <UART_SetConfig+0x216>
 800301c:	2310      	movs	r3, #16
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e07f      	b.n	8003122 <UART_SetConfig+0x216>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a82      	ldr	r2, [pc, #520]	@ (8003230 <UART_SetConfig+0x324>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d124      	bne.n	8003076 <UART_SetConfig+0x16a>
 800302c:	4b7e      	ldr	r3, [pc, #504]	@ (8003228 <UART_SetConfig+0x31c>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003034:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003038:	d011      	beq.n	800305e <UART_SetConfig+0x152>
 800303a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800303e:	d817      	bhi.n	8003070 <UART_SetConfig+0x164>
 8003040:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003044:	d011      	beq.n	800306a <UART_SetConfig+0x15e>
 8003046:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800304a:	d811      	bhi.n	8003070 <UART_SetConfig+0x164>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <UART_SetConfig+0x14c>
 8003050:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003054:	d006      	beq.n	8003064 <UART_SetConfig+0x158>
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x164>
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e061      	b.n	8003122 <UART_SetConfig+0x216>
 800305e:	2302      	movs	r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e05e      	b.n	8003122 <UART_SetConfig+0x216>
 8003064:	2304      	movs	r3, #4
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e05b      	b.n	8003122 <UART_SetConfig+0x216>
 800306a:	2308      	movs	r3, #8
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e058      	b.n	8003122 <UART_SetConfig+0x216>
 8003070:	2310      	movs	r3, #16
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e055      	b.n	8003122 <UART_SetConfig+0x216>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <UART_SetConfig+0x328>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d124      	bne.n	80030ca <UART_SetConfig+0x1be>
 8003080:	4b69      	ldr	r3, [pc, #420]	@ (8003228 <UART_SetConfig+0x31c>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003088:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800308c:	d011      	beq.n	80030b2 <UART_SetConfig+0x1a6>
 800308e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003092:	d817      	bhi.n	80030c4 <UART_SetConfig+0x1b8>
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003098:	d011      	beq.n	80030be <UART_SetConfig+0x1b2>
 800309a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800309e:	d811      	bhi.n	80030c4 <UART_SetConfig+0x1b8>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <UART_SetConfig+0x1a0>
 80030a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030a8:	d006      	beq.n	80030b8 <UART_SetConfig+0x1ac>
 80030aa:	e00b      	b.n	80030c4 <UART_SetConfig+0x1b8>
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e037      	b.n	8003122 <UART_SetConfig+0x216>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e034      	b.n	8003122 <UART_SetConfig+0x216>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e031      	b.n	8003122 <UART_SetConfig+0x216>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e02e      	b.n	8003122 <UART_SetConfig+0x216>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e02b      	b.n	8003122 <UART_SetConfig+0x216>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003238 <UART_SetConfig+0x32c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d124      	bne.n	800311e <UART_SetConfig+0x212>
 80030d4:	4b54      	ldr	r3, [pc, #336]	@ (8003228 <UART_SetConfig+0x31c>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80030dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030e0:	d011      	beq.n	8003106 <UART_SetConfig+0x1fa>
 80030e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030e6:	d817      	bhi.n	8003118 <UART_SetConfig+0x20c>
 80030e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030ec:	d011      	beq.n	8003112 <UART_SetConfig+0x206>
 80030ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030f2:	d811      	bhi.n	8003118 <UART_SetConfig+0x20c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0x1f4>
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x200>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x20c>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e00d      	b.n	8003122 <UART_SetConfig+0x216>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e00a      	b.n	8003122 <UART_SetConfig+0x216>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e007      	b.n	8003122 <UART_SetConfig+0x216>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e004      	b.n	8003122 <UART_SetConfig+0x216>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e001      	b.n	8003122 <UART_SetConfig+0x216>
 800311e:	2310      	movs	r3, #16
 8003120:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312a:	d15b      	bne.n	80031e4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800312c:	7ffb      	ldrb	r3, [r7, #31]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d827      	bhi.n	8003182 <UART_SetConfig+0x276>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <UART_SetConfig+0x22c>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7ff fb62 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e013      	b.n	800318c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff fb80 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e00f      	b.n	800318c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b33      	ldr	r3, [pc, #204]	@ (800323c <UART_SetConfig+0x330>)
 800316e:	61bb      	str	r3, [r7, #24]
        break;
 8003170:	e00c      	b.n	800318c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7ff faf7 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8003176:	61b8      	str	r0, [r7, #24]
        break;
 8003178:	e008      	b.n	800318c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e004      	b.n	800318c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	77bb      	strb	r3, [r7, #30]
        break;
 800318a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8082 	beq.w	8003298 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	005a      	lsls	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	441a      	add	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d916      	bls.n	80031de <UART_SetConfig+0x2d2>
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b6:	d212      	bcs.n	80031de <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f023 030f 	bic.w	r3, r3, #15
 80031c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	89fb      	ldrh	r3, [r7, #14]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	89fa      	ldrh	r2, [r7, #14]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	e05c      	b.n	8003298 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	77bb      	strb	r3, [r7, #30]
 80031e2:	e059      	b.n	8003298 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d835      	bhi.n	8003256 <UART_SetConfig+0x34a>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x2e4>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003241 	.word	0x08003241
 80031fc:	08003257 	.word	0x08003257
 8003200:	08003247 	.word	0x08003247
 8003204:	08003257 	.word	0x08003257
 8003208:	08003257 	.word	0x08003257
 800320c:	08003257 	.word	0x08003257
 8003210:	0800324f 	.word	0x0800324f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff fb06 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8003218:	61b8      	str	r0, [r7, #24]
        break;
 800321a:	e021      	b.n	8003260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff fb24 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e01d      	b.n	8003260 <UART_SetConfig+0x354>
 8003224:	40013800 	.word	0x40013800
 8003228:	40021000 	.word	0x40021000
 800322c:	40004400 	.word	0x40004400
 8003230:	40004800 	.word	0x40004800
 8003234:	40004c00 	.word	0x40004c00
 8003238:	40005000 	.word	0x40005000
 800323c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <UART_SetConfig+0x3a4>)
 8003242:	61bb      	str	r3, [r7, #24]
        break;
 8003244:	e00c      	b.n	8003260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003246:	f7ff fa8d 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 800324a:	61b8      	str	r0, [r7, #24]
        break;
 800324c:	e008      	b.n	8003260 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e004      	b.n	8003260 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	77bb      	strb	r3, [r7, #30]
        break;
 800325e:	bf00      	nop
    }

    if (pclk != 0U)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d018      	beq.n	8003298 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085a      	lsrs	r2, r3, #1
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d909      	bls.n	8003294 <UART_SetConfig+0x388>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003286:	d205      	bcs.n	8003294 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e001      	b.n	8003298 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	007a1200 	.word	0x007a1200

080032b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01a      	beq.n	80033ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033b2:	d10a      	bne.n	80033ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b098      	sub	sp, #96	@ 0x60
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003408:	f7fd fbb2 	bl	8000b70 <HAL_GetTick>
 800340c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d12e      	bne.n	800347a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f88c 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d021      	beq.n	800347a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800344a:	653b      	str	r3, [r7, #80]	@ 0x50
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
 8003456:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e062      	b.n	8003540 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d149      	bne.n	800351c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003488:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	2200      	movs	r2, #0
 8003492:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f856 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d03c      	beq.n	800351c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	623b      	str	r3, [r7, #32]
   return(result);
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e6      	bne.n	80034a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3308      	adds	r3, #8
 80034f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f4:	61fa      	str	r2, [r7, #28]
 80034f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	69b9      	ldr	r1, [r7, #24]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	617b      	str	r3, [r7, #20]
   return(result);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e5      	bne.n	80034d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e011      	b.n	8003540 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3758      	adds	r7, #88	@ 0x58
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003558:	e04f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d04b      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fd fb05 	bl	8000b70 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <UART_WaitOnFlagUntilTimeout+0x30>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e04e      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d037      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b80      	cmp	r3, #128	@ 0x80
 800358e:	d034      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d031      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d110      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2208      	movs	r2, #8
 80035aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f838 	bl	8003622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2208      	movs	r2, #8
 80035b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e029      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d4:	d111      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f81e 	bl	8003622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0a0      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b095      	sub	sp, #84	@ 0x54
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003648:	643b      	str	r3, [r7, #64]	@ 0x40
 800364a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800364e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	61fb      	str	r3, [r7, #28]
   return(result);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800367c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800367e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003694:	2b01      	cmp	r3, #1
 8003696:	d118      	bne.n	80036ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f023 0310 	bic.w	r3, r3, #16
 80036ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	613b      	str	r3, [r7, #16]
   return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e6      	bne.n	8003698 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036de:	bf00      	nop
 80036e0:	3754      	adds	r7, #84	@ 0x54
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80036f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	b29b      	uxth	r3, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	4013      	ands	r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <sniprintf>:
 800375c:	b40c      	push	{r2, r3}
 800375e:	b530      	push	{r4, r5, lr}
 8003760:	4b18      	ldr	r3, [pc, #96]	@ (80037c4 <sniprintf+0x68>)
 8003762:	1e0c      	subs	r4, r1, #0
 8003764:	681d      	ldr	r5, [r3, #0]
 8003766:	b09d      	sub	sp, #116	@ 0x74
 8003768:	da08      	bge.n	800377c <sniprintf+0x20>
 800376a:	238b      	movs	r3, #139	@ 0x8b
 800376c:	602b      	str	r3, [r5, #0]
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	b01d      	add	sp, #116	@ 0x74
 8003774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003778:	b002      	add	sp, #8
 800377a:	4770      	bx	lr
 800377c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	931b      	str	r3, [sp, #108]	@ 0x6c
 800378a:	bf14      	ite	ne
 800378c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003790:	4623      	moveq	r3, r4
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	9307      	str	r3, [sp, #28]
 8003796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800379a:	9002      	str	r0, [sp, #8]
 800379c:	9006      	str	r0, [sp, #24]
 800379e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80037a4:	ab21      	add	r3, sp, #132	@ 0x84
 80037a6:	a902      	add	r1, sp, #8
 80037a8:	4628      	mov	r0, r5
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	f000 f994 	bl	8003ad8 <_svfiprintf_r>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	bfbc      	itt	lt
 80037b4:	238b      	movlt	r3, #139	@ 0x8b
 80037b6:	602b      	strlt	r3, [r5, #0]
 80037b8:	2c00      	cmp	r4, #0
 80037ba:	d0da      	beq.n	8003772 <sniprintf+0x16>
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e7d6      	b.n	8003772 <sniprintf+0x16>
 80037c4:	2000000c 	.word	0x2000000c

080037c8 <memset>:
 80037c8:	4402      	add	r2, r0
 80037ca:	4603      	mov	r3, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <__errno>:
 80037d8:	4b01      	ldr	r3, [pc, #4]	@ (80037e0 <__errno+0x8>)
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000000c 	.word	0x2000000c

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	4d0d      	ldr	r5, [pc, #52]	@ (800381c <__libc_init_array+0x38>)
 80037e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003820 <__libc_init_array+0x3c>)
 80037ea:	1b64      	subs	r4, r4, r5
 80037ec:	10a4      	asrs	r4, r4, #2
 80037ee:	2600      	movs	r6, #0
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003824 <__libc_init_array+0x40>)
 80037f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003828 <__libc_init_array+0x44>)
 80037f8:	f000 fc64 	bl	80040c4 <_init>
 80037fc:	1b64      	subs	r4, r4, r5
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	2600      	movs	r6, #0
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	0800415c 	.word	0x0800415c
 8003820:	0800415c 	.word	0x0800415c
 8003824:	0800415c 	.word	0x0800415c
 8003828:	08004160 	.word	0x08004160

0800382c <__retarget_lock_acquire_recursive>:
 800382c:	4770      	bx	lr

0800382e <__retarget_lock_release_recursive>:
 800382e:	4770      	bx	lr

08003830 <_free_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	2900      	cmp	r1, #0
 8003836:	d041      	beq.n	80038bc <_free_r+0x8c>
 8003838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383c:	1f0c      	subs	r4, r1, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bfb8      	it	lt
 8003842:	18e4      	addlt	r4, r4, r3
 8003844:	f000 f8e0 	bl	8003a08 <__malloc_lock>
 8003848:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <_free_r+0x90>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	b933      	cbnz	r3, 800385c <_free_r+0x2c>
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6014      	str	r4, [r2, #0]
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003858:	f000 b8dc 	b.w	8003a14 <__malloc_unlock>
 800385c:	42a3      	cmp	r3, r4
 800385e:	d908      	bls.n	8003872 <_free_r+0x42>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428b      	cmp	r3, r1
 8003866:	bf01      	itttt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	1809      	addeq	r1, r1, r0
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	e7ed      	b.n	800384e <_free_r+0x1e>
 8003872:	461a      	mov	r2, r3
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	b10b      	cbz	r3, 800387c <_free_r+0x4c>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d9fa      	bls.n	8003872 <_free_r+0x42>
 800387c:	6811      	ldr	r1, [r2, #0]
 800387e:	1850      	adds	r0, r2, r1
 8003880:	42a0      	cmp	r0, r4
 8003882:	d10b      	bne.n	800389c <_free_r+0x6c>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	4401      	add	r1, r0
 8003888:	1850      	adds	r0, r2, r1
 800388a:	4283      	cmp	r3, r0
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	d1e0      	bne.n	8003852 <_free_r+0x22>
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	6053      	str	r3, [r2, #4]
 8003896:	4408      	add	r0, r1
 8003898:	6010      	str	r0, [r2, #0]
 800389a:	e7da      	b.n	8003852 <_free_r+0x22>
 800389c:	d902      	bls.n	80038a4 <_free_r+0x74>
 800389e:	230c      	movs	r3, #12
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	e7d6      	b.n	8003852 <_free_r+0x22>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf04      	itt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	bf04      	itt	eq
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	6054      	str	r4, [r2, #4]
 80038ba:	e7ca      	b.n	8003852 <_free_r+0x22>
 80038bc:	bd38      	pop	{r3, r4, r5, pc}
 80038be:	bf00      	nop
 80038c0:	200005e0 	.word	0x200005e0

080038c4 <sbrk_aligned>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003904 <sbrk_aligned+0x40>)
 80038c8:	460c      	mov	r4, r1
 80038ca:	6831      	ldr	r1, [r6, #0]
 80038cc:	4605      	mov	r5, r0
 80038ce:	b911      	cbnz	r1, 80038d6 <sbrk_aligned+0x12>
 80038d0:	f000 fba4 	bl	800401c <_sbrk_r>
 80038d4:	6030      	str	r0, [r6, #0]
 80038d6:	4621      	mov	r1, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 fb9f 	bl	800401c <_sbrk_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	d103      	bne.n	80038ea <sbrk_aligned+0x26>
 80038e2:	f04f 34ff 	mov.w	r4, #4294967295
 80038e6:	4620      	mov	r0, r4
 80038e8:	bd70      	pop	{r4, r5, r6, pc}
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d0f8      	beq.n	80038e6 <sbrk_aligned+0x22>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 fb90 	bl	800401c <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d1f2      	bne.n	80038e6 <sbrk_aligned+0x22>
 8003900:	e7ef      	b.n	80038e2 <sbrk_aligned+0x1e>
 8003902:	bf00      	nop
 8003904:	200005dc 	.word	0x200005dc

08003908 <_malloc_r>:
 8003908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800390c:	1ccd      	adds	r5, r1, #3
 800390e:	f025 0503 	bic.w	r5, r5, #3
 8003912:	3508      	adds	r5, #8
 8003914:	2d0c      	cmp	r5, #12
 8003916:	bf38      	it	cc
 8003918:	250c      	movcc	r5, #12
 800391a:	2d00      	cmp	r5, #0
 800391c:	4606      	mov	r6, r0
 800391e:	db01      	blt.n	8003924 <_malloc_r+0x1c>
 8003920:	42a9      	cmp	r1, r5
 8003922:	d904      	bls.n	800392e <_malloc_r+0x26>
 8003924:	230c      	movs	r3, #12
 8003926:	6033      	str	r3, [r6, #0]
 8003928:	2000      	movs	r0, #0
 800392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a04 <_malloc_r+0xfc>
 8003932:	f000 f869 	bl	8003a08 <__malloc_lock>
 8003936:	f8d8 3000 	ldr.w	r3, [r8]
 800393a:	461c      	mov	r4, r3
 800393c:	bb44      	cbnz	r4, 8003990 <_malloc_r+0x88>
 800393e:	4629      	mov	r1, r5
 8003940:	4630      	mov	r0, r6
 8003942:	f7ff ffbf 	bl	80038c4 <sbrk_aligned>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	4604      	mov	r4, r0
 800394a:	d158      	bne.n	80039fe <_malloc_r+0xf6>
 800394c:	f8d8 4000 	ldr.w	r4, [r8]
 8003950:	4627      	mov	r7, r4
 8003952:	2f00      	cmp	r7, #0
 8003954:	d143      	bne.n	80039de <_malloc_r+0xd6>
 8003956:	2c00      	cmp	r4, #0
 8003958:	d04b      	beq.n	80039f2 <_malloc_r+0xea>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	eb04 0903 	add.w	r9, r4, r3
 8003964:	f000 fb5a 	bl	800401c <_sbrk_r>
 8003968:	4581      	cmp	r9, r0
 800396a:	d142      	bne.n	80039f2 <_malloc_r+0xea>
 800396c:	6821      	ldr	r1, [r4, #0]
 800396e:	1a6d      	subs	r5, r5, r1
 8003970:	4629      	mov	r1, r5
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff ffa6 	bl	80038c4 <sbrk_aligned>
 8003978:	3001      	adds	r0, #1
 800397a:	d03a      	beq.n	80039f2 <_malloc_r+0xea>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	442b      	add	r3, r5
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	f8d8 3000 	ldr.w	r3, [r8]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	bb62      	cbnz	r2, 80039e4 <_malloc_r+0xdc>
 800398a:	f8c8 7000 	str.w	r7, [r8]
 800398e:	e00f      	b.n	80039b0 <_malloc_r+0xa8>
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	1b52      	subs	r2, r2, r5
 8003994:	d420      	bmi.n	80039d8 <_malloc_r+0xd0>
 8003996:	2a0b      	cmp	r2, #11
 8003998:	d917      	bls.n	80039ca <_malloc_r+0xc2>
 800399a:	1961      	adds	r1, r4, r5
 800399c:	42a3      	cmp	r3, r4
 800399e:	6025      	str	r5, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	6059      	strne	r1, [r3, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	bf08      	it	eq
 80039a8:	f8c8 1000 	streq.w	r1, [r8]
 80039ac:	5162      	str	r2, [r4, r5]
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 f82f 	bl	8003a14 <__malloc_unlock>
 80039b6:	f104 000b 	add.w	r0, r4, #11
 80039ba:	1d23      	adds	r3, r4, #4
 80039bc:	f020 0007 	bic.w	r0, r0, #7
 80039c0:	1ac2      	subs	r2, r0, r3
 80039c2:	bf1c      	itt	ne
 80039c4:	1a1b      	subne	r3, r3, r0
 80039c6:	50a3      	strne	r3, [r4, r2]
 80039c8:	e7af      	b.n	800392a <_malloc_r+0x22>
 80039ca:	6862      	ldr	r2, [r4, #4]
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	bf0c      	ite	eq
 80039d0:	f8c8 2000 	streq.w	r2, [r8]
 80039d4:	605a      	strne	r2, [r3, #4]
 80039d6:	e7eb      	b.n	80039b0 <_malloc_r+0xa8>
 80039d8:	4623      	mov	r3, r4
 80039da:	6864      	ldr	r4, [r4, #4]
 80039dc:	e7ae      	b.n	800393c <_malloc_r+0x34>
 80039de:	463c      	mov	r4, r7
 80039e0:	687f      	ldr	r7, [r7, #4]
 80039e2:	e7b6      	b.n	8003952 <_malloc_r+0x4a>
 80039e4:	461a      	mov	r2, r3
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d1fb      	bne.n	80039e4 <_malloc_r+0xdc>
 80039ec:	2300      	movs	r3, #0
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e7de      	b.n	80039b0 <_malloc_r+0xa8>
 80039f2:	230c      	movs	r3, #12
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f80c 	bl	8003a14 <__malloc_unlock>
 80039fc:	e794      	b.n	8003928 <_malloc_r+0x20>
 80039fe:	6005      	str	r5, [r0, #0]
 8003a00:	e7d6      	b.n	80039b0 <_malloc_r+0xa8>
 8003a02:	bf00      	nop
 8003a04:	200005e0 	.word	0x200005e0

08003a08 <__malloc_lock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	@ (8003a10 <__malloc_lock+0x8>)
 8003a0a:	f7ff bf0f 	b.w	800382c <__retarget_lock_acquire_recursive>
 8003a0e:	bf00      	nop
 8003a10:	200005d8 	.word	0x200005d8

08003a14 <__malloc_unlock>:
 8003a14:	4801      	ldr	r0, [pc, #4]	@ (8003a1c <__malloc_unlock+0x8>)
 8003a16:	f7ff bf0a 	b.w	800382e <__retarget_lock_release_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	200005d8 	.word	0x200005d8

08003a20 <__ssputs_r>:
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	688e      	ldr	r6, [r1, #8]
 8003a26:	461f      	mov	r7, r3
 8003a28:	42be      	cmp	r6, r7
 8003a2a:	680b      	ldr	r3, [r1, #0]
 8003a2c:	4682      	mov	sl, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4690      	mov	r8, r2
 8003a32:	d82d      	bhi.n	8003a90 <__ssputs_r+0x70>
 8003a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a3c:	d026      	beq.n	8003a8c <__ssputs_r+0x6c>
 8003a3e:	6965      	ldr	r5, [r4, #20]
 8003a40:	6909      	ldr	r1, [r1, #16]
 8003a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a46:	eba3 0901 	sub.w	r9, r3, r1
 8003a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a4e:	1c7b      	adds	r3, r7, #1
 8003a50:	444b      	add	r3, r9
 8003a52:	106d      	asrs	r5, r5, #1
 8003a54:	429d      	cmp	r5, r3
 8003a56:	bf38      	it	cc
 8003a58:	461d      	movcc	r5, r3
 8003a5a:	0553      	lsls	r3, r2, #21
 8003a5c:	d527      	bpl.n	8003aae <__ssputs_r+0x8e>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7ff ff52 	bl	8003908 <_malloc_r>
 8003a64:	4606      	mov	r6, r0
 8003a66:	b360      	cbz	r0, 8003ac2 <__ssputs_r+0xa2>
 8003a68:	6921      	ldr	r1, [r4, #16]
 8003a6a:	464a      	mov	r2, r9
 8003a6c:	f000 fae6 	bl	800403c <memcpy>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	6126      	str	r6, [r4, #16]
 8003a7e:	6165      	str	r5, [r4, #20]
 8003a80:	444e      	add	r6, r9
 8003a82:	eba5 0509 	sub.w	r5, r5, r9
 8003a86:	6026      	str	r6, [r4, #0]
 8003a88:	60a5      	str	r5, [r4, #8]
 8003a8a:	463e      	mov	r6, r7
 8003a8c:	42be      	cmp	r6, r7
 8003a8e:	d900      	bls.n	8003a92 <__ssputs_r+0x72>
 8003a90:	463e      	mov	r6, r7
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	4632      	mov	r2, r6
 8003a96:	4641      	mov	r1, r8
 8003a98:	f000 faa6 	bl	8003fe8 <memmove>
 8003a9c:	68a3      	ldr	r3, [r4, #8]
 8003a9e:	1b9b      	subs	r3, r3, r6
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	4433      	add	r3, r6
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aae:	462a      	mov	r2, r5
 8003ab0:	f000 fad2 	bl	8004058 <_realloc_r>
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d1e0      	bne.n	8003a7c <__ssputs_r+0x5c>
 8003aba:	6921      	ldr	r1, [r4, #16]
 8003abc:	4650      	mov	r0, sl
 8003abe:	f7ff feb7 	bl	8003830 <_free_r>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e7e9      	b.n	8003aaa <__ssputs_r+0x8a>
	...

08003ad8 <_svfiprintf_r>:
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	4698      	mov	r8, r3
 8003ade:	898b      	ldrh	r3, [r1, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	b09d      	sub	sp, #116	@ 0x74
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	d510      	bpl.n	8003b0e <_svfiprintf_r+0x36>
 8003aec:	690b      	ldr	r3, [r1, #16]
 8003aee:	b973      	cbnz	r3, 8003b0e <_svfiprintf_r+0x36>
 8003af0:	2140      	movs	r1, #64	@ 0x40
 8003af2:	f7ff ff09 	bl	8003908 <_malloc_r>
 8003af6:	6028      	str	r0, [r5, #0]
 8003af8:	6128      	str	r0, [r5, #16]
 8003afa:	b930      	cbnz	r0, 8003b0a <_svfiprintf_r+0x32>
 8003afc:	230c      	movs	r3, #12
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	b01d      	add	sp, #116	@ 0x74
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	2340      	movs	r3, #64	@ 0x40
 8003b0c:	616b      	str	r3, [r5, #20]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b12:	2320      	movs	r3, #32
 8003b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b1c:	2330      	movs	r3, #48	@ 0x30
 8003b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003cbc <_svfiprintf_r+0x1e4>
 8003b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b26:	f04f 0901 	mov.w	r9, #1
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	469a      	mov	sl, r3
 8003b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b32:	b10a      	cbz	r2, 8003b38 <_svfiprintf_r+0x60>
 8003b34:	2a25      	cmp	r2, #37	@ 0x25
 8003b36:	d1f9      	bne.n	8003b2c <_svfiprintf_r+0x54>
 8003b38:	ebba 0b04 	subs.w	fp, sl, r4
 8003b3c:	d00b      	beq.n	8003b56 <_svfiprintf_r+0x7e>
 8003b3e:	465b      	mov	r3, fp
 8003b40:	4622      	mov	r2, r4
 8003b42:	4629      	mov	r1, r5
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff ff6b 	bl	8003a20 <__ssputs_r>
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f000 80a7 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b52:	445a      	add	r2, fp
 8003b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b56:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 809f 	beq.w	8003c9e <_svfiprintf_r+0x1c6>
 8003b60:	2300      	movs	r3, #0
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b6a:	f10a 0a01 	add.w	sl, sl, #1
 8003b6e:	9304      	str	r3, [sp, #16]
 8003b70:	9307      	str	r3, [sp, #28]
 8003b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b78:	4654      	mov	r4, sl
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b80:	484e      	ldr	r0, [pc, #312]	@ (8003cbc <_svfiprintf_r+0x1e4>)
 8003b82:	f7fc fb2d 	bl	80001e0 <memchr>
 8003b86:	9a04      	ldr	r2, [sp, #16]
 8003b88:	b9d8      	cbnz	r0, 8003bc2 <_svfiprintf_r+0xea>
 8003b8a:	06d0      	lsls	r0, r2, #27
 8003b8c:	bf44      	itt	mi
 8003b8e:	2320      	movmi	r3, #32
 8003b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b94:	0711      	lsls	r1, r2, #28
 8003b96:	bf44      	itt	mi
 8003b98:	232b      	movmi	r3, #43	@ 0x2b
 8003b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba4:	d015      	beq.n	8003bd2 <_svfiprintf_r+0xfa>
 8003ba6:	9a07      	ldr	r2, [sp, #28]
 8003ba8:	4654      	mov	r4, sl
 8003baa:	2000      	movs	r0, #0
 8003bac:	f04f 0c0a 	mov.w	ip, #10
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb6:	3b30      	subs	r3, #48	@ 0x30
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d94b      	bls.n	8003c54 <_svfiprintf_r+0x17c>
 8003bbc:	b1b0      	cbz	r0, 8003bec <_svfiprintf_r+0x114>
 8003bbe:	9207      	str	r2, [sp, #28]
 8003bc0:	e014      	b.n	8003bec <_svfiprintf_r+0x114>
 8003bc2:	eba0 0308 	sub.w	r3, r0, r8
 8003bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	9304      	str	r3, [sp, #16]
 8003bce:	46a2      	mov	sl, r4
 8003bd0:	e7d2      	b.n	8003b78 <_svfiprintf_r+0xa0>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	1d19      	adds	r1, r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	9103      	str	r1, [sp, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfbb      	ittet	lt
 8003bde:	425b      	neglt	r3, r3
 8003be0:	f042 0202 	orrlt.w	r2, r2, #2
 8003be4:	9307      	strge	r3, [sp, #28]
 8003be6:	9307      	strlt	r3, [sp, #28]
 8003be8:	bfb8      	it	lt
 8003bea:	9204      	strlt	r2, [sp, #16]
 8003bec:	7823      	ldrb	r3, [r4, #0]
 8003bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bf0:	d10a      	bne.n	8003c08 <_svfiprintf_r+0x130>
 8003bf2:	7863      	ldrb	r3, [r4, #1]
 8003bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf6:	d132      	bne.n	8003c5e <_svfiprintf_r+0x186>
 8003bf8:	9b03      	ldr	r3, [sp, #12]
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	9203      	str	r2, [sp, #12]
 8003c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c04:	3402      	adds	r4, #2
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ccc <_svfiprintf_r+0x1f4>
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4650      	mov	r0, sl
 8003c12:	f7fc fae5 	bl	80001e0 <memchr>
 8003c16:	b138      	cbz	r0, 8003c28 <_svfiprintf_r+0x150>
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	eba0 000a 	sub.w	r0, r0, sl
 8003c1e:	2240      	movs	r2, #64	@ 0x40
 8003c20:	4082      	lsls	r2, r0
 8003c22:	4313      	orrs	r3, r2
 8003c24:	3401      	adds	r4, #1
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	4824      	ldr	r0, [pc, #144]	@ (8003cc0 <_svfiprintf_r+0x1e8>)
 8003c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c32:	2206      	movs	r2, #6
 8003c34:	f7fc fad4 	bl	80001e0 <memchr>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d036      	beq.n	8003caa <_svfiprintf_r+0x1d2>
 8003c3c:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <_svfiprintf_r+0x1ec>)
 8003c3e:	bb1b      	cbnz	r3, 8003c88 <_svfiprintf_r+0x1b0>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	3307      	adds	r3, #7
 8003c44:	f023 0307 	bic.w	r3, r3, #7
 8003c48:	3308      	adds	r3, #8
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c4e:	4433      	add	r3, r6
 8003c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c52:	e76a      	b.n	8003b2a <_svfiprintf_r+0x52>
 8003c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c58:	460c      	mov	r4, r1
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e7a8      	b.n	8003bb0 <_svfiprintf_r+0xd8>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	3401      	adds	r4, #1
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c70:	3a30      	subs	r2, #48	@ 0x30
 8003c72:	2a09      	cmp	r2, #9
 8003c74:	d903      	bls.n	8003c7e <_svfiprintf_r+0x1a6>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0c6      	beq.n	8003c08 <_svfiprintf_r+0x130>
 8003c7a:	9105      	str	r1, [sp, #20]
 8003c7c:	e7c4      	b.n	8003c08 <_svfiprintf_r+0x130>
 8003c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c82:	4604      	mov	r4, r0
 8003c84:	2301      	movs	r3, #1
 8003c86:	e7f0      	b.n	8003c6a <_svfiprintf_r+0x192>
 8003c88:	ab03      	add	r3, sp, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <_svfiprintf_r+0x1f0>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	4638      	mov	r0, r7
 8003c94:	f3af 8000 	nop.w
 8003c98:	1c42      	adds	r2, r0, #1
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	d1d6      	bne.n	8003c4c <_svfiprintf_r+0x174>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	065b      	lsls	r3, r3, #25
 8003ca2:	f53f af2d 	bmi.w	8003b00 <_svfiprintf_r+0x28>
 8003ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ca8:	e72c      	b.n	8003b04 <_svfiprintf_r+0x2c>
 8003caa:	ab03      	add	r3, sp, #12
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	462a      	mov	r2, r5
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <_svfiprintf_r+0x1f0>)
 8003cb2:	a904      	add	r1, sp, #16
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	f000 f879 	bl	8003dac <_printf_i>
 8003cba:	e7ed      	b.n	8003c98 <_svfiprintf_r+0x1c0>
 8003cbc:	08004120 	.word	0x08004120
 8003cc0:	0800412a 	.word	0x0800412a
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a21 	.word	0x08003a21
 8003ccc:	08004126 	.word	0x08004126

08003cd0 <_printf_common>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	4698      	mov	r8, r3
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bfb8      	it	lt
 8003ce4:	4613      	movlt	r3, r2
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cec:	4607      	mov	r7, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_printf_common+0x26>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	0699      	lsls	r1, r3, #26
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6833      	ldrmi	r3, [r6, #0]
 8003cfe:	3302      	addmi	r3, #2
 8003d00:	6033      	strmi	r3, [r6, #0]
 8003d02:	6825      	ldr	r5, [r4, #0]
 8003d04:	f015 0506 	ands.w	r5, r5, #6
 8003d08:	d106      	bne.n	8003d18 <_printf_common+0x48>
 8003d0a:	f104 0a19 	add.w	sl, r4, #25
 8003d0e:	68e3      	ldr	r3, [r4, #12]
 8003d10:	6832      	ldr	r2, [r6, #0]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	dc26      	bgt.n	8003d66 <_printf_common+0x96>
 8003d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	3b00      	subs	r3, #0
 8003d20:	bf18      	it	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	0692      	lsls	r2, r2, #26
 8003d26:	d42b      	bmi.n	8003d80 <_printf_common+0xb0>
 8003d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c8      	blx	r9
 8003d32:	3001      	adds	r0, #1
 8003d34:	d01e      	beq.n	8003d74 <_printf_common+0xa4>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6922      	ldr	r2, [r4, #16]
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf02      	ittt	eq
 8003d42:	68e5      	ldreq	r5, [r4, #12]
 8003d44:	6833      	ldreq	r3, [r6, #0]
 8003d46:	1aed      	subeq	r5, r5, r3
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	bf0c      	ite	eq
 8003d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d50:	2500      	movne	r5, #0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfc4      	itt	gt
 8003d56:	1a9b      	subgt	r3, r3, r2
 8003d58:	18ed      	addgt	r5, r5, r3
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	341a      	adds	r4, #26
 8003d5e:	42b5      	cmp	r5, r6
 8003d60:	d11a      	bne.n	8003d98 <_printf_common+0xc8>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e008      	b.n	8003d78 <_printf_common+0xa8>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c8      	blx	r9
 8003d70:	3001      	adds	r0, #1
 8003d72:	d103      	bne.n	8003d7c <_printf_common+0xac>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7c6      	b.n	8003d0e <_printf_common+0x3e>
 8003d80:	18e1      	adds	r1, r4, r3
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	2030      	movs	r0, #48	@ 0x30
 8003d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d8a:	4422      	add	r2, r4
 8003d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d94:	3302      	adds	r3, #2
 8003d96:	e7c7      	b.n	8003d28 <_printf_common+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c8      	blx	r9
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0e6      	beq.n	8003d74 <_printf_common+0xa4>
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7d9      	b.n	8003d5e <_printf_common+0x8e>
	...

08003dac <_printf_i>:
 8003dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	7e0f      	ldrb	r7, [r1, #24]
 8003db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003db4:	2f78      	cmp	r7, #120	@ 0x78
 8003db6:	4691      	mov	r9, r2
 8003db8:	4680      	mov	r8, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dc2:	d807      	bhi.n	8003dd4 <_printf_i+0x28>
 8003dc4:	2f62      	cmp	r7, #98	@ 0x62
 8003dc6:	d80a      	bhi.n	8003dde <_printf_i+0x32>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	f000 80d1 	beq.w	8003f70 <_printf_i+0x1c4>
 8003dce:	2f58      	cmp	r7, #88	@ 0x58
 8003dd0:	f000 80b8 	beq.w	8003f44 <_printf_i+0x198>
 8003dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ddc:	e03a      	b.n	8003e54 <_printf_i+0xa8>
 8003dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003de2:	2b15      	cmp	r3, #21
 8003de4:	d8f6      	bhi.n	8003dd4 <_printf_i+0x28>
 8003de6:	a101      	add	r1, pc, #4	@ (adr r1, 8003dec <_printf_i+0x40>)
 8003de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003dd5 	.word	0x08003dd5
 8003df8:	08003dd5 	.word	0x08003dd5
 8003dfc:	08003dd5 	.word	0x08003dd5
 8003e00:	08003dd5 	.word	0x08003dd5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003dd5 	.word	0x08003dd5
 8003e0c:	08003dd5 	.word	0x08003dd5
 8003e10:	08003dd5 	.word	0x08003dd5
 8003e14:	08003dd5 	.word	0x08003dd5
 8003e18:	08003f57 	.word	0x08003f57
 8003e1c:	08003e83 	.word	0x08003e83
 8003e20:	08003f11 	.word	0x08003f11
 8003e24:	08003dd5 	.word	0x08003dd5
 8003e28:	08003dd5 	.word	0x08003dd5
 8003e2c:	08003f79 	.word	0x08003f79
 8003e30:	08003dd5 	.word	0x08003dd5
 8003e34:	08003e83 	.word	0x08003e83
 8003e38:	08003dd5 	.word	0x08003dd5
 8003e3c:	08003dd5 	.word	0x08003dd5
 8003e40:	08003f19 	.word	0x08003f19
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6032      	str	r2, [r6, #0]
 8003e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e54:	2301      	movs	r3, #1
 8003e56:	e09c      	b.n	8003f92 <_printf_i+0x1e6>
 8003e58:	6833      	ldr	r3, [r6, #0]
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	1d19      	adds	r1, r3, #4
 8003e5e:	6031      	str	r1, [r6, #0]
 8003e60:	0606      	lsls	r6, r0, #24
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0xbc>
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	e003      	b.n	8003e70 <_printf_i+0xc4>
 8003e68:	0645      	lsls	r5, r0, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0xb8>
 8003e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	da03      	bge.n	8003e7c <_printf_i+0xd0>
 8003e74:	232d      	movs	r3, #45	@ 0x2d
 8003e76:	426d      	negs	r5, r5
 8003e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e7c:	4858      	ldr	r0, [pc, #352]	@ (8003fe0 <_printf_i+0x234>)
 8003e7e:	230a      	movs	r3, #10
 8003e80:	e011      	b.n	8003ea6 <_printf_i+0xfa>
 8003e82:	6821      	ldr	r1, [r4, #0]
 8003e84:	6833      	ldr	r3, [r6, #0]
 8003e86:	0608      	lsls	r0, r1, #24
 8003e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e8c:	d402      	bmi.n	8003e94 <_printf_i+0xe8>
 8003e8e:	0649      	lsls	r1, r1, #25
 8003e90:	bf48      	it	mi
 8003e92:	b2ad      	uxthmi	r5, r5
 8003e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e96:	4852      	ldr	r0, [pc, #328]	@ (8003fe0 <_printf_i+0x234>)
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	bf14      	ite	ne
 8003e9c:	230a      	movne	r3, #10
 8003e9e:	2308      	moveq	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ea6:	6866      	ldr	r6, [r4, #4]
 8003ea8:	60a6      	str	r6, [r4, #8]
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	db05      	blt.n	8003eba <_printf_i+0x10e>
 8003eae:	6821      	ldr	r1, [r4, #0]
 8003eb0:	432e      	orrs	r6, r5
 8003eb2:	f021 0104 	bic.w	r1, r1, #4
 8003eb6:	6021      	str	r1, [r4, #0]
 8003eb8:	d04b      	beq.n	8003f52 <_printf_i+0x1a6>
 8003eba:	4616      	mov	r6, r2
 8003ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ec4:	5dc7      	ldrb	r7, [r0, r7]
 8003ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eca:	462f      	mov	r7, r5
 8003ecc:	42bb      	cmp	r3, r7
 8003ece:	460d      	mov	r5, r1
 8003ed0:	d9f4      	bls.n	8003ebc <_printf_i+0x110>
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d10b      	bne.n	8003eee <_printf_i+0x142>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	07df      	lsls	r7, r3, #31
 8003eda:	d508      	bpl.n	8003eee <_printf_i+0x142>
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6861      	ldr	r1, [r4, #4]
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	bfde      	ittt	le
 8003ee4:	2330      	movle	r3, #48	@ 0x30
 8003ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eee:	1b92      	subs	r2, r2, r6
 8003ef0:	6122      	str	r2, [r4, #16]
 8003ef2:	f8cd a000 	str.w	sl, [sp]
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	4621      	mov	r1, r4
 8003efc:	4640      	mov	r0, r8
 8003efe:	f7ff fee7 	bl	8003cd0 <_printf_common>
 8003f02:	3001      	adds	r0, #1
 8003f04:	d14a      	bne.n	8003f9c <_printf_i+0x1f0>
 8003f06:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0a:	b004      	add	sp, #16
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f043 0320 	orr.w	r3, r3, #32
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	4832      	ldr	r0, [pc, #200]	@ (8003fe4 <_printf_i+0x238>)
 8003f1a:	2778      	movs	r7, #120	@ 0x78
 8003f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	6831      	ldr	r1, [r6, #0]
 8003f24:	061f      	lsls	r7, r3, #24
 8003f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f2a:	d402      	bmi.n	8003f32 <_printf_i+0x186>
 8003f2c:	065f      	lsls	r7, r3, #25
 8003f2e:	bf48      	it	mi
 8003f30:	b2ad      	uxthmi	r5, r5
 8003f32:	6031      	str	r1, [r6, #0]
 8003f34:	07d9      	lsls	r1, r3, #31
 8003f36:	bf44      	itt	mi
 8003f38:	f043 0320 	orrmi.w	r3, r3, #32
 8003f3c:	6023      	strmi	r3, [r4, #0]
 8003f3e:	b11d      	cbz	r5, 8003f48 <_printf_i+0x19c>
 8003f40:	2310      	movs	r3, #16
 8003f42:	e7ad      	b.n	8003ea0 <_printf_i+0xf4>
 8003f44:	4826      	ldr	r0, [pc, #152]	@ (8003fe0 <_printf_i+0x234>)
 8003f46:	e7e9      	b.n	8003f1c <_printf_i+0x170>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	e7f6      	b.n	8003f40 <_printf_i+0x194>
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7bd      	b.n	8003ed2 <_printf_i+0x126>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	6961      	ldr	r1, [r4, #20]
 8003f5c:	1d18      	adds	r0, r3, #4
 8003f5e:	6030      	str	r0, [r6, #0]
 8003f60:	062e      	lsls	r6, r5, #24
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	d501      	bpl.n	8003f6a <_printf_i+0x1be>
 8003f66:	6019      	str	r1, [r3, #0]
 8003f68:	e002      	b.n	8003f70 <_printf_i+0x1c4>
 8003f6a:	0668      	lsls	r0, r5, #25
 8003f6c:	d5fb      	bpl.n	8003f66 <_printf_i+0x1ba>
 8003f6e:	8019      	strh	r1, [r3, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	4616      	mov	r6, r2
 8003f76:	e7bc      	b.n	8003ef2 <_printf_i+0x146>
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	6032      	str	r2, [r6, #0]
 8003f7e:	681e      	ldr	r6, [r3, #0]
 8003f80:	6862      	ldr	r2, [r4, #4]
 8003f82:	2100      	movs	r1, #0
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	b108      	cbz	r0, 8003f90 <_printf_i+0x1e4>
 8003f8c:	1b80      	subs	r0, r0, r6
 8003f8e:	6060      	str	r0, [r4, #4]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f9a:	e7aa      	b.n	8003ef2 <_printf_i+0x146>
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d0ad      	beq.n	8003f06 <_printf_i+0x15a>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	079b      	lsls	r3, r3, #30
 8003fae:	d413      	bmi.n	8003fd8 <_printf_i+0x22c>
 8003fb0:	68e0      	ldr	r0, [r4, #12]
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bfb8      	it	lt
 8003fb8:	4618      	movlt	r0, r3
 8003fba:	e7a6      	b.n	8003f0a <_printf_i+0x15e>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	47d0      	blx	sl
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d09d      	beq.n	8003f06 <_printf_i+0x15a>
 8003fca:	3501      	adds	r5, #1
 8003fcc:	68e3      	ldr	r3, [r4, #12]
 8003fce:	9903      	ldr	r1, [sp, #12]
 8003fd0:	1a5b      	subs	r3, r3, r1
 8003fd2:	42ab      	cmp	r3, r5
 8003fd4:	dcf2      	bgt.n	8003fbc <_printf_i+0x210>
 8003fd6:	e7eb      	b.n	8003fb0 <_printf_i+0x204>
 8003fd8:	2500      	movs	r5, #0
 8003fda:	f104 0619 	add.w	r6, r4, #25
 8003fde:	e7f5      	b.n	8003fcc <_printf_i+0x220>
 8003fe0:	08004131 	.word	0x08004131
 8003fe4:	08004142 	.word	0x08004142

08003fe8 <memmove>:
 8003fe8:	4288      	cmp	r0, r1
 8003fea:	b510      	push	{r4, lr}
 8003fec:	eb01 0402 	add.w	r4, r1, r2
 8003ff0:	d902      	bls.n	8003ff8 <memmove+0x10>
 8003ff2:	4284      	cmp	r4, r0
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	d807      	bhi.n	8004008 <memmove+0x20>
 8003ff8:	1e43      	subs	r3, r0, #1
 8003ffa:	42a1      	cmp	r1, r4
 8003ffc:	d008      	beq.n	8004010 <memmove+0x28>
 8003ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004006:	e7f8      	b.n	8003ffa <memmove+0x12>
 8004008:	4402      	add	r2, r0
 800400a:	4601      	mov	r1, r0
 800400c:	428a      	cmp	r2, r1
 800400e:	d100      	bne.n	8004012 <memmove+0x2a>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800401a:	e7f7      	b.n	800400c <memmove+0x24>

0800401c <_sbrk_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4d06      	ldr	r5, [pc, #24]	@ (8004038 <_sbrk_r+0x1c>)
 8004020:	2300      	movs	r3, #0
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc fc9c 	bl	8000964 <_sbrk>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_sbrk_r+0x1a>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_sbrk_r+0x1a>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	200005d4 	.word	0x200005d4

0800403c <memcpy>:
 800403c:	440a      	add	r2, r1
 800403e:	4291      	cmp	r1, r2
 8004040:	f100 33ff 	add.w	r3, r0, #4294967295
 8004044:	d100      	bne.n	8004048 <memcpy+0xc>
 8004046:	4770      	bx	lr
 8004048:	b510      	push	{r4, lr}
 800404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004052:	4291      	cmp	r1, r2
 8004054:	d1f9      	bne.n	800404a <memcpy+0xe>
 8004056:	bd10      	pop	{r4, pc}

08004058 <_realloc_r>:
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	4607      	mov	r7, r0
 800405e:	4614      	mov	r4, r2
 8004060:	460d      	mov	r5, r1
 8004062:	b921      	cbnz	r1, 800406e <_realloc_r+0x16>
 8004064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4611      	mov	r1, r2
 800406a:	f7ff bc4d 	b.w	8003908 <_malloc_r>
 800406e:	b92a      	cbnz	r2, 800407c <_realloc_r+0x24>
 8004070:	f7ff fbde 	bl	8003830 <_free_r>
 8004074:	4625      	mov	r5, r4
 8004076:	4628      	mov	r0, r5
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	f000 f81a 	bl	80040b4 <_malloc_usable_size_r>
 8004080:	4284      	cmp	r4, r0
 8004082:	4606      	mov	r6, r0
 8004084:	d802      	bhi.n	800408c <_realloc_r+0x34>
 8004086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800408a:	d8f4      	bhi.n	8004076 <_realloc_r+0x1e>
 800408c:	4621      	mov	r1, r4
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff fc3a 	bl	8003908 <_malloc_r>
 8004094:	4680      	mov	r8, r0
 8004096:	b908      	cbnz	r0, 800409c <_realloc_r+0x44>
 8004098:	4645      	mov	r5, r8
 800409a:	e7ec      	b.n	8004076 <_realloc_r+0x1e>
 800409c:	42b4      	cmp	r4, r6
 800409e:	4622      	mov	r2, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	bf28      	it	cs
 80040a4:	4632      	movcs	r2, r6
 80040a6:	f7ff ffc9 	bl	800403c <memcpy>
 80040aa:	4629      	mov	r1, r5
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff fbbf 	bl	8003830 <_free_r>
 80040b2:	e7f1      	b.n	8004098 <_realloc_r+0x40>

080040b4 <_malloc_usable_size_r>:
 80040b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b8:	1f18      	subs	r0, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfbc      	itt	lt
 80040be:	580b      	ldrlt	r3, [r1, r0]
 80040c0:	18c0      	addlt	r0, r0, r3
 80040c2:	4770      	bx	lr

080040c4 <_init>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

080040d0 <_fini>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr
