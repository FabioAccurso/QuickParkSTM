
QuickParkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae0  08004ae0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae0  08004ae0  00005ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ae8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000588  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e7c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279e  00000000  00000000  00017f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  0001a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b67  00000000  00000000  0001b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f69f  00000000  00000000  0001c0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147ba  00000000  00000000  0003b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5b36  00000000  00000000  0004ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105a76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004610  00000000  00000000  00105abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0010a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a34 	.word	0x08004a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004a34 	.word	0x08004a34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <display_init>:

// Valori PWM per posizione servo
#define SERVO_UP   25  // es. 2.5% duty cycle
#define SERVO_DOWN 75  // es. 7.5% duty cycle

void display_init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    // Avvia i PWM per i due servo

    // Inizialmente abbassa entrambe le sbarre

    //inizializza display
    display_update(0);
 8000284:	2000      	movs	r0, #0
 8000286:	f000 f803 	bl	8000290 <display_update>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <display_update>:

void display_update(uint8_t free_spots) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
    // Per debug: stampa via UART
    printf("Posti liberi: %d\r\n", free_spots);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4619      	mov	r1, r3
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <display_update+0x1c>)
 80002a0:	f003 fb70 	bl	8003984 <iprintf>

    // In alternativa: aggiorna display fisico
    // lcd_clear();
    // lcd_printf("Free: %d", free_spots);
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	08004a4c 	.word	0x08004a4c

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fc54 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f816 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f948 	bl	8000550 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c0:	f000 f876 	bl	80003b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002c4:	f000 f8b4 	bl	8000430 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002c8:	f000 f920 	bl	800050c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80002cc:	f000 f8ee 	bl	80004ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sensors_init();
 80002d0:	f000 f9c2 	bl	8000658 <sensors_init>
  display_init();
 80002d4:	f7ff ffd4 	bl	8000280 <display_init>
  wifi_bot_init();
 80002d8:	f000 fbe0 	bl	8000a9c <wifi_bot_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sensors_update();
 80002dc:	f000 f9c3 	bl	8000666 <sensors_update>
	  //display_update();
	  wifi_bot_handle();
 80002e0:	f000 fbe4 	bl	8000aac <wifi_bot_handle>
	  sensors_update();
 80002e4:	bf00      	nop
 80002e6:	e7f9      	b.n	80002dc <main+0x2c>

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09e      	sub	sp, #120	@ 0x78
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002f2:	2228      	movs	r2, #40	@ 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 fbcf 	bl	8003a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	463b      	mov	r3, r7
 800030e:	223c      	movs	r2, #60	@ 0x3c
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fbc1 	bl	8003a9a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000318:	2303      	movs	r3, #3
 800031a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800031c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000320:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000338:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800033c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f8e4 	bl	8001510 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800034e:	f000 f97d 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000368:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800036c:	2101      	movs	r1, #1
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f8dc 	bl	800252c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800037a:	f000 f967 	bl	800064c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <SystemClock_Config+0xc4>)
 8000380:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800038a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800038e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fadc 	bl	8002950 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800039e:	f000 f955 	bl	800064c <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3778      	adds	r7, #120	@ 0x78
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	00020022 	.word	0x00020022

080003b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000428 <MX_I2C1_Init+0x78>)
 80003b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003bc:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <MX_I2C1_Init+0x7c>)
 80003be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c0:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c6:	4b17      	ldr	r3, [pc, #92]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003cc:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003d2:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003d8:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ea:	480e      	ldr	r0, [pc, #56]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003ec:	f000 fe96 	bl	800111c <HAL_I2C_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003f6:	f000 f929 	bl	800064c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4809      	ldr	r0, [pc, #36]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003fe:	f000 ff28 	bl	8001252 <HAL_I2CEx_ConfigAnalogFilter>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000408:	f000 f920 	bl	800064c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800040c:	2100      	movs	r1, #0
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_I2C1_Init+0x74>)
 8000410:	f000 ff6a 	bl	80012e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800041a:	f000 f917 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000084 	.word	0x20000084
 8000428:	40005400 	.word	0x40005400
 800042c:	00201d2b 	.word	0x00201d2b

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000436:	4a1c      	ldr	r2, [pc, #112]	@ (80004a8 <MX_SPI1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800043c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800044a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800044e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800045e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000462:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000466:	2208      	movs	r2, #8
 8000468:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800047e:	2207      	movs	r2, #7
 8000480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800048a:	2208      	movs	r2, #8
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000490:	f002 fc0c 	bl	8002cac <HAL_SPI_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800049a:	f000 f8d7 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000d8 	.word	0x200000d8
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b0:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	@ (8000508 <MX_USART2_UART_Init+0x5c>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004f0:	f002 fc87 	bl	8002e02 <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fa:	f000 f8a7 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000013c 	.word	0x2000013c
 8000508:	40004400 	.word	0x40004400

0800050c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <MX_USB_PCD_Init+0x40>)
 8000514:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 8000518:	2208      	movs	r2, #8
 800051a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 800051e:	2202      	movs	r2, #2
 8000520:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 8000524:	2202      	movs	r2, #2
 8000526:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 800052a:	2200      	movs	r2, #0
 800052c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 8000530:	2200      	movs	r2, #0
 8000532:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <MX_USB_PCD_Init+0x3c>)
 8000536:	f000 ff23 	bl	8001380 <HAL_PCD_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000540:	f000 f884 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200001c4 	.word	0x200001c4
 800054c:	40005c00 	.word	0x40005c00

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_GPIO_Init+0xf4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a36      	ldr	r2, [pc, #216]	@ (8000644 <MX_GPIO_Init+0xf4>)
 800056c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_GPIO_Init+0xf4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0xf4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a30      	ldr	r2, [pc, #192]	@ (8000644 <MX_GPIO_Init+0xf4>)
 8000584:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_GPIO_Init+0xf4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_GPIO_Init+0xf4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a2a      	ldr	r2, [pc, #168]	@ (8000644 <MX_GPIO_Init+0xf4>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a24      	ldr	r2, [pc, #144]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xf4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80005e4:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_GPIO_Init+0xf8>)
 80005e6:	f000 fd81 	bl	80010ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 80005ea:	2335      	movs	r3, #53	@ 0x35
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4812      	ldr	r0, [pc, #72]	@ (8000648 <MX_GPIO_Init+0xf8>)
 8000600:	f000 fbfa 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000604:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000608:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <MX_GPIO_Init+0xf8>)
 800061e:	f000 fbeb 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f000 fbde 	bl	8000df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	@ 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	48001000 	.word	0x48001000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <sensors_init>:
extern void barrier_close_exit(void);



// Eseguito una sola volta all’avvio
void sensors_init(void) {
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    // Nessuna inizializzazione necessaria
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <sensors_update>:

void sensors_update(void) {
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
    // Lasciata vuota o usata se servono aggiornamenti periodici
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <HAL_MspInit+0x44>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <HAL_MspInit+0x44>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006aa:	2007      	movs	r0, #7
 80006ac:	f000 fb70 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <HAL_I2C_MspInit+0x7c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d127      	bne.n	800072e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <HAL_I2C_MspInit+0x80>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <HAL_I2C_MspInit+0x80>)
 80006e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_I2C_MspInit+0x80>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006f6:	23c0      	movs	r3, #192	@ 0xc0
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fa:	2312      	movs	r3, #18
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000706:	2304      	movs	r3, #4
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <HAL_I2C_MspInit+0x84>)
 8000712:	f000 fb71 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_I2C_MspInit+0x80>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_I2C_MspInit+0x80>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_I2C_MspInit+0x80>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	@ 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <HAL_SPI_MspInit+0x7c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d128      	bne.n	80007b8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 800076c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_SPI_MspInit+0x80>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000796:	23e0      	movs	r3, #224	@ 0xe0
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f000 fb20 	bl	8000df8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013000 	.word	0x40013000
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <HAL_UART_MspInit+0x7c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d128      	bne.n	800083c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <HAL_UART_MspInit+0x80>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a16      	ldr	r2, [pc, #88]	@ (8000848 <HAL_UART_MspInit+0x80>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <HAL_UART_MspInit+0x80>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <HAL_UART_MspInit+0x80>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <HAL_UART_MspInit+0x80>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_UART_MspInit+0x80>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800081a:	230c      	movs	r3, #12
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000838:	f000 fade 	bl	8000df8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40004400 	.word	0x40004400
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <HAL_PCD_MspInit+0x80>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d129      	bne.n	80008c2 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000886:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000898:	230e      	movs	r3, #14
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a6:	f000 faa7 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 80008b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_PCD_MspInit+0x84>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	@ 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40005c00 	.word	0x40005c00
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f95f 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e00a      	b.n	800095a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000944:	f3af 8000 	nop.w
 8000948:	4601      	mov	r1, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	60ba      	str	r2, [r7, #8]
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3301      	adds	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	dbf0      	blt.n	8000944 <_read+0x12>
  }

  return len;
 8000962:	687b      	ldr	r3, [r7, #4]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e009      	b.n	8000992 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	60ba      	str	r2, [r7, #8]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbf1      	blt.n	800097e <_write+0x12>
  }
  return len;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_close>:

int _close(int file)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	605a      	str	r2, [r3, #4]
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_isatty>:

int _isatty(int file)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f003 f87c 	bl	8003b38 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000a000 	.word	0x2000a000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000498 	.word	0x20000498
 8000a74:	200005f0 	.word	0x200005f0

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <wifi_bot_init>:
#include <string.h>

static uint32_t last_sent = 0;           // Timestamp invio precedente
static const uint32_t send_interval = 3000; // intervallo invio in ms

void wifi_bot_init(void) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
    // Nessuna inizializzazione necessaria
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <wifi_bot_handle>:

void wifi_bot_handle(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8000ab2:	f000 f8af 	bl	8000c14 <HAL_GetTick>
 8000ab6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (now - last_sent < send_interval) {
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <wifi_bot_handle+0x54>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d317      	bcc.n	8000af8 <wifi_bot_handle+0x4c>
        return; // troppo presto per inviare di nuovo
    }

    last_sent = now;
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <wifi_bot_handle+0x54>)
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	6013      	str	r3, [r2, #0]

    int free_slots =2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "POSTI:%d\n", free_slots);
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <wifi_bot_handle+0x58>)
 8000ad8:	2120      	movs	r1, #32
 8000ada:	f002 ff65 	bl	80039a8 <sniprintf>

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb75 	bl	80001d0 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4639      	mov	r1, r7
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <wifi_bot_handle+0x5c>)
 8000af2:	f002 f9d4 	bl	8002e9e <HAL_UART_Transmit>
 8000af6:	e000      	b.n	8000afa <wifi_bot_handle+0x4e>
        return; // troppo presto per inviare di nuovo
 8000af8:	bf00      	nop
}
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000049c 	.word	0x2000049c
 8000b04:	08004a60 	.word	0x08004a60
 8000b08:	2000013c 	.word	0x2000013c

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ffb2 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 f803 	bl	8003b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fbb7 	bl	80002b0 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b44:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b50:	08004ae8 	.word	0x08004ae8
  ldr r2, =_sbss
 8000b54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b58:	200005f0 	.word	0x200005f0

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x28>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x28>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f90d 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fd7a 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f917 	bl	8000dde <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f8ed 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200004a0 	.word	0x200004a0

08000c14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200004a0 	.word	0x200004a0

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	@ 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	@ 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff47 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff5c 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffb0 	bl	8000d4c <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e154      	b.n	80010b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8146 	beq.w	80010ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80a0 	beq.w	80010ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a57      	ldr	r2, [pc, #348]	@ (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b55      	ldr	r3, [pc, #340]	@ (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a53      	ldr	r2, [pc, #332]	@ (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fae:	d019      	beq.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a49      	ldr	r2, [pc, #292]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e8>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a48      	ldr	r2, [pc, #288]	@ (80010dc <HAL_GPIO_Init+0x2e4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1e4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a47      	ldr	r2, [pc, #284]	@ (80010e0 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a46      	ldr	r2, [pc, #280]	@ (80010e4 <HAL_GPIO_Init+0x2ec>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1dc>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e008      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	@ (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001004:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001028:	4a2f      	ldr	r2, [pc, #188]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001052:	4a25      	ldr	r2, [pc, #148]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001058:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_GPIO_Init+0x2f0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f aea3 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e002      	b.n	8001110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e08d      	b.n	800124a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff faba 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	@ 0x24
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800116c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800117c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e006      	b.n	80011a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80011a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d108      	bne.n	80011be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	e007      	b.n	80011ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691a      	ldr	r2, [r3, #16]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69d9      	ldr	r1, [r3, #28]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b20      	cmp	r3, #32
 8001266:	d138      	bne.n	80012da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001272:	2302      	movs	r3, #2
 8001274:	e032      	b.n	80012dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2224      	movs	r2, #36	@ 0x24
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012da:	2302      	movs	r3, #2
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d139      	bne.n	8001372 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001308:	2302      	movs	r3, #2
 800130a:	e033      	b.n	8001374 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	@ 0x24
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800133a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001372:	2302      	movs	r3, #2
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0b9      	b.n	8001506 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fa50 	bl	800084c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f9e8 	bl	800378e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e03e      	b.n	8001442 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3311      	adds	r3, #17
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3310      	adds	r3, #16
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3313      	adds	r3, #19
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3320      	adds	r3, #32
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3324      	adds	r3, #36	@ 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3bb      	bcc.n	80013c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e044      	b.n	80014dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	791b      	ldrb	r3, [r3, #4]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3b5      	bcc.n	8001452 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014f2:	f002 f967 	bl	80037c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001516:	af00      	add	r7, sp, #0
 8001518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001520:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	f000 bff4 	b.w	800251e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 816d 	beq.w	8001826 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154c:	4bb4      	ldr	r3, [pc, #720]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
 8001556:	d00c      	beq.n	8001572 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001558:	4bb1      	ldr	r3, [pc, #708]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d157      	bne.n	8001614 <HAL_RCC_OscConfig+0x104>
 8001564:	4bae      	ldr	r3, [pc, #696]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001570:	d150      	bne.n	8001614 <HAL_RCC_OscConfig+0x104>
 8001572:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001576:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001586:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b3f      	cmp	r3, #63	@ 0x3f
 8001592:	d802      	bhi.n	800159a <HAL_RCC_OscConfig+0x8a>
 8001594:	4ba2      	ldr	r3, [pc, #648]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0xb6>
 800159a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800159e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80015ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015b2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80015b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80015c2:	4b97      	ldr	r3, [pc, #604]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015ca:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80015ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80015da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8114 	beq.w	8001824 <HAL_RCC_OscConfig+0x314>
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 810b 	bne.w	8001824 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	f000 bf85 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x124>
 8001626:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7d      	ldr	r2, [pc, #500]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e036      	b.n	80016a2 <HAL_RCC_OscConfig+0x192>
 8001634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x14e>
 8001644:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a75      	ldr	r2, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b73      	ldr	r3, [pc, #460]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a72      	ldr	r2, [pc, #456]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e021      	b.n	80016a2 <HAL_RCC_OscConfig+0x192>
 800165e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x17a>
 8001670:	4b6b      	ldr	r3, [pc, #428]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6a      	ldr	r2, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b68      	ldr	r3, [pc, #416]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a67      	ldr	r2, [pc, #412]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x192>
 800168a:	4b65      	ldr	r3, [pc, #404]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a64      	ldr	r2, [pc, #400]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b62      	ldr	r3, [pc, #392]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a61      	ldr	r2, [pc, #388]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	f023 020f 	bic.w	r2, r3, #15
 80016aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	495a      	ldr	r1, [pc, #360]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d054      	beq.n	8001776 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff faa2 	bl	8000c14 <HAL_GetTick>
 80016d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d6:	f7ff fa9d 	bl	8000c14 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d902      	bls.n	80016ec <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f000 bf19 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 80016ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001700:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b3f      	cmp	r3, #63	@ 0x3f
 800170c:	d802      	bhi.n	8001714 <HAL_RCC_OscConfig+0x204>
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e015      	b.n	8001740 <HAL_RCC_OscConfig+0x230>
 8001714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001718:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001730:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800173c:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001744:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001748:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800174c:	fa92 f2a2 	rbit	r2, r2
 8001750:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001754:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0b0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1c6>
 8001774:	e057      	b.n	8001826 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fa4d 	bl	8000c14 <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fa48 	bl	8000c14 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	@ 0x64
 800178e:	d902      	bls.n	8001796 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	f000 bec4 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 8001796:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800179a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80017aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b6:	d802      	bhi.n	80017be <HAL_RCC_OscConfig+0x2ae>
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x2da>
 80017be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80017d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_RCC_OscConfig+0x310>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80017f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80017f6:	fa92 f2a2 	rbit	r2, r2
 80017fa:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80017fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0220 	orr.w	r2, r2, #32
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1b0      	bne.n	8001780 <HAL_RCC_OscConfig+0x270>
 800181e:	e002      	b.n	8001826 <HAL_RCC_OscConfig+0x316>
 8001820:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 816c 	beq.w	8001b14 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800183c:	4bcc      	ldr	r3, [pc, #816]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001848:	4bc9      	ldr	r3, [pc, #804]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d16d      	bne.n	8001930 <HAL_RCC_OscConfig+0x420>
 8001854:	4bc6      	ldr	r3, [pc, #792]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d167      	bne.n	8001930 <HAL_RCC_OscConfig+0x420>
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001872:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b3f      	cmp	r3, #63	@ 0x3f
 800187e:	d802      	bhi.n	8001886 <HAL_RCC_OscConfig+0x376>
 8001880:	4bbb      	ldr	r3, [pc, #748]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e013      	b.n	80018ae <HAL_RCC_OscConfig+0x39e>
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800189e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80018aa:	4bb1      	ldr	r3, [pc, #708]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	2202      	movs	r2, #2
 80018b0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80018b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80018b8:	fa92 f2a2 	rbit	r2, r2
 80018bc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80018c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00a      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3e6>
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d002      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f000 be14 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	21f8      	movs	r1, #248	@ 0xf8
 800190c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001914:	fa91 f1a1 	rbit	r1, r1
 8001918:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800191c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001920:	fab1 f181 	clz	r1, r1
 8001924:	b2c9      	uxtb	r1, r1
 8001926:	408b      	lsls	r3, r1
 8001928:	4991      	ldr	r1, [pc, #580]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e0f1      	b.n	8001b14 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8083 	beq.w	8001a48 <HAL_RCC_OscConfig+0x538>
 8001942:	2301      	movs	r3, #1
 8001944:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001954:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001962:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	461a      	mov	r2, r3
 800196a:	2301      	movs	r3, #1
 800196c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff f951 	bl	8000c14 <HAL_GetTick>
 8001972:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff f94c 	bl	8000c14 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d902      	bls.n	800198e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	f000 bdc8 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80019a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ac:	d802      	bhi.n	80019b4 <HAL_RCC_OscConfig+0x4a4>
 80019ae:	4b70      	ldr	r3, [pc, #448]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e013      	b.n	80019dc <HAL_RCC_OscConfig+0x4cc>
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80019cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80019d8:	4b65      	ldr	r3, [pc, #404]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	2202      	movs	r2, #2
 80019de:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80019e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80019e6:	fa92 f2a2 	rbit	r2, r2
 80019ea:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80019ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f042 0220 	orr.w	r2, r2, #32
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0b4      	beq.n	8001978 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	21f8      	movs	r1, #248	@ 0xf8
 8001a24:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001a2c:	fa91 f1a1 	rbit	r1, r1
 8001a30:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a34:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a38:	fab1 f181 	clz	r1, r1
 8001a3c:	b2c9      	uxtb	r1, r1
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	494b      	ldr	r1, [pc, #300]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e065      	b.n	8001b14 <HAL_RCC_OscConfig+0x604>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f8ce 	bl	8000c14 <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f8c9 	bl	8000c14 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d902      	bls.n	8001a94 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f000 bd45 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 8001a94:	2302      	movs	r3, #2
 8001a96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ab2:	d802      	bhi.n	8001aba <HAL_RCC_OscConfig+0x5aa>
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e013      	b.n	8001ae2 <HAL_RCC_OscConfig+0x5d2>
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_OscConfig+0x660>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ae8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001af4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0220 	orr.w	r2, r2, #32
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1b4      	bne.n	8001a7e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8115 	beq.w	8001d54 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d07e      	beq.n	8001c38 <HAL_RCC_OscConfig+0x728>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_RCC_OscConfig+0x664>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff f856 	bl	8000c14 <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	e00f      	b.n	8001b8e <HAL_RCC_OscConfig+0x67e>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f84c 	bl	8000c14 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d902      	bls.n	8001b8e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f000 bcc8 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ba8:	2202      	movs	r2, #2
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be8:	4bb0      	ldr	r3, [pc, #704]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	6019      	str	r1, [r3, #0]
 8001bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f1a3 	rbit	r1, r3
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c0e:	6019      	str	r1, [r3, #0]
  return result;
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0a0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x668>
 8001c36:	e08d      	b.n	8001d54 <HAL_RCC_OscConfig+0x844>
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c5a:	601a      	str	r2, [r3, #0]
  return result;
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <HAL_RCC_OscConfig+0x9a0>)
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	2300      	movs	r3, #0
 8001c78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ffcb 	bl	8000c14 <HAL_GetTick>
 8001c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe ffc6 	bl	8000c14 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d902      	bls.n	8001c9a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f000 bc42 	b.w	800251e <HAL_RCC_OscConfig+0x100e>
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	4b69      	ldr	r3, [pc, #420]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d12:	2102      	movs	r1, #2
 8001d14:	6019      	str	r1, [r3, #0]
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f1a3 	rbit	r1, r3
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d2c:	6019      	str	r1, [r3, #0]
  return result;
 8001d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d197      	bne.n	8001c84 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 819e 	beq.w	80020a6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d70:	4b4e      	ldr	r3, [pc, #312]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d116      	bne.n	8001daa <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	61d3      	str	r3, [r2, #28]
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001da2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b42      	ldr	r3, [pc, #264]	@ (8001eb4 <HAL_RCC_OscConfig+0x9a4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d11a      	bne.n	8001dec <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <HAL_RCC_OscConfig+0x9a4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb4 <HAL_RCC_OscConfig+0x9a4>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ff27 	bl	8000c14 <HAL_GetTick>
 8001dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	e009      	b.n	8001de0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7fe ff22 	bl	8000c14 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	@ 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e39e      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_OscConfig+0x9a4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x8fa>
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a2a      	ldr	r2, [pc, #168]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x966>
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x924>
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e020      	b.n	8001e76 <HAL_RCC_OscConfig+0x966>
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x94e>
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x966>
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <HAL_RCC_OscConfig+0x99c>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8087 	beq.w	8001f96 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7fe fec4 	bl	8000c14 <HAL_GetTick>
 8001e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	e012      	b.n	8001eb8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe febf 	bl	8000c14 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e339      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	10908120 	.word	0x10908120
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0xa10>
 8001f1a:	4b98      	ldr	r3, [pc, #608]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	e013      	b.n	8001f48 <HAL_RCC_OscConfig+0xa38>
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4b8d      	ldr	r3, [pc, #564]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f50:	2102      	movs	r1, #2
 8001f52:	6011      	str	r1, [r2, #0]
 8001f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	fa92 f1a2 	rbit	r1, r2
 8001f62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f6a:	6011      	str	r1, [r2, #0]
  return result;
 8001f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f43f af7f 	beq.w	8001e92 <HAL_RCC_OscConfig+0x982>
 8001f94:	e07d      	b.n	8002092 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fe3d 	bl	8000c14 <HAL_GetTick>
 8001f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fe38 	bl	8000c14 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e2b2      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ffe:	601a      	str	r2, [r3, #0]
  return result;
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0xb10>
 800201a:	4b58      	ldr	r3, [pc, #352]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0xb38>
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002028:	2202      	movs	r2, #2
 800202a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	fa93 f2a3 	rbit	r2, r3
 800203a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	4b4d      	ldr	r3, [pc, #308]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800204c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002050:	2102      	movs	r1, #2
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002058:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	fa92 f1a2 	rbit	r1, r2
 8002062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002066:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800206a:	6011      	str	r1, [r2, #0]
  return result;
 800206c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002070:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d186      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002092:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a37      	ldr	r2, [pc, #220]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8232 	beq.w	800251c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	f000 8201 	beq.w	80024c8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	f040 8157 	bne.w	8002386 <HAL_RCC_OscConfig+0xe76>
 80020d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ea:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80020fc:	601a      	str	r2, [r3, #0]
  return result;
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002106:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002112:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	2300      	movs	r3, #0
 800211c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fd79 	bl	8000c14 <HAL_GetTick>
 8002122:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	e009      	b.n	800213c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fd74 	bl	8000c14 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1f0      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002144:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002160:	601a      	str	r2, [r3, #0]
  return result;
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800216a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b3f      	cmp	r3, #63	@ 0x3f
 8002174:	d804      	bhi.n	8002180 <HAL_RCC_OscConfig+0xc70>
 8002176:	4b01      	ldr	r3, [pc, #4]	@ (800217c <HAL_RCC_OscConfig+0xc6c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e029      	b.n	80021d0 <HAL_RCC_OscConfig+0xcc0>
 800217c:	40021000 	.word	0x40021000
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800218c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4bc3      	ldr	r3, [pc, #780]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fa92 f1a2 	rbit	r1, r2
 80021ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021f4:	6011      	str	r1, [r2, #0]
  return result;
 80021f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d185      	bne.n	8002128 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221c:	4baf      	ldr	r3, [pc, #700]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	430b      	orrs	r3, r1
 800223e:	49a7      	ldr	r1, [pc, #668]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800224c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002272:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800227e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe fcc3 	bl	8000c14 <HAL_GetTick>
 800228e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002292:	e009      	b.n	80022a8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fcbe 	bl	8000c14 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e13a      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b3f      	cmp	r3, #63	@ 0x3f
 80022e0:	d802      	bhi.n	80022e8 <HAL_RCC_OscConfig+0xdd8>
 80022e2:	4b7e      	ldr	r3, [pc, #504]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e027      	b.n	8002338 <HAL_RCC_OscConfig+0xe28>
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002308:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002316:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b69      	ldr	r3, [pc, #420]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800233c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002340:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002344:	6011      	str	r1, [r2, #0]
 8002346:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800234a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	fa92 f1a2 	rbit	r1, r2
 8002354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002358:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800235c:	6011      	str	r1, [r2, #0]
  return result;
 800235e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002362:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f042 0220 	orr.w	r2, r2, #32
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f002 021f 	and.w	r2, r2, #31
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d087      	beq.n	8002294 <HAL_RCC_OscConfig+0xd84>
 8002384:	e0ca      	b.n	800251c <HAL_RCC_OscConfig+0x100c>
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800238e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	2300      	movs	r3, #0
 80023ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fc22 	bl	8000c14 <HAL_GetTick>
 80023d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	e009      	b.n	80023ea <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fc1d 	bl	8000c14 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e099      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80023f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800240e:	601a      	str	r2, [r3, #0]
  return result;
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b3f      	cmp	r3, #63	@ 0x3f
 8002422:	d802      	bhi.n	800242a <HAL_RCC_OscConfig+0xf1a>
 8002424:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e027      	b.n	800247a <HAL_RCC_OscConfig+0xf6a>
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_RCC_OscConfig+0xfcc>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800247e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002482:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002486:	6011      	str	r1, [r2, #0]
 8002488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800248c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	fa92 f1a2 	rbit	r1, r2
 8002496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800249a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800249e:	6011      	str	r1, [r2, #0]
  return result;
 80024a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	fab2 f282 	clz	r2, r2
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	f042 0220 	orr.w	r2, r2, #32
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	f002 021f 	and.w	r2, r2, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d187      	bne.n	80023d6 <HAL_RCC_OscConfig+0xec6>
 80024c6:	e029      	b.n	800251c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d103      	bne.n	80024e0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e020      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
 80024dc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_OscConfig+0x1018>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002500:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002504:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b09e      	sub	sp, #120	@ 0x78
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e154      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b89      	ldr	r3, [pc, #548]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b86      	ldr	r3, [pc, #536]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4984      	ldr	r1, [pc, #528]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b82      	ldr	r3, [pc, #520]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e13c      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b7b      	ldr	r3, [pc, #492]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4978      	ldr	r1, [pc, #480]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80cd 	beq.w	800273a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d137      	bne.n	8002618 <HAL_RCC_ClockConfig+0xec>
 80025a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b3f      	cmp	r3, #63	@ 0x3f
 80025c0:	d802      	bhi.n	80025c8 <HAL_RCC_ClockConfig+0x9c>
 80025c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	e00f      	b.n	80025e8 <HAL_RCC_ClockConfig+0xbc>
 80025c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025da:	663b      	str	r3, [r7, #96]	@ 0x60
 80025dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025e4:	4b62      	ldr	r3, [pc, #392]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d171      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0ea      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d137      	bne.n	8002690 <HAL_RCC_ClockConfig+0x164>
 8002620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002624:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800262e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b3f      	cmp	r3, #63	@ 0x3f
 8002638:	d802      	bhi.n	8002640 <HAL_RCC_ClockConfig+0x114>
 800263a:	4b4d      	ldr	r3, [pc, #308]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e00f      	b.n	8002660 <HAL_RCC_ClockConfig+0x134>
 8002640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002644:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
 800264e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002652:	643b      	str	r3, [r7, #64]	@ 0x40
 8002654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265c:	4b44      	ldr	r3, [pc, #272]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002664:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800266e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f002 021f 	and.w	r2, r2, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f202 	lsl.w	r2, r1, r2
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d135      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0ae      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
 8002690:	2302      	movs	r3, #2
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026a6:	d802      	bhi.n	80026ae <HAL_RCC_ClockConfig+0x182>
 80026a8:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	e00d      	b.n	80026ca <HAL_RCC_ClockConfig+0x19e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ba:	2302      	movs	r3, #2
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	2202      	movs	r2, #2
 80026cc:	61ba      	str	r2, [r7, #24]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	fa92 f2a2 	rbit	r2, r2
 80026d4:	617a      	str	r2, [r7, #20]
  return result;
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e07a      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 0203 	bic.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	491a      	ldr	r1, [pc, #104]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270a:	f7fe fa83 	bl	8000c14 <HAL_GetTick>
 800270e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002710:	e00a      	b.n	8002728 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002712:	f7fe fa7f 	bl	8000c14 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e062      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_RCC_ClockConfig+0x244>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 020c 	and.w	r2, r3, #12
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	429a      	cmp	r2, r3
 8002738:	d1eb      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273a:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d215      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 0207 	bic.w	r2, r3, #7
 8002750:	4906      	ldr	r1, [pc, #24]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_RCC_ClockConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d006      	beq.n	8002774 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e041      	b.n	80027ee <HAL_RCC_ClockConfig+0x2c2>
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <HAL_RCC_ClockConfig+0x2cc>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	491a      	ldr	r1, [pc, #104]	@ (80027f8 <HAL_RCC_ClockConfig+0x2cc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_RCC_ClockConfig+0x2cc>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4912      	ldr	r1, [pc, #72]	@ (80027f8 <HAL_RCC_ClockConfig+0x2cc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027b2:	f000 f829 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_RCC_ClockConfig+0x2cc>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027c0:	22f0      	movs	r2, #240	@ 0xf0
 80027c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	60fa      	str	r2, [r7, #12]
  return result;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	40d3      	lsrs	r3, r2
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x2d0>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	fa21 f303 	lsr.w	r3, r1, r3
 80027de:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_RCC_ClockConfig+0x2d4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_RCC_ClockConfig+0x2d8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f9d0 	bl	8000b8c <HAL_InitTick>
  
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3778      	adds	r7, #120	@ 0x78
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08004a6c 	.word	0x08004a6c
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e026      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e026      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800284c:	4b13      	ldr	r3, [pc, #76]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002864:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f2f3 	udiv	r2, r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e004      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	e002      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002888:	613b      	str	r3, [r7, #16]
      break;
 800288a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288c:	693b      	ldr	r3, [r7, #16]
}
 800288e:	4618      	mov	r0, r3
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	08004a84 	.word	0x08004a84
 80028a8:	08004a94 	.word	0x08004a94
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028ce:	f7ff ffef 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028d2:	4601      	mov	r1, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	603a      	str	r2, [r7, #0]
  return result;
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	40d3      	lsrs	r3, r2
 80028f4:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08004a7c 	.word	0x08004a7c

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002912:	f7ff ffcd 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002920:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002924:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	fa92 f2a2 	rbit	r2, r2
 800292c:	603a      	str	r2, [r7, #0]
  return result;
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	40d3      	lsrs	r3, r2
 8002938:	4a04      	ldr	r2, [pc, #16]	@ (800294c <HAL_RCC_GetPCLK2Freq+0x40>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	08004a7c 	.word	0x08004a7c

08002950 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b092      	sub	sp, #72	@ 0x48
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d2 	beq.w	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002974:	4b4d      	ldr	r3, [pc, #308]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10e      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b4a      	ldr	r3, [pc, #296]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4a49      	ldr	r2, [pc, #292]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800298a:	61d3      	str	r3, [r2, #28]
 800298c:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b44      	ldr	r3, [pc, #272]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a40      	ldr	r2, [pc, #256]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe f92d 	bl	8000c14 <HAL_GetTick>
 80029ba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe f929 	bl	8000c14 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	@ 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e167      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b37      	ldr	r3, [pc, #220]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029dc:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8082 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d07a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b25      	ldr	r3, [pc, #148]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d049      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe f8d9 	bl	8000c14 <HAL_GetTick>
 8002a62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe f8d5 	bl	8000c14 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e111      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	2302      	movs	r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	61fb      	str	r3, [r7, #28]
  return result;
 8002a94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002aa6:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	e00d      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	10908100 	.word	0x10908100
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	4b78      	ldr	r3, [pc, #480]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2202      	movs	r2, #2
 8002aca:	613a      	str	r2, [r7, #16]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0b9      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	496a      	ldr	r1, [pc, #424]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a65      	ldr	r2, [pc, #404]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b24:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	f023 0203 	bic.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	495d      	ldr	r1, [pc, #372]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b42:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4956      	ldr	r1, [pc, #344]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b60:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	494e      	ldr	r1, [pc, #312]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f023 0210 	bic.w	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4947      	ldr	r1, [pc, #284]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b9c:	4b42      	ldr	r3, [pc, #264]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	493f      	ldr	r1, [pc, #252]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f023 0220 	bic.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4938      	ldr	r1, [pc, #224]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bd8:	4b33      	ldr	r3, [pc, #204]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4930      	ldr	r1, [pc, #192]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	4929      	ldr	r1, [pc, #164]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c14:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	4921      	ldr	r1, [pc, #132]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	491a      	ldr	r1, [pc, #104]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c50:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	4912      	ldr	r1, [pc, #72]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	490b      	ldr	r1, [pc, #44]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3748      	adds	r7, #72	@ 0x48
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e09d      	b.n	8002dfa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cce:	d009      	beq.n	8002ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
 8002cd6:	e005      	b.n	8002ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fd20 	bl	8000744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d24:	d902      	bls.n	8002d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e002      	b.n	8002d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d3a:	d007      	beq.n	8002d4c <HAL_SPI_Init+0xa0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8e:	ea42 0103 	orr.w	r1, r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	f003 0204 	and.w	r2, r3, #4
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dc8:	ea42 0103 	orr.w	r1, r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e040      	b.n	8002e96 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fd fccf 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2224      	movs	r2, #36	@ 0x24
 8002e2e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa85 	bl	8003358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8ae 	bl	8002fb0 <UART_SetConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01b      	b.n	8002e96 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fb04 	bl	800349c <UART_CheckIdleState>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	@ 0x28
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d177      	bne.n	8002fa6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_UART_Transmit+0x24>
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e070      	b.n	8002fa8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	@ 0x21
 8002ed2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed4:	f7fd fe9e 	bl	8000c14 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef2:	d108      	bne.n	8002f06 <HAL_UART_Transmit+0x68>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e003      	b.n	8002f0e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f0e:	e02f      	b.n	8002f70 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb66 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e03b      	b.n	8002fa8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f42:	b292      	uxth	r2, r2
 8002f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1c9      	bne.n	8002f10 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	@ 0x40
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fb30 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e005      	b.n	8002fa8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002fde:	f023 030c 	bic.w	r3, r3, #12
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6979      	ldr	r1, [r7, #20]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4aa7      	ldr	r2, [pc, #668]	@ (80032c8 <UART_SetConfig+0x318>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d120      	bne.n	8003072 <UART_SetConfig+0xc2>
 8003030:	4ba6      	ldr	r3, [pc, #664]	@ (80032cc <UART_SetConfig+0x31c>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d817      	bhi.n	800306c <UART_SetConfig+0xbc>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0x94>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003055 	.word	0x08003055
 8003048:	08003061 	.word	0x08003061
 800304c:	08003067 	.word	0x08003067
 8003050:	0800305b 	.word	0x0800305b
 8003054:	2301      	movs	r3, #1
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e0b5      	b.n	80031c6 <UART_SetConfig+0x216>
 800305a:	2302      	movs	r3, #2
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e0b2      	b.n	80031c6 <UART_SetConfig+0x216>
 8003060:	2304      	movs	r3, #4
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0af      	b.n	80031c6 <UART_SetConfig+0x216>
 8003066:	2308      	movs	r3, #8
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e0ac      	b.n	80031c6 <UART_SetConfig+0x216>
 800306c:	2310      	movs	r3, #16
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e0a9      	b.n	80031c6 <UART_SetConfig+0x216>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a96      	ldr	r2, [pc, #600]	@ (80032d0 <UART_SetConfig+0x320>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d124      	bne.n	80030c6 <UART_SetConfig+0x116>
 800307c:	4b93      	ldr	r3, [pc, #588]	@ (80032cc <UART_SetConfig+0x31c>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003088:	d011      	beq.n	80030ae <UART_SetConfig+0xfe>
 800308a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800308e:	d817      	bhi.n	80030c0 <UART_SetConfig+0x110>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003094:	d011      	beq.n	80030ba <UART_SetConfig+0x10a>
 8003096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800309a:	d811      	bhi.n	80030c0 <UART_SetConfig+0x110>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <UART_SetConfig+0xf8>
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d006      	beq.n	80030b4 <UART_SetConfig+0x104>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x110>
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e08b      	b.n	80031c6 <UART_SetConfig+0x216>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e088      	b.n	80031c6 <UART_SetConfig+0x216>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e085      	b.n	80031c6 <UART_SetConfig+0x216>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e082      	b.n	80031c6 <UART_SetConfig+0x216>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e07f      	b.n	80031c6 <UART_SetConfig+0x216>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a82      	ldr	r2, [pc, #520]	@ (80032d4 <UART_SetConfig+0x324>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d124      	bne.n	800311a <UART_SetConfig+0x16a>
 80030d0:	4b7e      	ldr	r3, [pc, #504]	@ (80032cc <UART_SetConfig+0x31c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80030d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030dc:	d011      	beq.n	8003102 <UART_SetConfig+0x152>
 80030de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030e2:	d817      	bhi.n	8003114 <UART_SetConfig+0x164>
 80030e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030e8:	d011      	beq.n	800310e <UART_SetConfig+0x15e>
 80030ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030ee:	d811      	bhi.n	8003114 <UART_SetConfig+0x164>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x14c>
 80030f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030f8:	d006      	beq.n	8003108 <UART_SetConfig+0x158>
 80030fa:	e00b      	b.n	8003114 <UART_SetConfig+0x164>
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e061      	b.n	80031c6 <UART_SetConfig+0x216>
 8003102:	2302      	movs	r3, #2
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e05e      	b.n	80031c6 <UART_SetConfig+0x216>
 8003108:	2304      	movs	r3, #4
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e05b      	b.n	80031c6 <UART_SetConfig+0x216>
 800310e:	2308      	movs	r3, #8
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e058      	b.n	80031c6 <UART_SetConfig+0x216>
 8003114:	2310      	movs	r3, #16
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e055      	b.n	80031c6 <UART_SetConfig+0x216>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6e      	ldr	r2, [pc, #440]	@ (80032d8 <UART_SetConfig+0x328>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <UART_SetConfig+0x1be>
 8003124:	4b69      	ldr	r3, [pc, #420]	@ (80032cc <UART_SetConfig+0x31c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800312c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003130:	d011      	beq.n	8003156 <UART_SetConfig+0x1a6>
 8003132:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003136:	d817      	bhi.n	8003168 <UART_SetConfig+0x1b8>
 8003138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800313c:	d011      	beq.n	8003162 <UART_SetConfig+0x1b2>
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003142:	d811      	bhi.n	8003168 <UART_SetConfig+0x1b8>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <UART_SetConfig+0x1a0>
 8003148:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800314c:	d006      	beq.n	800315c <UART_SetConfig+0x1ac>
 800314e:	e00b      	b.n	8003168 <UART_SetConfig+0x1b8>
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e037      	b.n	80031c6 <UART_SetConfig+0x216>
 8003156:	2302      	movs	r3, #2
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e034      	b.n	80031c6 <UART_SetConfig+0x216>
 800315c:	2304      	movs	r3, #4
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e031      	b.n	80031c6 <UART_SetConfig+0x216>
 8003162:	2308      	movs	r3, #8
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e02e      	b.n	80031c6 <UART_SetConfig+0x216>
 8003168:	2310      	movs	r3, #16
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e02b      	b.n	80031c6 <UART_SetConfig+0x216>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <UART_SetConfig+0x32c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d124      	bne.n	80031c2 <UART_SetConfig+0x212>
 8003178:	4b54      	ldr	r3, [pc, #336]	@ (80032cc <UART_SetConfig+0x31c>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003180:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003184:	d011      	beq.n	80031aa <UART_SetConfig+0x1fa>
 8003186:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800318a:	d817      	bhi.n	80031bc <UART_SetConfig+0x20c>
 800318c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003190:	d011      	beq.n	80031b6 <UART_SetConfig+0x206>
 8003192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003196:	d811      	bhi.n	80031bc <UART_SetConfig+0x20c>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <UART_SetConfig+0x1f4>
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a0:	d006      	beq.n	80031b0 <UART_SetConfig+0x200>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x20c>
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e00d      	b.n	80031c6 <UART_SetConfig+0x216>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e00a      	b.n	80031c6 <UART_SetConfig+0x216>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e007      	b.n	80031c6 <UART_SetConfig+0x216>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e004      	b.n	80031c6 <UART_SetConfig+0x216>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e001      	b.n	80031c6 <UART_SetConfig+0x216>
 80031c2:	2310      	movs	r3, #16
 80031c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ce:	d15b      	bne.n	8003288 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d827      	bhi.n	8003226 <UART_SetConfig+0x276>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <UART_SetConfig+0x22c>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003217 	.word	0x08003217
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003227 	.word	0x08003227
 80031f8:	08003227 	.word	0x08003227
 80031fc:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff fb62 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003204:	61b8      	str	r0, [r7, #24]
        break;
 8003206:	e013      	b.n	8003230 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff fb80 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 800320c:	61b8      	str	r0, [r7, #24]
        break;
 800320e:	e00f      	b.n	8003230 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b33      	ldr	r3, [pc, #204]	@ (80032e0 <UART_SetConfig+0x330>)
 8003212:	61bb      	str	r3, [r7, #24]
        break;
 8003214:	e00c      	b.n	8003230 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7ff faf7 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800321a:	61b8      	str	r0, [r7, #24]
        break;
 800321c:	e008      	b.n	8003230 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e004      	b.n	8003230 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	77bb      	strb	r3, [r7, #30]
        break;
 800322e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8082 	beq.w	800333c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	005a      	lsls	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d916      	bls.n	8003282 <UART_SetConfig+0x2d2>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325a:	d212      	bcs.n	8003282 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f023 030f 	bic.w	r3, r3, #15
 8003264:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	b29a      	uxth	r2, r3
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	4313      	orrs	r3, r2
 8003276:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	89fa      	ldrh	r2, [r7, #14]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	e05c      	b.n	800333c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77bb      	strb	r3, [r7, #30]
 8003286:	e059      	b.n	800333c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	2b08      	cmp	r3, #8
 800328c:	d835      	bhi.n	80032fa <UART_SetConfig+0x34a>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <UART_SetConfig+0x2e4>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032fb 	.word	0x080032fb
 80032a4:	080032eb 	.word	0x080032eb
 80032a8:	080032fb 	.word	0x080032fb
 80032ac:	080032fb 	.word	0x080032fb
 80032b0:	080032fb 	.word	0x080032fb
 80032b4:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff fb06 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 80032bc:	61b8      	str	r0, [r7, #24]
        break;
 80032be:	e021      	b.n	8003304 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff fb24 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 80032c4:	61b8      	str	r0, [r7, #24]
        break;
 80032c6:	e01d      	b.n	8003304 <UART_SetConfig+0x354>
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40004400 	.word	0x40004400
 80032d4:	40004800 	.word	0x40004800
 80032d8:	40004c00 	.word	0x40004c00
 80032dc:	40005000 	.word	0x40005000
 80032e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <UART_SetConfig+0x3a4>)
 80032e6:	61bb      	str	r3, [r7, #24]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7ff fa8d 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80032ee:	61b8      	str	r0, [r7, #24]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77bb      	strb	r3, [r7, #30]
        break;
 8003302:	bf00      	nop
    }

    if (pclk != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d909      	bls.n	8003338 <UART_SetConfig+0x388>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332a:	d205      	bcs.n	8003338 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e001      	b.n	800333c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003348:	7fbb      	ldrb	r3, [r7, #30]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	007a1200 	.word	0x007a1200

08003358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01a      	beq.n	800346e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003456:	d10a      	bne.n	800346e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b098      	sub	sp, #96	@ 0x60
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ac:	f7fd fbb2 	bl	8000c14 <HAL_GetTick>
 80034b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d12e      	bne.n	800351e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f88c 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d021      	beq.n	800351e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e062      	b.n	80035e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d149      	bne.n	80035c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	2200      	movs	r2, #0
 8003536:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f856 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03c      	beq.n	80035c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	e853 3f00 	ldrex	r3, [r3]
 8003552:	623b      	str	r3, [r7, #32]
   return(result);
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
 8003566:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e6      	bne.n	8003546 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3308      	adds	r3, #8
 800357e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	60fb      	str	r3, [r7, #12]
   return(result);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3308      	adds	r3, #8
 8003596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003598:	61fa      	str	r2, [r7, #28]
 800359a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	e841 2300 	strex	r3, r2, [r1]
 80035a4:	617b      	str	r3, [r7, #20]
   return(result);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e5      	bne.n	8003578 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e011      	b.n	80035e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3758      	adds	r7, #88	@ 0x58
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fc:	e04f      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d04b      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fd fb05 	bl	8000c14 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <UART_WaitOnFlagUntilTimeout+0x30>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e04e      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d037      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b80      	cmp	r3, #128	@ 0x80
 8003632:	d034      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d031      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d110      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2208      	movs	r2, #8
 800364e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f838 	bl	80036c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2208      	movs	r2, #8
 800365a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e029      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003678:	d111      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f81e 	bl	80036c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d0a0      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b095      	sub	sp, #84	@ 0x54
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e6      	bne.n	80036ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	2b01      	cmp	r3, #1
 800373a:	d118      	bne.n	800376e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	60bb      	str	r3, [r7, #8]
   return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f023 0310 	bic.w	r3, r3, #16
 8003750:	647b      	str	r3, [r7, #68]	@ 0x44
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e6      	bne.n	800373c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003782:	bf00      	nop
 8003784:	3754      	adds	r7, #84	@ 0x54
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003796:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800379a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <std>:
 8003800:	2300      	movs	r3, #0
 8003802:	b510      	push	{r4, lr}
 8003804:	4604      	mov	r4, r0
 8003806:	e9c0 3300 	strd	r3, r3, [r0]
 800380a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800380e:	6083      	str	r3, [r0, #8]
 8003810:	8181      	strh	r1, [r0, #12]
 8003812:	6643      	str	r3, [r0, #100]	@ 0x64
 8003814:	81c2      	strh	r2, [r0, #14]
 8003816:	6183      	str	r3, [r0, #24]
 8003818:	4619      	mov	r1, r3
 800381a:	2208      	movs	r2, #8
 800381c:	305c      	adds	r0, #92	@ 0x5c
 800381e:	f000 f93c 	bl	8003a9a <memset>
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <std+0x58>)
 8003824:	6263      	str	r3, [r4, #36]	@ 0x24
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <std+0x5c>)
 8003828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800382a:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <std+0x60>)
 800382c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <std+0x64>)
 8003830:	6323      	str	r3, [r4, #48]	@ 0x30
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <std+0x68>)
 8003834:	6224      	str	r4, [r4, #32]
 8003836:	429c      	cmp	r4, r3
 8003838:	d006      	beq.n	8003848 <std+0x48>
 800383a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800383e:	4294      	cmp	r4, r2
 8003840:	d002      	beq.n	8003848 <std+0x48>
 8003842:	33d0      	adds	r3, #208	@ 0xd0
 8003844:	429c      	cmp	r4, r3
 8003846:	d105      	bne.n	8003854 <std+0x54>
 8003848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003850:	f000 b99c 	b.w	8003b8c <__retarget_lock_init_recursive>
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	08003a15 	.word	0x08003a15
 800385c:	08003a37 	.word	0x08003a37
 8003860:	08003a6f 	.word	0x08003a6f
 8003864:	08003a93 	.word	0x08003a93
 8003868:	200004a4 	.word	0x200004a4

0800386c <stdio_exit_handler>:
 800386c:	4a02      	ldr	r2, [pc, #8]	@ (8003878 <stdio_exit_handler+0xc>)
 800386e:	4903      	ldr	r1, [pc, #12]	@ (800387c <stdio_exit_handler+0x10>)
 8003870:	4803      	ldr	r0, [pc, #12]	@ (8003880 <stdio_exit_handler+0x14>)
 8003872:	f000 b869 	b.w	8003948 <_fwalk_sglue>
 8003876:	bf00      	nop
 8003878:	2000000c 	.word	0x2000000c
 800387c:	080046d9 	.word	0x080046d9
 8003880:	2000001c 	.word	0x2000001c

08003884 <cleanup_stdio>:
 8003884:	6841      	ldr	r1, [r0, #4]
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <cleanup_stdio+0x34>)
 8003888:	4299      	cmp	r1, r3
 800388a:	b510      	push	{r4, lr}
 800388c:	4604      	mov	r4, r0
 800388e:	d001      	beq.n	8003894 <cleanup_stdio+0x10>
 8003890:	f000 ff22 	bl	80046d8 <_fflush_r>
 8003894:	68a1      	ldr	r1, [r4, #8]
 8003896:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <cleanup_stdio+0x38>)
 8003898:	4299      	cmp	r1, r3
 800389a:	d002      	beq.n	80038a2 <cleanup_stdio+0x1e>
 800389c:	4620      	mov	r0, r4
 800389e:	f000 ff1b 	bl	80046d8 <_fflush_r>
 80038a2:	68e1      	ldr	r1, [r4, #12]
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <cleanup_stdio+0x3c>)
 80038a6:	4299      	cmp	r1, r3
 80038a8:	d004      	beq.n	80038b4 <cleanup_stdio+0x30>
 80038aa:	4620      	mov	r0, r4
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b0:	f000 bf12 	b.w	80046d8 <_fflush_r>
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	bf00      	nop
 80038b8:	200004a4 	.word	0x200004a4
 80038bc:	2000050c 	.word	0x2000050c
 80038c0:	20000574 	.word	0x20000574

080038c4 <global_stdio_init.part.0>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <global_stdio_init.part.0+0x30>)
 80038c8:	4c0b      	ldr	r4, [pc, #44]	@ (80038f8 <global_stdio_init.part.0+0x34>)
 80038ca:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <global_stdio_init.part.0+0x38>)
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	4620      	mov	r0, r4
 80038d0:	2200      	movs	r2, #0
 80038d2:	2104      	movs	r1, #4
 80038d4:	f7ff ff94 	bl	8003800 <std>
 80038d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038dc:	2201      	movs	r2, #1
 80038de:	2109      	movs	r1, #9
 80038e0:	f7ff ff8e 	bl	8003800 <std>
 80038e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038e8:	2202      	movs	r2, #2
 80038ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ee:	2112      	movs	r1, #18
 80038f0:	f7ff bf86 	b.w	8003800 <std>
 80038f4:	200005dc 	.word	0x200005dc
 80038f8:	200004a4 	.word	0x200004a4
 80038fc:	0800386d 	.word	0x0800386d

08003900 <__sfp_lock_acquire>:
 8003900:	4801      	ldr	r0, [pc, #4]	@ (8003908 <__sfp_lock_acquire+0x8>)
 8003902:	f000 b944 	b.w	8003b8e <__retarget_lock_acquire_recursive>
 8003906:	bf00      	nop
 8003908:	200005e5 	.word	0x200005e5

0800390c <__sfp_lock_release>:
 800390c:	4801      	ldr	r0, [pc, #4]	@ (8003914 <__sfp_lock_release+0x8>)
 800390e:	f000 b93f 	b.w	8003b90 <__retarget_lock_release_recursive>
 8003912:	bf00      	nop
 8003914:	200005e5 	.word	0x200005e5

08003918 <__sinit>:
 8003918:	b510      	push	{r4, lr}
 800391a:	4604      	mov	r4, r0
 800391c:	f7ff fff0 	bl	8003900 <__sfp_lock_acquire>
 8003920:	6a23      	ldr	r3, [r4, #32]
 8003922:	b11b      	cbz	r3, 800392c <__sinit+0x14>
 8003924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003928:	f7ff bff0 	b.w	800390c <__sfp_lock_release>
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <__sinit+0x28>)
 800392e:	6223      	str	r3, [r4, #32]
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <__sinit+0x2c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f5      	bne.n	8003924 <__sinit+0xc>
 8003938:	f7ff ffc4 	bl	80038c4 <global_stdio_init.part.0>
 800393c:	e7f2      	b.n	8003924 <__sinit+0xc>
 800393e:	bf00      	nop
 8003940:	08003885 	.word	0x08003885
 8003944:	200005dc 	.word	0x200005dc

08003948 <_fwalk_sglue>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	4607      	mov	r7, r0
 800394e:	4688      	mov	r8, r1
 8003950:	4614      	mov	r4, r2
 8003952:	2600      	movs	r6, #0
 8003954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003958:	f1b9 0901 	subs.w	r9, r9, #1
 800395c:	d505      	bpl.n	800396a <_fwalk_sglue+0x22>
 800395e:	6824      	ldr	r4, [r4, #0]
 8003960:	2c00      	cmp	r4, #0
 8003962:	d1f7      	bne.n	8003954 <_fwalk_sglue+0xc>
 8003964:	4630      	mov	r0, r6
 8003966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396a:	89ab      	ldrh	r3, [r5, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d907      	bls.n	8003980 <_fwalk_sglue+0x38>
 8003970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003974:	3301      	adds	r3, #1
 8003976:	d003      	beq.n	8003980 <_fwalk_sglue+0x38>
 8003978:	4629      	mov	r1, r5
 800397a:	4638      	mov	r0, r7
 800397c:	47c0      	blx	r8
 800397e:	4306      	orrs	r6, r0
 8003980:	3568      	adds	r5, #104	@ 0x68
 8003982:	e7e9      	b.n	8003958 <_fwalk_sglue+0x10>

08003984 <iprintf>:
 8003984:	b40f      	push	{r0, r1, r2, r3}
 8003986:	b507      	push	{r0, r1, r2, lr}
 8003988:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <iprintf+0x20>)
 800398a:	ab04      	add	r3, sp, #16
 800398c:	6808      	ldr	r0, [r1, #0]
 800398e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003992:	6881      	ldr	r1, [r0, #8]
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f000 fb77 	bl	8004088 <_vfiprintf_r>
 800399a:	b003      	add	sp, #12
 800399c:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a0:	b004      	add	sp, #16
 80039a2:	4770      	bx	lr
 80039a4:	20000018 	.word	0x20000018

080039a8 <sniprintf>:
 80039a8:	b40c      	push	{r2, r3}
 80039aa:	b530      	push	{r4, r5, lr}
 80039ac:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <sniprintf+0x68>)
 80039ae:	1e0c      	subs	r4, r1, #0
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	b09d      	sub	sp, #116	@ 0x74
 80039b4:	da08      	bge.n	80039c8 <sniprintf+0x20>
 80039b6:	238b      	movs	r3, #139	@ 0x8b
 80039b8:	602b      	str	r3, [r5, #0]
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295
 80039be:	b01d      	add	sp, #116	@ 0x74
 80039c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039c4:	b002      	add	sp, #8
 80039c6:	4770      	bx	lr
 80039c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80039d6:	bf14      	ite	ne
 80039d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80039dc:	4623      	moveq	r3, r4
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	9307      	str	r3, [sp, #28]
 80039e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e6:	9002      	str	r0, [sp, #8]
 80039e8:	9006      	str	r0, [sp, #24]
 80039ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80039f0:	ab21      	add	r3, sp, #132	@ 0x84
 80039f2:	a902      	add	r1, sp, #8
 80039f4:	4628      	mov	r0, r5
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	f000 fa20 	bl	8003e3c <_svfiprintf_r>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	bfbc      	itt	lt
 8003a00:	238b      	movlt	r3, #139	@ 0x8b
 8003a02:	602b      	strlt	r3, [r5, #0]
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d0da      	beq.n	80039be <sniprintf+0x16>
 8003a08:	9b02      	ldr	r3, [sp, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e7d6      	b.n	80039be <sniprintf+0x16>
 8003a10:	20000018 	.word	0x20000018

08003a14 <__sread>:
 8003a14:	b510      	push	{r4, lr}
 8003a16:	460c      	mov	r4, r1
 8003a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1c:	f000 f868 	bl	8003af0 <_read_r>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	bfab      	itete	ge
 8003a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a26:	89a3      	ldrhlt	r3, [r4, #12]
 8003a28:	181b      	addge	r3, r3, r0
 8003a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a2e:	bfac      	ite	ge
 8003a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a32:	81a3      	strhlt	r3, [r4, #12]
 8003a34:	bd10      	pop	{r4, pc}

08003a36 <__swrite>:
 8003a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	461f      	mov	r7, r3
 8003a3c:	898b      	ldrh	r3, [r1, #12]
 8003a3e:	05db      	lsls	r3, r3, #23
 8003a40:	4605      	mov	r5, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	4616      	mov	r6, r2
 8003a46:	d505      	bpl.n	8003a54 <__swrite+0x1e>
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f000 f83c 	bl	8003acc <_lseek_r>
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	4632      	mov	r2, r6
 8003a62:	463b      	mov	r3, r7
 8003a64:	4628      	mov	r0, r5
 8003a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6a:	f000 b853 	b.w	8003b14 <_write_r>

08003a6e <__sseek>:
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	460c      	mov	r4, r1
 8003a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a76:	f000 f829 	bl	8003acc <_lseek_r>
 8003a7a:	1c43      	adds	r3, r0, #1
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	bf15      	itete	ne
 8003a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a8a:	81a3      	strheq	r3, [r4, #12]
 8003a8c:	bf18      	it	ne
 8003a8e:	81a3      	strhne	r3, [r4, #12]
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <__sclose>:
 8003a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a96:	f000 b809 	b.w	8003aac <_close_r>

08003a9a <memset>:
 8003a9a:	4402      	add	r2, r0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d100      	bne.n	8003aa4 <memset+0xa>
 8003aa2:	4770      	bx	lr
 8003aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa8:	e7f9      	b.n	8003a9e <memset+0x4>
	...

08003aac <_close_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d06      	ldr	r5, [pc, #24]	@ (8003ac8 <_close_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fc ff74 	bl	80009a4 <_close>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_close_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_close_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	200005e0 	.word	0x200005e0

08003acc <_lseek_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4d07      	ldr	r5, [pc, #28]	@ (8003aec <_lseek_r+0x20>)
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	4608      	mov	r0, r1
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	602a      	str	r2, [r5, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7fc ff89 	bl	80009f2 <_lseek>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_lseek_r+0x1e>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_lseek_r+0x1e>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	200005e0 	.word	0x200005e0

08003af0 <_read_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d07      	ldr	r5, [pc, #28]	@ (8003b10 <_read_r+0x20>)
 8003af4:	4604      	mov	r4, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fc ff17 	bl	8000932 <_read>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_read_r+0x1e>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_read_r+0x1e>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	200005e0 	.word	0x200005e0

08003b14 <_write_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4d07      	ldr	r5, [pc, #28]	@ (8003b34 <_write_r+0x20>)
 8003b18:	4604      	mov	r4, r0
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	602a      	str	r2, [r5, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f7fc ff22 	bl	800096c <_write>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_write_r+0x1e>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_write_r+0x1e>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	200005e0 	.word	0x200005e0

08003b38 <__errno>:
 8003b38:	4b01      	ldr	r3, [pc, #4]	@ (8003b40 <__errno+0x8>)
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000018 	.word	0x20000018

08003b44 <__libc_init_array>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4d0d      	ldr	r5, [pc, #52]	@ (8003b7c <__libc_init_array+0x38>)
 8003b48:	4c0d      	ldr	r4, [pc, #52]	@ (8003b80 <__libc_init_array+0x3c>)
 8003b4a:	1b64      	subs	r4, r4, r5
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	2600      	movs	r6, #0
 8003b50:	42a6      	cmp	r6, r4
 8003b52:	d109      	bne.n	8003b68 <__libc_init_array+0x24>
 8003b54:	4d0b      	ldr	r5, [pc, #44]	@ (8003b84 <__libc_init_array+0x40>)
 8003b56:	4c0c      	ldr	r4, [pc, #48]	@ (8003b88 <__libc_init_array+0x44>)
 8003b58:	f000 ff6c 	bl	8004a34 <_init>
 8003b5c:	1b64      	subs	r4, r4, r5
 8003b5e:	10a4      	asrs	r4, r4, #2
 8003b60:	2600      	movs	r6, #0
 8003b62:	42a6      	cmp	r6, r4
 8003b64:	d105      	bne.n	8003b72 <__libc_init_array+0x2e>
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6c:	4798      	blx	r3
 8003b6e:	3601      	adds	r6, #1
 8003b70:	e7ee      	b.n	8003b50 <__libc_init_array+0xc>
 8003b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b76:	4798      	blx	r3
 8003b78:	3601      	adds	r6, #1
 8003b7a:	e7f2      	b.n	8003b62 <__libc_init_array+0x1e>
 8003b7c:	08004ae0 	.word	0x08004ae0
 8003b80:	08004ae0 	.word	0x08004ae0
 8003b84:	08004ae0 	.word	0x08004ae0
 8003b88:	08004ae4 	.word	0x08004ae4

08003b8c <__retarget_lock_init_recursive>:
 8003b8c:	4770      	bx	lr

08003b8e <__retarget_lock_acquire_recursive>:
 8003b8e:	4770      	bx	lr

08003b90 <__retarget_lock_release_recursive>:
 8003b90:	4770      	bx	lr
	...

08003b94 <_free_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4605      	mov	r5, r0
 8003b98:	2900      	cmp	r1, #0
 8003b9a:	d041      	beq.n	8003c20 <_free_r+0x8c>
 8003b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba0:	1f0c      	subs	r4, r1, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfb8      	it	lt
 8003ba6:	18e4      	addlt	r4, r4, r3
 8003ba8:	f000 f8e0 	bl	8003d6c <__malloc_lock>
 8003bac:	4a1d      	ldr	r2, [pc, #116]	@ (8003c24 <_free_r+0x90>)
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	b933      	cbnz	r3, 8003bc0 <_free_r+0x2c>
 8003bb2:	6063      	str	r3, [r4, #4]
 8003bb4:	6014      	str	r4, [r2, #0]
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bbc:	f000 b8dc 	b.w	8003d78 <__malloc_unlock>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d908      	bls.n	8003bd6 <_free_r+0x42>
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	1821      	adds	r1, r4, r0
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	bf01      	itttt	eq
 8003bcc:	6819      	ldreq	r1, [r3, #0]
 8003bce:	685b      	ldreq	r3, [r3, #4]
 8003bd0:	1809      	addeq	r1, r1, r0
 8003bd2:	6021      	streq	r1, [r4, #0]
 8003bd4:	e7ed      	b.n	8003bb2 <_free_r+0x1e>
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b10b      	cbz	r3, 8003be0 <_free_r+0x4c>
 8003bdc:	42a3      	cmp	r3, r4
 8003bde:	d9fa      	bls.n	8003bd6 <_free_r+0x42>
 8003be0:	6811      	ldr	r1, [r2, #0]
 8003be2:	1850      	adds	r0, r2, r1
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d10b      	bne.n	8003c00 <_free_r+0x6c>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	4401      	add	r1, r0
 8003bec:	1850      	adds	r0, r2, r1
 8003bee:	4283      	cmp	r3, r0
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	d1e0      	bne.n	8003bb6 <_free_r+0x22>
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	6053      	str	r3, [r2, #4]
 8003bfa:	4408      	add	r0, r1
 8003bfc:	6010      	str	r0, [r2, #0]
 8003bfe:	e7da      	b.n	8003bb6 <_free_r+0x22>
 8003c00:	d902      	bls.n	8003c08 <_free_r+0x74>
 8003c02:	230c      	movs	r3, #12
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	e7d6      	b.n	8003bb6 <_free_r+0x22>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	1821      	adds	r1, r4, r0
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	bf04      	itt	eq
 8003c10:	6819      	ldreq	r1, [r3, #0]
 8003c12:	685b      	ldreq	r3, [r3, #4]
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	bf04      	itt	eq
 8003c18:	1809      	addeq	r1, r1, r0
 8003c1a:	6021      	streq	r1, [r4, #0]
 8003c1c:	6054      	str	r4, [r2, #4]
 8003c1e:	e7ca      	b.n	8003bb6 <_free_r+0x22>
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	200005ec 	.word	0x200005ec

08003c28 <sbrk_aligned>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c68 <sbrk_aligned+0x40>)
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	6831      	ldr	r1, [r6, #0]
 8003c30:	4605      	mov	r5, r0
 8003c32:	b911      	cbnz	r1, 8003c3a <sbrk_aligned+0x12>
 8003c34:	f000 fe26 	bl	8004884 <_sbrk_r>
 8003c38:	6030      	str	r0, [r6, #0]
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 fe21 	bl	8004884 <_sbrk_r>
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d103      	bne.n	8003c4e <sbrk_aligned+0x26>
 8003c46:	f04f 34ff 	mov.w	r4, #4294967295
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	1cc4      	adds	r4, r0, #3
 8003c50:	f024 0403 	bic.w	r4, r4, #3
 8003c54:	42a0      	cmp	r0, r4
 8003c56:	d0f8      	beq.n	8003c4a <sbrk_aligned+0x22>
 8003c58:	1a21      	subs	r1, r4, r0
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fe12 	bl	8004884 <_sbrk_r>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d1f2      	bne.n	8003c4a <sbrk_aligned+0x22>
 8003c64:	e7ef      	b.n	8003c46 <sbrk_aligned+0x1e>
 8003c66:	bf00      	nop
 8003c68:	200005e8 	.word	0x200005e8

08003c6c <_malloc_r>:
 8003c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c70:	1ccd      	adds	r5, r1, #3
 8003c72:	f025 0503 	bic.w	r5, r5, #3
 8003c76:	3508      	adds	r5, #8
 8003c78:	2d0c      	cmp	r5, #12
 8003c7a:	bf38      	it	cc
 8003c7c:	250c      	movcc	r5, #12
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	4606      	mov	r6, r0
 8003c82:	db01      	blt.n	8003c88 <_malloc_r+0x1c>
 8003c84:	42a9      	cmp	r1, r5
 8003c86:	d904      	bls.n	8003c92 <_malloc_r+0x26>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	6033      	str	r3, [r6, #0]
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d68 <_malloc_r+0xfc>
 8003c96:	f000 f869 	bl	8003d6c <__malloc_lock>
 8003c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9e:	461c      	mov	r4, r3
 8003ca0:	bb44      	cbnz	r4, 8003cf4 <_malloc_r+0x88>
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7ff ffbf 	bl	8003c28 <sbrk_aligned>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	4604      	mov	r4, r0
 8003cae:	d158      	bne.n	8003d62 <_malloc_r+0xf6>
 8003cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8003cb4:	4627      	mov	r7, r4
 8003cb6:	2f00      	cmp	r7, #0
 8003cb8:	d143      	bne.n	8003d42 <_malloc_r+0xd6>
 8003cba:	2c00      	cmp	r4, #0
 8003cbc:	d04b      	beq.n	8003d56 <_malloc_r+0xea>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	eb04 0903 	add.w	r9, r4, r3
 8003cc8:	f000 fddc 	bl	8004884 <_sbrk_r>
 8003ccc:	4581      	cmp	r9, r0
 8003cce:	d142      	bne.n	8003d56 <_malloc_r+0xea>
 8003cd0:	6821      	ldr	r1, [r4, #0]
 8003cd2:	1a6d      	subs	r5, r5, r1
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ffa6 	bl	8003c28 <sbrk_aligned>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d03a      	beq.n	8003d56 <_malloc_r+0xea>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	442b      	add	r3, r5
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	bb62      	cbnz	r2, 8003d48 <_malloc_r+0xdc>
 8003cee:	f8c8 7000 	str.w	r7, [r8]
 8003cf2:	e00f      	b.n	8003d14 <_malloc_r+0xa8>
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	1b52      	subs	r2, r2, r5
 8003cf8:	d420      	bmi.n	8003d3c <_malloc_r+0xd0>
 8003cfa:	2a0b      	cmp	r2, #11
 8003cfc:	d917      	bls.n	8003d2e <_malloc_r+0xc2>
 8003cfe:	1961      	adds	r1, r4, r5
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	6025      	str	r5, [r4, #0]
 8003d04:	bf18      	it	ne
 8003d06:	6059      	strne	r1, [r3, #4]
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	bf08      	it	eq
 8003d0c:	f8c8 1000 	streq.w	r1, [r8]
 8003d10:	5162      	str	r2, [r4, r5]
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 f82f 	bl	8003d78 <__malloc_unlock>
 8003d1a:	f104 000b 	add.w	r0, r4, #11
 8003d1e:	1d23      	adds	r3, r4, #4
 8003d20:	f020 0007 	bic.w	r0, r0, #7
 8003d24:	1ac2      	subs	r2, r0, r3
 8003d26:	bf1c      	itt	ne
 8003d28:	1a1b      	subne	r3, r3, r0
 8003d2a:	50a3      	strne	r3, [r4, r2]
 8003d2c:	e7af      	b.n	8003c8e <_malloc_r+0x22>
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	bf0c      	ite	eq
 8003d34:	f8c8 2000 	streq.w	r2, [r8]
 8003d38:	605a      	strne	r2, [r3, #4]
 8003d3a:	e7eb      	b.n	8003d14 <_malloc_r+0xa8>
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	6864      	ldr	r4, [r4, #4]
 8003d40:	e7ae      	b.n	8003ca0 <_malloc_r+0x34>
 8003d42:	463c      	mov	r4, r7
 8003d44:	687f      	ldr	r7, [r7, #4]
 8003d46:	e7b6      	b.n	8003cb6 <_malloc_r+0x4a>
 8003d48:	461a      	mov	r2, r3
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d1fb      	bne.n	8003d48 <_malloc_r+0xdc>
 8003d50:	2300      	movs	r3, #0
 8003d52:	6053      	str	r3, [r2, #4]
 8003d54:	e7de      	b.n	8003d14 <_malloc_r+0xa8>
 8003d56:	230c      	movs	r3, #12
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f000 f80c 	bl	8003d78 <__malloc_unlock>
 8003d60:	e794      	b.n	8003c8c <_malloc_r+0x20>
 8003d62:	6005      	str	r5, [r0, #0]
 8003d64:	e7d6      	b.n	8003d14 <_malloc_r+0xa8>
 8003d66:	bf00      	nop
 8003d68:	200005ec 	.word	0x200005ec

08003d6c <__malloc_lock>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	@ (8003d74 <__malloc_lock+0x8>)
 8003d6e:	f7ff bf0e 	b.w	8003b8e <__retarget_lock_acquire_recursive>
 8003d72:	bf00      	nop
 8003d74:	200005e4 	.word	0x200005e4

08003d78 <__malloc_unlock>:
 8003d78:	4801      	ldr	r0, [pc, #4]	@ (8003d80 <__malloc_unlock+0x8>)
 8003d7a:	f7ff bf09 	b.w	8003b90 <__retarget_lock_release_recursive>
 8003d7e:	bf00      	nop
 8003d80:	200005e4 	.word	0x200005e4

08003d84 <__ssputs_r>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	688e      	ldr	r6, [r1, #8]
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	42be      	cmp	r6, r7
 8003d8e:	680b      	ldr	r3, [r1, #0]
 8003d90:	4682      	mov	sl, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4690      	mov	r8, r2
 8003d96:	d82d      	bhi.n	8003df4 <__ssputs_r+0x70>
 8003d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003da0:	d026      	beq.n	8003df0 <__ssputs_r+0x6c>
 8003da2:	6965      	ldr	r5, [r4, #20]
 8003da4:	6909      	ldr	r1, [r1, #16]
 8003da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003daa:	eba3 0901 	sub.w	r9, r3, r1
 8003dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003db2:	1c7b      	adds	r3, r7, #1
 8003db4:	444b      	add	r3, r9
 8003db6:	106d      	asrs	r5, r5, #1
 8003db8:	429d      	cmp	r5, r3
 8003dba:	bf38      	it	cc
 8003dbc:	461d      	movcc	r5, r3
 8003dbe:	0553      	lsls	r3, r2, #21
 8003dc0:	d527      	bpl.n	8003e12 <__ssputs_r+0x8e>
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7ff ff52 	bl	8003c6c <_malloc_r>
 8003dc8:	4606      	mov	r6, r0
 8003dca:	b360      	cbz	r0, 8003e26 <__ssputs_r+0xa2>
 8003dcc:	6921      	ldr	r1, [r4, #16]
 8003dce:	464a      	mov	r2, r9
 8003dd0:	f000 fd68 	bl	80048a4 <memcpy>
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dde:	81a3      	strh	r3, [r4, #12]
 8003de0:	6126      	str	r6, [r4, #16]
 8003de2:	6165      	str	r5, [r4, #20]
 8003de4:	444e      	add	r6, r9
 8003de6:	eba5 0509 	sub.w	r5, r5, r9
 8003dea:	6026      	str	r6, [r4, #0]
 8003dec:	60a5      	str	r5, [r4, #8]
 8003dee:	463e      	mov	r6, r7
 8003df0:	42be      	cmp	r6, r7
 8003df2:	d900      	bls.n	8003df6 <__ssputs_r+0x72>
 8003df4:	463e      	mov	r6, r7
 8003df6:	6820      	ldr	r0, [r4, #0]
 8003df8:	4632      	mov	r2, r6
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	f000 fd28 	bl	8004850 <memmove>
 8003e00:	68a3      	ldr	r3, [r4, #8]
 8003e02:	1b9b      	subs	r3, r3, r6
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	4433      	add	r3, r6
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e12:	462a      	mov	r2, r5
 8003e14:	f000 fd54 	bl	80048c0 <_realloc_r>
 8003e18:	4606      	mov	r6, r0
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d1e0      	bne.n	8003de0 <__ssputs_r+0x5c>
 8003e1e:	6921      	ldr	r1, [r4, #16]
 8003e20:	4650      	mov	r0, sl
 8003e22:	f7ff feb7 	bl	8003b94 <_free_r>
 8003e26:	230c      	movs	r3, #12
 8003e28:	f8ca 3000 	str.w	r3, [sl]
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	e7e9      	b.n	8003e0e <__ssputs_r+0x8a>
	...

08003e3c <_svfiprintf_r>:
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	4698      	mov	r8, r3
 8003e42:	898b      	ldrh	r3, [r1, #12]
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	b09d      	sub	sp, #116	@ 0x74
 8003e48:	4607      	mov	r7, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	d510      	bpl.n	8003e72 <_svfiprintf_r+0x36>
 8003e50:	690b      	ldr	r3, [r1, #16]
 8003e52:	b973      	cbnz	r3, 8003e72 <_svfiprintf_r+0x36>
 8003e54:	2140      	movs	r1, #64	@ 0x40
 8003e56:	f7ff ff09 	bl	8003c6c <_malloc_r>
 8003e5a:	6028      	str	r0, [r5, #0]
 8003e5c:	6128      	str	r0, [r5, #16]
 8003e5e:	b930      	cbnz	r0, 8003e6e <_svfiprintf_r+0x32>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	b01d      	add	sp, #116	@ 0x74
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	2340      	movs	r3, #64	@ 0x40
 8003e70:	616b      	str	r3, [r5, #20]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e76:	2320      	movs	r3, #32
 8003e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e80:	2330      	movs	r3, #48	@ 0x30
 8003e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004020 <_svfiprintf_r+0x1e4>
 8003e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e8a:	f04f 0901 	mov.w	r9, #1
 8003e8e:	4623      	mov	r3, r4
 8003e90:	469a      	mov	sl, r3
 8003e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e96:	b10a      	cbz	r2, 8003e9c <_svfiprintf_r+0x60>
 8003e98:	2a25      	cmp	r2, #37	@ 0x25
 8003e9a:	d1f9      	bne.n	8003e90 <_svfiprintf_r+0x54>
 8003e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea0:	d00b      	beq.n	8003eba <_svfiprintf_r+0x7e>
 8003ea2:	465b      	mov	r3, fp
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7ff ff6b 	bl	8003d84 <__ssputs_r>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f000 80a7 	beq.w	8004002 <_svfiprintf_r+0x1c6>
 8003eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eb6:	445a      	add	r2, fp
 8003eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eba:	f89a 3000 	ldrb.w	r3, [sl]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 809f 	beq.w	8004002 <_svfiprintf_r+0x1c6>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ece:	f10a 0a01 	add.w	sl, sl, #1
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	9307      	str	r3, [sp, #28]
 8003ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8003edc:	4654      	mov	r4, sl
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee4:	484e      	ldr	r0, [pc, #312]	@ (8004020 <_svfiprintf_r+0x1e4>)
 8003ee6:	f7fc f97b 	bl	80001e0 <memchr>
 8003eea:	9a04      	ldr	r2, [sp, #16]
 8003eec:	b9d8      	cbnz	r0, 8003f26 <_svfiprintf_r+0xea>
 8003eee:	06d0      	lsls	r0, r2, #27
 8003ef0:	bf44      	itt	mi
 8003ef2:	2320      	movmi	r3, #32
 8003ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef8:	0711      	lsls	r1, r2, #28
 8003efa:	bf44      	itt	mi
 8003efc:	232b      	movmi	r3, #43	@ 0x2b
 8003efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f02:	f89a 3000 	ldrb.w	r3, [sl]
 8003f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f08:	d015      	beq.n	8003f36 <_svfiprintf_r+0xfa>
 8003f0a:	9a07      	ldr	r2, [sp, #28]
 8003f0c:	4654      	mov	r4, sl
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f04f 0c0a 	mov.w	ip, #10
 8003f14:	4621      	mov	r1, r4
 8003f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f1a:	3b30      	subs	r3, #48	@ 0x30
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d94b      	bls.n	8003fb8 <_svfiprintf_r+0x17c>
 8003f20:	b1b0      	cbz	r0, 8003f50 <_svfiprintf_r+0x114>
 8003f22:	9207      	str	r2, [sp, #28]
 8003f24:	e014      	b.n	8003f50 <_svfiprintf_r+0x114>
 8003f26:	eba0 0308 	sub.w	r3, r0, r8
 8003f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	46a2      	mov	sl, r4
 8003f34:	e7d2      	b.n	8003edc <_svfiprintf_r+0xa0>
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	1d19      	adds	r1, r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	9103      	str	r1, [sp, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfbb      	ittet	lt
 8003f42:	425b      	neglt	r3, r3
 8003f44:	f042 0202 	orrlt.w	r2, r2, #2
 8003f48:	9307      	strge	r3, [sp, #28]
 8003f4a:	9307      	strlt	r3, [sp, #28]
 8003f4c:	bfb8      	it	lt
 8003f4e:	9204      	strlt	r2, [sp, #16]
 8003f50:	7823      	ldrb	r3, [r4, #0]
 8003f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f54:	d10a      	bne.n	8003f6c <_svfiprintf_r+0x130>
 8003f56:	7863      	ldrb	r3, [r4, #1]
 8003f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f5a:	d132      	bne.n	8003fc2 <_svfiprintf_r+0x186>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	9203      	str	r2, [sp, #12]
 8003f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f68:	3402      	adds	r4, #2
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004030 <_svfiprintf_r+0x1f4>
 8003f70:	7821      	ldrb	r1, [r4, #0]
 8003f72:	2203      	movs	r2, #3
 8003f74:	4650      	mov	r0, sl
 8003f76:	f7fc f933 	bl	80001e0 <memchr>
 8003f7a:	b138      	cbz	r0, 8003f8c <_svfiprintf_r+0x150>
 8003f7c:	9b04      	ldr	r3, [sp, #16]
 8003f7e:	eba0 000a 	sub.w	r0, r0, sl
 8003f82:	2240      	movs	r2, #64	@ 0x40
 8003f84:	4082      	lsls	r2, r0
 8003f86:	4313      	orrs	r3, r2
 8003f88:	3401      	adds	r4, #1
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f90:	4824      	ldr	r0, [pc, #144]	@ (8004024 <_svfiprintf_r+0x1e8>)
 8003f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f96:	2206      	movs	r2, #6
 8003f98:	f7fc f922 	bl	80001e0 <memchr>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d036      	beq.n	800400e <_svfiprintf_r+0x1d2>
 8003fa0:	4b21      	ldr	r3, [pc, #132]	@ (8004028 <_svfiprintf_r+0x1ec>)
 8003fa2:	bb1b      	cbnz	r3, 8003fec <_svfiprintf_r+0x1b0>
 8003fa4:	9b03      	ldr	r3, [sp, #12]
 8003fa6:	3307      	adds	r3, #7
 8003fa8:	f023 0307 	bic.w	r3, r3, #7
 8003fac:	3308      	adds	r3, #8
 8003fae:	9303      	str	r3, [sp, #12]
 8003fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb2:	4433      	add	r3, r6
 8003fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb6:	e76a      	b.n	8003e8e <_svfiprintf_r+0x52>
 8003fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	e7a8      	b.n	8003f14 <_svfiprintf_r+0xd8>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	3401      	adds	r4, #1
 8003fc6:	9305      	str	r3, [sp, #20]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f04f 0c0a 	mov.w	ip, #10
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd4:	3a30      	subs	r2, #48	@ 0x30
 8003fd6:	2a09      	cmp	r2, #9
 8003fd8:	d903      	bls.n	8003fe2 <_svfiprintf_r+0x1a6>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c6      	beq.n	8003f6c <_svfiprintf_r+0x130>
 8003fde:	9105      	str	r1, [sp, #20]
 8003fe0:	e7c4      	b.n	8003f6c <_svfiprintf_r+0x130>
 8003fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e7f0      	b.n	8003fce <_svfiprintf_r+0x192>
 8003fec:	ab03      	add	r3, sp, #12
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	462a      	mov	r2, r5
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <_svfiprintf_r+0x1f0>)
 8003ff4:	a904      	add	r1, sp, #16
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	f3af 8000 	nop.w
 8003ffc:	1c42      	adds	r2, r0, #1
 8003ffe:	4606      	mov	r6, r0
 8004000:	d1d6      	bne.n	8003fb0 <_svfiprintf_r+0x174>
 8004002:	89ab      	ldrh	r3, [r5, #12]
 8004004:	065b      	lsls	r3, r3, #25
 8004006:	f53f af2d 	bmi.w	8003e64 <_svfiprintf_r+0x28>
 800400a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800400c:	e72c      	b.n	8003e68 <_svfiprintf_r+0x2c>
 800400e:	ab03      	add	r3, sp, #12
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	462a      	mov	r2, r5
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <_svfiprintf_r+0x1f0>)
 8004016:	a904      	add	r1, sp, #16
 8004018:	4638      	mov	r0, r7
 800401a:	f000 f9bb 	bl	8004394 <_printf_i>
 800401e:	e7ed      	b.n	8003ffc <_svfiprintf_r+0x1c0>
 8004020:	08004aa4 	.word	0x08004aa4
 8004024:	08004aae 	.word	0x08004aae
 8004028:	00000000 	.word	0x00000000
 800402c:	08003d85 	.word	0x08003d85
 8004030:	08004aaa 	.word	0x08004aaa

08004034 <__sfputc_r>:
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	3b01      	subs	r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	b410      	push	{r4}
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	da08      	bge.n	8004052 <__sfputc_r+0x1e>
 8004040:	6994      	ldr	r4, [r2, #24]
 8004042:	42a3      	cmp	r3, r4
 8004044:	db01      	blt.n	800404a <__sfputc_r+0x16>
 8004046:	290a      	cmp	r1, #10
 8004048:	d103      	bne.n	8004052 <__sfputc_r+0x1e>
 800404a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404e:	f000 bb6b 	b.w	8004728 <__swbuf_r>
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	1c58      	adds	r0, r3, #1
 8004056:	6010      	str	r0, [r2, #0]
 8004058:	7019      	strb	r1, [r3, #0]
 800405a:	4608      	mov	r0, r1
 800405c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004060:	4770      	bx	lr

08004062 <__sfputs_r>:
 8004062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4614      	mov	r4, r2
 800406a:	18d5      	adds	r5, r2, r3
 800406c:	42ac      	cmp	r4, r5
 800406e:	d101      	bne.n	8004074 <__sfputs_r+0x12>
 8004070:	2000      	movs	r0, #0
 8004072:	e007      	b.n	8004084 <__sfputs_r+0x22>
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	463a      	mov	r2, r7
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff ffda 	bl	8004034 <__sfputc_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1f3      	bne.n	800406c <__sfputs_r+0xa>
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004088 <_vfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	460d      	mov	r5, r1
 800408e:	b09d      	sub	sp, #116	@ 0x74
 8004090:	4614      	mov	r4, r2
 8004092:	4698      	mov	r8, r3
 8004094:	4606      	mov	r6, r0
 8004096:	b118      	cbz	r0, 80040a0 <_vfiprintf_r+0x18>
 8004098:	6a03      	ldr	r3, [r0, #32]
 800409a:	b90b      	cbnz	r3, 80040a0 <_vfiprintf_r+0x18>
 800409c:	f7ff fc3c 	bl	8003918 <__sinit>
 80040a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040a2:	07d9      	lsls	r1, r3, #31
 80040a4:	d405      	bmi.n	80040b2 <_vfiprintf_r+0x2a>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	059a      	lsls	r2, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_vfiprintf_r+0x2a>
 80040ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ae:	f7ff fd6e 	bl	8003b8e <__retarget_lock_acquire_recursive>
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	071b      	lsls	r3, r3, #28
 80040b6:	d501      	bpl.n	80040bc <_vfiprintf_r+0x34>
 80040b8:	692b      	ldr	r3, [r5, #16]
 80040ba:	b99b      	cbnz	r3, 80040e4 <_vfiprintf_r+0x5c>
 80040bc:	4629      	mov	r1, r5
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 fb70 	bl	80047a4 <__swsetup_r>
 80040c4:	b170      	cbz	r0, 80040e4 <_vfiprintf_r+0x5c>
 80040c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040c8:	07dc      	lsls	r4, r3, #31
 80040ca:	d504      	bpl.n	80040d6 <_vfiprintf_r+0x4e>
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	b01d      	add	sp, #116	@ 0x74
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	0598      	lsls	r0, r3, #22
 80040da:	d4f7      	bmi.n	80040cc <_vfiprintf_r+0x44>
 80040dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040de:	f7ff fd57 	bl	8003b90 <__retarget_lock_release_recursive>
 80040e2:	e7f3      	b.n	80040cc <_vfiprintf_r+0x44>
 80040e4:	2300      	movs	r3, #0
 80040e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80040e8:	2320      	movs	r3, #32
 80040ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f2:	2330      	movs	r3, #48	@ 0x30
 80040f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80042a4 <_vfiprintf_r+0x21c>
 80040f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040fc:	f04f 0901 	mov.w	r9, #1
 8004100:	4623      	mov	r3, r4
 8004102:	469a      	mov	sl, r3
 8004104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004108:	b10a      	cbz	r2, 800410e <_vfiprintf_r+0x86>
 800410a:	2a25      	cmp	r2, #37	@ 0x25
 800410c:	d1f9      	bne.n	8004102 <_vfiprintf_r+0x7a>
 800410e:	ebba 0b04 	subs.w	fp, sl, r4
 8004112:	d00b      	beq.n	800412c <_vfiprintf_r+0xa4>
 8004114:	465b      	mov	r3, fp
 8004116:	4622      	mov	r2, r4
 8004118:	4629      	mov	r1, r5
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ffa1 	bl	8004062 <__sfputs_r>
 8004120:	3001      	adds	r0, #1
 8004122:	f000 80a7 	beq.w	8004274 <_vfiprintf_r+0x1ec>
 8004126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004128:	445a      	add	r2, fp
 800412a:	9209      	str	r2, [sp, #36]	@ 0x24
 800412c:	f89a 3000 	ldrb.w	r3, [sl]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 809f 	beq.w	8004274 <_vfiprintf_r+0x1ec>
 8004136:	2300      	movs	r3, #0
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004140:	f10a 0a01 	add.w	sl, sl, #1
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	9307      	str	r3, [sp, #28]
 8004148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800414c:	931a      	str	r3, [sp, #104]	@ 0x68
 800414e:	4654      	mov	r4, sl
 8004150:	2205      	movs	r2, #5
 8004152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004156:	4853      	ldr	r0, [pc, #332]	@ (80042a4 <_vfiprintf_r+0x21c>)
 8004158:	f7fc f842 	bl	80001e0 <memchr>
 800415c:	9a04      	ldr	r2, [sp, #16]
 800415e:	b9d8      	cbnz	r0, 8004198 <_vfiprintf_r+0x110>
 8004160:	06d1      	lsls	r1, r2, #27
 8004162:	bf44      	itt	mi
 8004164:	2320      	movmi	r3, #32
 8004166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800416a:	0713      	lsls	r3, r2, #28
 800416c:	bf44      	itt	mi
 800416e:	232b      	movmi	r3, #43	@ 0x2b
 8004170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004174:	f89a 3000 	ldrb.w	r3, [sl]
 8004178:	2b2a      	cmp	r3, #42	@ 0x2a
 800417a:	d015      	beq.n	80041a8 <_vfiprintf_r+0x120>
 800417c:	9a07      	ldr	r2, [sp, #28]
 800417e:	4654      	mov	r4, sl
 8004180:	2000      	movs	r0, #0
 8004182:	f04f 0c0a 	mov.w	ip, #10
 8004186:	4621      	mov	r1, r4
 8004188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418c:	3b30      	subs	r3, #48	@ 0x30
 800418e:	2b09      	cmp	r3, #9
 8004190:	d94b      	bls.n	800422a <_vfiprintf_r+0x1a2>
 8004192:	b1b0      	cbz	r0, 80041c2 <_vfiprintf_r+0x13a>
 8004194:	9207      	str	r2, [sp, #28]
 8004196:	e014      	b.n	80041c2 <_vfiprintf_r+0x13a>
 8004198:	eba0 0308 	sub.w	r3, r0, r8
 800419c:	fa09 f303 	lsl.w	r3, r9, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	46a2      	mov	sl, r4
 80041a6:	e7d2      	b.n	800414e <_vfiprintf_r+0xc6>
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	9103      	str	r1, [sp, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bfbb      	ittet	lt
 80041b4:	425b      	neglt	r3, r3
 80041b6:	f042 0202 	orrlt.w	r2, r2, #2
 80041ba:	9307      	strge	r3, [sp, #28]
 80041bc:	9307      	strlt	r3, [sp, #28]
 80041be:	bfb8      	it	lt
 80041c0:	9204      	strlt	r2, [sp, #16]
 80041c2:	7823      	ldrb	r3, [r4, #0]
 80041c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c6:	d10a      	bne.n	80041de <_vfiprintf_r+0x156>
 80041c8:	7863      	ldrb	r3, [r4, #1]
 80041ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80041cc:	d132      	bne.n	8004234 <_vfiprintf_r+0x1ac>
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9203      	str	r2, [sp, #12]
 80041d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041da:	3402      	adds	r4, #2
 80041dc:	9305      	str	r3, [sp, #20]
 80041de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80042b4 <_vfiprintf_r+0x22c>
 80041e2:	7821      	ldrb	r1, [r4, #0]
 80041e4:	2203      	movs	r2, #3
 80041e6:	4650      	mov	r0, sl
 80041e8:	f7fb fffa 	bl	80001e0 <memchr>
 80041ec:	b138      	cbz	r0, 80041fe <_vfiprintf_r+0x176>
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	eba0 000a 	sub.w	r0, r0, sl
 80041f4:	2240      	movs	r2, #64	@ 0x40
 80041f6:	4082      	lsls	r2, r0
 80041f8:	4313      	orrs	r3, r2
 80041fa:	3401      	adds	r4, #1
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004202:	4829      	ldr	r0, [pc, #164]	@ (80042a8 <_vfiprintf_r+0x220>)
 8004204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004208:	2206      	movs	r2, #6
 800420a:	f7fb ffe9 	bl	80001e0 <memchr>
 800420e:	2800      	cmp	r0, #0
 8004210:	d03f      	beq.n	8004292 <_vfiprintf_r+0x20a>
 8004212:	4b26      	ldr	r3, [pc, #152]	@ (80042ac <_vfiprintf_r+0x224>)
 8004214:	bb1b      	cbnz	r3, 800425e <_vfiprintf_r+0x1d6>
 8004216:	9b03      	ldr	r3, [sp, #12]
 8004218:	3307      	adds	r3, #7
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	3308      	adds	r3, #8
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004224:	443b      	add	r3, r7
 8004226:	9309      	str	r3, [sp, #36]	@ 0x24
 8004228:	e76a      	b.n	8004100 <_vfiprintf_r+0x78>
 800422a:	fb0c 3202 	mla	r2, ip, r2, r3
 800422e:	460c      	mov	r4, r1
 8004230:	2001      	movs	r0, #1
 8004232:	e7a8      	b.n	8004186 <_vfiprintf_r+0xfe>
 8004234:	2300      	movs	r3, #0
 8004236:	3401      	adds	r4, #1
 8004238:	9305      	str	r3, [sp, #20]
 800423a:	4619      	mov	r1, r3
 800423c:	f04f 0c0a 	mov.w	ip, #10
 8004240:	4620      	mov	r0, r4
 8004242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004246:	3a30      	subs	r2, #48	@ 0x30
 8004248:	2a09      	cmp	r2, #9
 800424a:	d903      	bls.n	8004254 <_vfiprintf_r+0x1cc>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0c6      	beq.n	80041de <_vfiprintf_r+0x156>
 8004250:	9105      	str	r1, [sp, #20]
 8004252:	e7c4      	b.n	80041de <_vfiprintf_r+0x156>
 8004254:	fb0c 2101 	mla	r1, ip, r1, r2
 8004258:	4604      	mov	r4, r0
 800425a:	2301      	movs	r3, #1
 800425c:	e7f0      	b.n	8004240 <_vfiprintf_r+0x1b8>
 800425e:	ab03      	add	r3, sp, #12
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	462a      	mov	r2, r5
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <_vfiprintf_r+0x228>)
 8004266:	a904      	add	r1, sp, #16
 8004268:	4630      	mov	r0, r6
 800426a:	f3af 8000 	nop.w
 800426e:	4607      	mov	r7, r0
 8004270:	1c78      	adds	r0, r7, #1
 8004272:	d1d6      	bne.n	8004222 <_vfiprintf_r+0x19a>
 8004274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004276:	07d9      	lsls	r1, r3, #31
 8004278:	d405      	bmi.n	8004286 <_vfiprintf_r+0x1fe>
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	059a      	lsls	r2, r3, #22
 800427e:	d402      	bmi.n	8004286 <_vfiprintf_r+0x1fe>
 8004280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004282:	f7ff fc85 	bl	8003b90 <__retarget_lock_release_recursive>
 8004286:	89ab      	ldrh	r3, [r5, #12]
 8004288:	065b      	lsls	r3, r3, #25
 800428a:	f53f af1f 	bmi.w	80040cc <_vfiprintf_r+0x44>
 800428e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004290:	e71e      	b.n	80040d0 <_vfiprintf_r+0x48>
 8004292:	ab03      	add	r3, sp, #12
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	462a      	mov	r2, r5
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <_vfiprintf_r+0x228>)
 800429a:	a904      	add	r1, sp, #16
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f879 	bl	8004394 <_printf_i>
 80042a2:	e7e4      	b.n	800426e <_vfiprintf_r+0x1e6>
 80042a4:	08004aa4 	.word	0x08004aa4
 80042a8:	08004aae 	.word	0x08004aae
 80042ac:	00000000 	.word	0x00000000
 80042b0:	08004063 	.word	0x08004063
 80042b4:	08004aaa 	.word	0x08004aaa

080042b8 <_printf_common>:
 80042b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	4616      	mov	r6, r2
 80042be:	4698      	mov	r8, r3
 80042c0:	688a      	ldr	r2, [r1, #8]
 80042c2:	690b      	ldr	r3, [r1, #16]
 80042c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bfb8      	it	lt
 80042cc:	4613      	movlt	r3, r2
 80042ce:	6033      	str	r3, [r6, #0]
 80042d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042d4:	4607      	mov	r7, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	b10a      	cbz	r2, 80042de <_printf_common+0x26>
 80042da:	3301      	adds	r3, #1
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	0699      	lsls	r1, r3, #26
 80042e2:	bf42      	ittt	mi
 80042e4:	6833      	ldrmi	r3, [r6, #0]
 80042e6:	3302      	addmi	r3, #2
 80042e8:	6033      	strmi	r3, [r6, #0]
 80042ea:	6825      	ldr	r5, [r4, #0]
 80042ec:	f015 0506 	ands.w	r5, r5, #6
 80042f0:	d106      	bne.n	8004300 <_printf_common+0x48>
 80042f2:	f104 0a19 	add.w	sl, r4, #25
 80042f6:	68e3      	ldr	r3, [r4, #12]
 80042f8:	6832      	ldr	r2, [r6, #0]
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	42ab      	cmp	r3, r5
 80042fe:	dc26      	bgt.n	800434e <_printf_common+0x96>
 8004300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	3b00      	subs	r3, #0
 8004308:	bf18      	it	ne
 800430a:	2301      	movne	r3, #1
 800430c:	0692      	lsls	r2, r2, #26
 800430e:	d42b      	bmi.n	8004368 <_printf_common+0xb0>
 8004310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004314:	4641      	mov	r1, r8
 8004316:	4638      	mov	r0, r7
 8004318:	47c8      	blx	r9
 800431a:	3001      	adds	r0, #1
 800431c:	d01e      	beq.n	800435c <_printf_common+0xa4>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	6922      	ldr	r2, [r4, #16]
 8004322:	f003 0306 	and.w	r3, r3, #6
 8004326:	2b04      	cmp	r3, #4
 8004328:	bf02      	ittt	eq
 800432a:	68e5      	ldreq	r5, [r4, #12]
 800432c:	6833      	ldreq	r3, [r6, #0]
 800432e:	1aed      	subeq	r5, r5, r3
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	bf0c      	ite	eq
 8004334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004338:	2500      	movne	r5, #0
 800433a:	4293      	cmp	r3, r2
 800433c:	bfc4      	itt	gt
 800433e:	1a9b      	subgt	r3, r3, r2
 8004340:	18ed      	addgt	r5, r5, r3
 8004342:	2600      	movs	r6, #0
 8004344:	341a      	adds	r4, #26
 8004346:	42b5      	cmp	r5, r6
 8004348:	d11a      	bne.n	8004380 <_printf_common+0xc8>
 800434a:	2000      	movs	r0, #0
 800434c:	e008      	b.n	8004360 <_printf_common+0xa8>
 800434e:	2301      	movs	r3, #1
 8004350:	4652      	mov	r2, sl
 8004352:	4641      	mov	r1, r8
 8004354:	4638      	mov	r0, r7
 8004356:	47c8      	blx	r9
 8004358:	3001      	adds	r0, #1
 800435a:	d103      	bne.n	8004364 <_printf_common+0xac>
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	3501      	adds	r5, #1
 8004366:	e7c6      	b.n	80042f6 <_printf_common+0x3e>
 8004368:	18e1      	adds	r1, r4, r3
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	2030      	movs	r0, #48	@ 0x30
 800436e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004372:	4422      	add	r2, r4
 8004374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800437c:	3302      	adds	r3, #2
 800437e:	e7c7      	b.n	8004310 <_printf_common+0x58>
 8004380:	2301      	movs	r3, #1
 8004382:	4622      	mov	r2, r4
 8004384:	4641      	mov	r1, r8
 8004386:	4638      	mov	r0, r7
 8004388:	47c8      	blx	r9
 800438a:	3001      	adds	r0, #1
 800438c:	d0e6      	beq.n	800435c <_printf_common+0xa4>
 800438e:	3601      	adds	r6, #1
 8004390:	e7d9      	b.n	8004346 <_printf_common+0x8e>
	...

08004394 <_printf_i>:
 8004394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004398:	7e0f      	ldrb	r7, [r1, #24]
 800439a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800439c:	2f78      	cmp	r7, #120	@ 0x78
 800439e:	4691      	mov	r9, r2
 80043a0:	4680      	mov	r8, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	469a      	mov	sl, r3
 80043a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043aa:	d807      	bhi.n	80043bc <_printf_i+0x28>
 80043ac:	2f62      	cmp	r7, #98	@ 0x62
 80043ae:	d80a      	bhi.n	80043c6 <_printf_i+0x32>
 80043b0:	2f00      	cmp	r7, #0
 80043b2:	f000 80d1 	beq.w	8004558 <_printf_i+0x1c4>
 80043b6:	2f58      	cmp	r7, #88	@ 0x58
 80043b8:	f000 80b8 	beq.w	800452c <_printf_i+0x198>
 80043bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043c4:	e03a      	b.n	800443c <_printf_i+0xa8>
 80043c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ca:	2b15      	cmp	r3, #21
 80043cc:	d8f6      	bhi.n	80043bc <_printf_i+0x28>
 80043ce:	a101      	add	r1, pc, #4	@ (adr r1, 80043d4 <_printf_i+0x40>)
 80043d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d4:	0800442d 	.word	0x0800442d
 80043d8:	08004441 	.word	0x08004441
 80043dc:	080043bd 	.word	0x080043bd
 80043e0:	080043bd 	.word	0x080043bd
 80043e4:	080043bd 	.word	0x080043bd
 80043e8:	080043bd 	.word	0x080043bd
 80043ec:	08004441 	.word	0x08004441
 80043f0:	080043bd 	.word	0x080043bd
 80043f4:	080043bd 	.word	0x080043bd
 80043f8:	080043bd 	.word	0x080043bd
 80043fc:	080043bd 	.word	0x080043bd
 8004400:	0800453f 	.word	0x0800453f
 8004404:	0800446b 	.word	0x0800446b
 8004408:	080044f9 	.word	0x080044f9
 800440c:	080043bd 	.word	0x080043bd
 8004410:	080043bd 	.word	0x080043bd
 8004414:	08004561 	.word	0x08004561
 8004418:	080043bd 	.word	0x080043bd
 800441c:	0800446b 	.word	0x0800446b
 8004420:	080043bd 	.word	0x080043bd
 8004424:	080043bd 	.word	0x080043bd
 8004428:	08004501 	.word	0x08004501
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6032      	str	r2, [r6, #0]
 8004434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800443c:	2301      	movs	r3, #1
 800443e:	e09c      	b.n	800457a <_printf_i+0x1e6>
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	1d19      	adds	r1, r3, #4
 8004446:	6031      	str	r1, [r6, #0]
 8004448:	0606      	lsls	r6, r0, #24
 800444a:	d501      	bpl.n	8004450 <_printf_i+0xbc>
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	e003      	b.n	8004458 <_printf_i+0xc4>
 8004450:	0645      	lsls	r5, r0, #25
 8004452:	d5fb      	bpl.n	800444c <_printf_i+0xb8>
 8004454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004458:	2d00      	cmp	r5, #0
 800445a:	da03      	bge.n	8004464 <_printf_i+0xd0>
 800445c:	232d      	movs	r3, #45	@ 0x2d
 800445e:	426d      	negs	r5, r5
 8004460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004464:	4858      	ldr	r0, [pc, #352]	@ (80045c8 <_printf_i+0x234>)
 8004466:	230a      	movs	r3, #10
 8004468:	e011      	b.n	800448e <_printf_i+0xfa>
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	0608      	lsls	r0, r1, #24
 8004470:	f853 5b04 	ldr.w	r5, [r3], #4
 8004474:	d402      	bmi.n	800447c <_printf_i+0xe8>
 8004476:	0649      	lsls	r1, r1, #25
 8004478:	bf48      	it	mi
 800447a:	b2ad      	uxthmi	r5, r5
 800447c:	2f6f      	cmp	r7, #111	@ 0x6f
 800447e:	4852      	ldr	r0, [pc, #328]	@ (80045c8 <_printf_i+0x234>)
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	bf14      	ite	ne
 8004484:	230a      	movne	r3, #10
 8004486:	2308      	moveq	r3, #8
 8004488:	2100      	movs	r1, #0
 800448a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800448e:	6866      	ldr	r6, [r4, #4]
 8004490:	60a6      	str	r6, [r4, #8]
 8004492:	2e00      	cmp	r6, #0
 8004494:	db05      	blt.n	80044a2 <_printf_i+0x10e>
 8004496:	6821      	ldr	r1, [r4, #0]
 8004498:	432e      	orrs	r6, r5
 800449a:	f021 0104 	bic.w	r1, r1, #4
 800449e:	6021      	str	r1, [r4, #0]
 80044a0:	d04b      	beq.n	800453a <_printf_i+0x1a6>
 80044a2:	4616      	mov	r6, r2
 80044a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044a8:	fb03 5711 	mls	r7, r3, r1, r5
 80044ac:	5dc7      	ldrb	r7, [r0, r7]
 80044ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044b2:	462f      	mov	r7, r5
 80044b4:	42bb      	cmp	r3, r7
 80044b6:	460d      	mov	r5, r1
 80044b8:	d9f4      	bls.n	80044a4 <_printf_i+0x110>
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d10b      	bne.n	80044d6 <_printf_i+0x142>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	07df      	lsls	r7, r3, #31
 80044c2:	d508      	bpl.n	80044d6 <_printf_i+0x142>
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	6861      	ldr	r1, [r4, #4]
 80044c8:	4299      	cmp	r1, r3
 80044ca:	bfde      	ittt	le
 80044cc:	2330      	movle	r3, #48	@ 0x30
 80044ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044d6:	1b92      	subs	r2, r2, r6
 80044d8:	6122      	str	r2, [r4, #16]
 80044da:	f8cd a000 	str.w	sl, [sp]
 80044de:	464b      	mov	r3, r9
 80044e0:	aa03      	add	r2, sp, #12
 80044e2:	4621      	mov	r1, r4
 80044e4:	4640      	mov	r0, r8
 80044e6:	f7ff fee7 	bl	80042b8 <_printf_common>
 80044ea:	3001      	adds	r0, #1
 80044ec:	d14a      	bne.n	8004584 <_printf_i+0x1f0>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	b004      	add	sp, #16
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f043 0320 	orr.w	r3, r3, #32
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	4832      	ldr	r0, [pc, #200]	@ (80045cc <_printf_i+0x238>)
 8004502:	2778      	movs	r7, #120	@ 0x78
 8004504:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	061f      	lsls	r7, r3, #24
 800450e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004512:	d402      	bmi.n	800451a <_printf_i+0x186>
 8004514:	065f      	lsls	r7, r3, #25
 8004516:	bf48      	it	mi
 8004518:	b2ad      	uxthmi	r5, r5
 800451a:	6031      	str	r1, [r6, #0]
 800451c:	07d9      	lsls	r1, r3, #31
 800451e:	bf44      	itt	mi
 8004520:	f043 0320 	orrmi.w	r3, r3, #32
 8004524:	6023      	strmi	r3, [r4, #0]
 8004526:	b11d      	cbz	r5, 8004530 <_printf_i+0x19c>
 8004528:	2310      	movs	r3, #16
 800452a:	e7ad      	b.n	8004488 <_printf_i+0xf4>
 800452c:	4826      	ldr	r0, [pc, #152]	@ (80045c8 <_printf_i+0x234>)
 800452e:	e7e9      	b.n	8004504 <_printf_i+0x170>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	e7f6      	b.n	8004528 <_printf_i+0x194>
 800453a:	4616      	mov	r6, r2
 800453c:	e7bd      	b.n	80044ba <_printf_i+0x126>
 800453e:	6833      	ldr	r3, [r6, #0]
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	6961      	ldr	r1, [r4, #20]
 8004544:	1d18      	adds	r0, r3, #4
 8004546:	6030      	str	r0, [r6, #0]
 8004548:	062e      	lsls	r6, r5, #24
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	d501      	bpl.n	8004552 <_printf_i+0x1be>
 800454e:	6019      	str	r1, [r3, #0]
 8004550:	e002      	b.n	8004558 <_printf_i+0x1c4>
 8004552:	0668      	lsls	r0, r5, #25
 8004554:	d5fb      	bpl.n	800454e <_printf_i+0x1ba>
 8004556:	8019      	strh	r1, [r3, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	6123      	str	r3, [r4, #16]
 800455c:	4616      	mov	r6, r2
 800455e:	e7bc      	b.n	80044da <_printf_i+0x146>
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	6032      	str	r2, [r6, #0]
 8004566:	681e      	ldr	r6, [r3, #0]
 8004568:	6862      	ldr	r2, [r4, #4]
 800456a:	2100      	movs	r1, #0
 800456c:	4630      	mov	r0, r6
 800456e:	f7fb fe37 	bl	80001e0 <memchr>
 8004572:	b108      	cbz	r0, 8004578 <_printf_i+0x1e4>
 8004574:	1b80      	subs	r0, r0, r6
 8004576:	6060      	str	r0, [r4, #4]
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	6123      	str	r3, [r4, #16]
 800457c:	2300      	movs	r3, #0
 800457e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004582:	e7aa      	b.n	80044da <_printf_i+0x146>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	4632      	mov	r2, r6
 8004588:	4649      	mov	r1, r9
 800458a:	4640      	mov	r0, r8
 800458c:	47d0      	blx	sl
 800458e:	3001      	adds	r0, #1
 8004590:	d0ad      	beq.n	80044ee <_printf_i+0x15a>
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	079b      	lsls	r3, r3, #30
 8004596:	d413      	bmi.n	80045c0 <_printf_i+0x22c>
 8004598:	68e0      	ldr	r0, [r4, #12]
 800459a:	9b03      	ldr	r3, [sp, #12]
 800459c:	4298      	cmp	r0, r3
 800459e:	bfb8      	it	lt
 80045a0:	4618      	movlt	r0, r3
 80045a2:	e7a6      	b.n	80044f2 <_printf_i+0x15e>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4632      	mov	r2, r6
 80045a8:	4649      	mov	r1, r9
 80045aa:	4640      	mov	r0, r8
 80045ac:	47d0      	blx	sl
 80045ae:	3001      	adds	r0, #1
 80045b0:	d09d      	beq.n	80044ee <_printf_i+0x15a>
 80045b2:	3501      	adds	r5, #1
 80045b4:	68e3      	ldr	r3, [r4, #12]
 80045b6:	9903      	ldr	r1, [sp, #12]
 80045b8:	1a5b      	subs	r3, r3, r1
 80045ba:	42ab      	cmp	r3, r5
 80045bc:	dcf2      	bgt.n	80045a4 <_printf_i+0x210>
 80045be:	e7eb      	b.n	8004598 <_printf_i+0x204>
 80045c0:	2500      	movs	r5, #0
 80045c2:	f104 0619 	add.w	r6, r4, #25
 80045c6:	e7f5      	b.n	80045b4 <_printf_i+0x220>
 80045c8:	08004ab5 	.word	0x08004ab5
 80045cc:	08004ac6 	.word	0x08004ac6

080045d0 <__sflush_r>:
 80045d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	0716      	lsls	r6, r2, #28
 80045da:	4605      	mov	r5, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	d454      	bmi.n	800468a <__sflush_r+0xba>
 80045e0:	684b      	ldr	r3, [r1, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dc02      	bgt.n	80045ec <__sflush_r+0x1c>
 80045e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dd48      	ble.n	800467e <__sflush_r+0xae>
 80045ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	d045      	beq.n	800467e <__sflush_r+0xae>
 80045f2:	2300      	movs	r3, #0
 80045f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045f8:	682f      	ldr	r7, [r5, #0]
 80045fa:	6a21      	ldr	r1, [r4, #32]
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	d030      	beq.n	8004662 <__sflush_r+0x92>
 8004600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	0759      	lsls	r1, r3, #29
 8004606:	d505      	bpl.n	8004614 <__sflush_r+0x44>
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800460e:	b10b      	cbz	r3, 8004614 <__sflush_r+0x44>
 8004610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004612:	1ad2      	subs	r2, r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004618:	6a21      	ldr	r1, [r4, #32]
 800461a:	4628      	mov	r0, r5
 800461c:	47b0      	blx	r6
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	d106      	bne.n	8004632 <__sflush_r+0x62>
 8004624:	6829      	ldr	r1, [r5, #0]
 8004626:	291d      	cmp	r1, #29
 8004628:	d82b      	bhi.n	8004682 <__sflush_r+0xb2>
 800462a:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <__sflush_r+0x104>)
 800462c:	40ca      	lsrs	r2, r1
 800462e:	07d6      	lsls	r6, r2, #31
 8004630:	d527      	bpl.n	8004682 <__sflush_r+0xb2>
 8004632:	2200      	movs	r2, #0
 8004634:	6062      	str	r2, [r4, #4]
 8004636:	04d9      	lsls	r1, r3, #19
 8004638:	6922      	ldr	r2, [r4, #16]
 800463a:	6022      	str	r2, [r4, #0]
 800463c:	d504      	bpl.n	8004648 <__sflush_r+0x78>
 800463e:	1c42      	adds	r2, r0, #1
 8004640:	d101      	bne.n	8004646 <__sflush_r+0x76>
 8004642:	682b      	ldr	r3, [r5, #0]
 8004644:	b903      	cbnz	r3, 8004648 <__sflush_r+0x78>
 8004646:	6560      	str	r0, [r4, #84]	@ 0x54
 8004648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800464a:	602f      	str	r7, [r5, #0]
 800464c:	b1b9      	cbz	r1, 800467e <__sflush_r+0xae>
 800464e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004652:	4299      	cmp	r1, r3
 8004654:	d002      	beq.n	800465c <__sflush_r+0x8c>
 8004656:	4628      	mov	r0, r5
 8004658:	f7ff fa9c 	bl	8003b94 <_free_r>
 800465c:	2300      	movs	r3, #0
 800465e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004660:	e00d      	b.n	800467e <__sflush_r+0xae>
 8004662:	2301      	movs	r3, #1
 8004664:	4628      	mov	r0, r5
 8004666:	47b0      	blx	r6
 8004668:	4602      	mov	r2, r0
 800466a:	1c50      	adds	r0, r2, #1
 800466c:	d1c9      	bne.n	8004602 <__sflush_r+0x32>
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0c6      	beq.n	8004602 <__sflush_r+0x32>
 8004674:	2b1d      	cmp	r3, #29
 8004676:	d001      	beq.n	800467c <__sflush_r+0xac>
 8004678:	2b16      	cmp	r3, #22
 800467a:	d11e      	bne.n	80046ba <__sflush_r+0xea>
 800467c:	602f      	str	r7, [r5, #0]
 800467e:	2000      	movs	r0, #0
 8004680:	e022      	b.n	80046c8 <__sflush_r+0xf8>
 8004682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004686:	b21b      	sxth	r3, r3
 8004688:	e01b      	b.n	80046c2 <__sflush_r+0xf2>
 800468a:	690f      	ldr	r7, [r1, #16]
 800468c:	2f00      	cmp	r7, #0
 800468e:	d0f6      	beq.n	800467e <__sflush_r+0xae>
 8004690:	0793      	lsls	r3, r2, #30
 8004692:	680e      	ldr	r6, [r1, #0]
 8004694:	bf08      	it	eq
 8004696:	694b      	ldreq	r3, [r1, #20]
 8004698:	600f      	str	r7, [r1, #0]
 800469a:	bf18      	it	ne
 800469c:	2300      	movne	r3, #0
 800469e:	eba6 0807 	sub.w	r8, r6, r7
 80046a2:	608b      	str	r3, [r1, #8]
 80046a4:	f1b8 0f00 	cmp.w	r8, #0
 80046a8:	dde9      	ble.n	800467e <__sflush_r+0xae>
 80046aa:	6a21      	ldr	r1, [r4, #32]
 80046ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046ae:	4643      	mov	r3, r8
 80046b0:	463a      	mov	r2, r7
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b0      	blx	r6
 80046b6:	2800      	cmp	r0, #0
 80046b8:	dc08      	bgt.n	80046cc <__sflush_r+0xfc>
 80046ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046cc:	4407      	add	r7, r0
 80046ce:	eba8 0800 	sub.w	r8, r8, r0
 80046d2:	e7e7      	b.n	80046a4 <__sflush_r+0xd4>
 80046d4:	20400001 	.word	0x20400001

080046d8 <_fflush_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	4605      	mov	r5, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b913      	cbnz	r3, 80046e8 <_fflush_r+0x10>
 80046e2:	2500      	movs	r5, #0
 80046e4:	4628      	mov	r0, r5
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	b118      	cbz	r0, 80046f2 <_fflush_r+0x1a>
 80046ea:	6a03      	ldr	r3, [r0, #32]
 80046ec:	b90b      	cbnz	r3, 80046f2 <_fflush_r+0x1a>
 80046ee:	f7ff f913 	bl	8003918 <__sinit>
 80046f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f3      	beq.n	80046e2 <_fflush_r+0xa>
 80046fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046fc:	07d0      	lsls	r0, r2, #31
 80046fe:	d404      	bmi.n	800470a <_fflush_r+0x32>
 8004700:	0599      	lsls	r1, r3, #22
 8004702:	d402      	bmi.n	800470a <_fflush_r+0x32>
 8004704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004706:	f7ff fa42 	bl	8003b8e <__retarget_lock_acquire_recursive>
 800470a:	4628      	mov	r0, r5
 800470c:	4621      	mov	r1, r4
 800470e:	f7ff ff5f 	bl	80045d0 <__sflush_r>
 8004712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004714:	07da      	lsls	r2, r3, #31
 8004716:	4605      	mov	r5, r0
 8004718:	d4e4      	bmi.n	80046e4 <_fflush_r+0xc>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	059b      	lsls	r3, r3, #22
 800471e:	d4e1      	bmi.n	80046e4 <_fflush_r+0xc>
 8004720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004722:	f7ff fa35 	bl	8003b90 <__retarget_lock_release_recursive>
 8004726:	e7dd      	b.n	80046e4 <_fflush_r+0xc>

08004728 <__swbuf_r>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	460e      	mov	r6, r1
 800472c:	4614      	mov	r4, r2
 800472e:	4605      	mov	r5, r0
 8004730:	b118      	cbz	r0, 800473a <__swbuf_r+0x12>
 8004732:	6a03      	ldr	r3, [r0, #32]
 8004734:	b90b      	cbnz	r3, 800473a <__swbuf_r+0x12>
 8004736:	f7ff f8ef 	bl	8003918 <__sinit>
 800473a:	69a3      	ldr	r3, [r4, #24]
 800473c:	60a3      	str	r3, [r4, #8]
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	071a      	lsls	r2, r3, #28
 8004742:	d501      	bpl.n	8004748 <__swbuf_r+0x20>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	b943      	cbnz	r3, 800475a <__swbuf_r+0x32>
 8004748:	4621      	mov	r1, r4
 800474a:	4628      	mov	r0, r5
 800474c:	f000 f82a 	bl	80047a4 <__swsetup_r>
 8004750:	b118      	cbz	r0, 800475a <__swbuf_r+0x32>
 8004752:	f04f 37ff 	mov.w	r7, #4294967295
 8004756:	4638      	mov	r0, r7
 8004758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	6922      	ldr	r2, [r4, #16]
 800475e:	1a98      	subs	r0, r3, r2
 8004760:	6963      	ldr	r3, [r4, #20]
 8004762:	b2f6      	uxtb	r6, r6
 8004764:	4283      	cmp	r3, r0
 8004766:	4637      	mov	r7, r6
 8004768:	dc05      	bgt.n	8004776 <__swbuf_r+0x4e>
 800476a:	4621      	mov	r1, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff ffb3 	bl	80046d8 <_fflush_r>
 8004772:	2800      	cmp	r0, #0
 8004774:	d1ed      	bne.n	8004752 <__swbuf_r+0x2a>
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	60a3      	str	r3, [r4, #8]
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	6022      	str	r2, [r4, #0]
 8004782:	701e      	strb	r6, [r3, #0]
 8004784:	6962      	ldr	r2, [r4, #20]
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	429a      	cmp	r2, r3
 800478a:	d004      	beq.n	8004796 <__swbuf_r+0x6e>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	07db      	lsls	r3, r3, #31
 8004790:	d5e1      	bpl.n	8004756 <__swbuf_r+0x2e>
 8004792:	2e0a      	cmp	r6, #10
 8004794:	d1df      	bne.n	8004756 <__swbuf_r+0x2e>
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f7ff ff9d 	bl	80046d8 <_fflush_r>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d0d9      	beq.n	8004756 <__swbuf_r+0x2e>
 80047a2:	e7d6      	b.n	8004752 <__swbuf_r+0x2a>

080047a4 <__swsetup_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4b29      	ldr	r3, [pc, #164]	@ (800484c <__swsetup_r+0xa8>)
 80047a8:	4605      	mov	r5, r0
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	460c      	mov	r4, r1
 80047ae:	b118      	cbz	r0, 80047b8 <__swsetup_r+0x14>
 80047b0:	6a03      	ldr	r3, [r0, #32]
 80047b2:	b90b      	cbnz	r3, 80047b8 <__swsetup_r+0x14>
 80047b4:	f7ff f8b0 	bl	8003918 <__sinit>
 80047b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047bc:	0719      	lsls	r1, r3, #28
 80047be:	d422      	bmi.n	8004806 <__swsetup_r+0x62>
 80047c0:	06da      	lsls	r2, r3, #27
 80047c2:	d407      	bmi.n	80047d4 <__swsetup_r+0x30>
 80047c4:	2209      	movs	r2, #9
 80047c6:	602a      	str	r2, [r5, #0]
 80047c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	e033      	b.n	800483c <__swsetup_r+0x98>
 80047d4:	0758      	lsls	r0, r3, #29
 80047d6:	d512      	bpl.n	80047fe <__swsetup_r+0x5a>
 80047d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047da:	b141      	cbz	r1, 80047ee <__swsetup_r+0x4a>
 80047dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d002      	beq.n	80047ea <__swsetup_r+0x46>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f7ff f9d5 	bl	8003b94 <_free_r>
 80047ea:	2300      	movs	r3, #0
 80047ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047f4:	81a3      	strh	r3, [r4, #12]
 80047f6:	2300      	movs	r3, #0
 80047f8:	6063      	str	r3, [r4, #4]
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f043 0308 	orr.w	r3, r3, #8
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	b94b      	cbnz	r3, 800481e <__swsetup_r+0x7a>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004814:	d003      	beq.n	800481e <__swsetup_r+0x7a>
 8004816:	4621      	mov	r1, r4
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f8a5 	bl	8004968 <__smakebuf_r>
 800481e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004822:	f013 0201 	ands.w	r2, r3, #1
 8004826:	d00a      	beq.n	800483e <__swsetup_r+0x9a>
 8004828:	2200      	movs	r2, #0
 800482a:	60a2      	str	r2, [r4, #8]
 800482c:	6962      	ldr	r2, [r4, #20]
 800482e:	4252      	negs	r2, r2
 8004830:	61a2      	str	r2, [r4, #24]
 8004832:	6922      	ldr	r2, [r4, #16]
 8004834:	b942      	cbnz	r2, 8004848 <__swsetup_r+0xa4>
 8004836:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800483a:	d1c5      	bne.n	80047c8 <__swsetup_r+0x24>
 800483c:	bd38      	pop	{r3, r4, r5, pc}
 800483e:	0799      	lsls	r1, r3, #30
 8004840:	bf58      	it	pl
 8004842:	6962      	ldrpl	r2, [r4, #20]
 8004844:	60a2      	str	r2, [r4, #8]
 8004846:	e7f4      	b.n	8004832 <__swsetup_r+0x8e>
 8004848:	2000      	movs	r0, #0
 800484a:	e7f7      	b.n	800483c <__swsetup_r+0x98>
 800484c:	20000018 	.word	0x20000018

08004850 <memmove>:
 8004850:	4288      	cmp	r0, r1
 8004852:	b510      	push	{r4, lr}
 8004854:	eb01 0402 	add.w	r4, r1, r2
 8004858:	d902      	bls.n	8004860 <memmove+0x10>
 800485a:	4284      	cmp	r4, r0
 800485c:	4623      	mov	r3, r4
 800485e:	d807      	bhi.n	8004870 <memmove+0x20>
 8004860:	1e43      	subs	r3, r0, #1
 8004862:	42a1      	cmp	r1, r4
 8004864:	d008      	beq.n	8004878 <memmove+0x28>
 8004866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800486e:	e7f8      	b.n	8004862 <memmove+0x12>
 8004870:	4402      	add	r2, r0
 8004872:	4601      	mov	r1, r0
 8004874:	428a      	cmp	r2, r1
 8004876:	d100      	bne.n	800487a <memmove+0x2a>
 8004878:	bd10      	pop	{r4, pc}
 800487a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800487e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004882:	e7f7      	b.n	8004874 <memmove+0x24>

08004884 <_sbrk_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4d06      	ldr	r5, [pc, #24]	@ (80048a0 <_sbrk_r+0x1c>)
 8004888:	2300      	movs	r3, #0
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	602b      	str	r3, [r5, #0]
 8004890:	f7fc f8bc 	bl	8000a0c <_sbrk>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_sbrk_r+0x1a>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_sbrk_r+0x1a>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	200005e0 	.word	0x200005e0

080048a4 <memcpy>:
 80048a4:	440a      	add	r2, r1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048ac:	d100      	bne.n	80048b0 <memcpy+0xc>
 80048ae:	4770      	bx	lr
 80048b0:	b510      	push	{r4, lr}
 80048b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d1f9      	bne.n	80048b2 <memcpy+0xe>
 80048be:	bd10      	pop	{r4, pc}

080048c0 <_realloc_r>:
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	4607      	mov	r7, r0
 80048c6:	4614      	mov	r4, r2
 80048c8:	460d      	mov	r5, r1
 80048ca:	b921      	cbnz	r1, 80048d6 <_realloc_r+0x16>
 80048cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	4611      	mov	r1, r2
 80048d2:	f7ff b9cb 	b.w	8003c6c <_malloc_r>
 80048d6:	b92a      	cbnz	r2, 80048e4 <_realloc_r+0x24>
 80048d8:	f7ff f95c 	bl	8003b94 <_free_r>
 80048dc:	4625      	mov	r5, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e4:	f000 f89e 	bl	8004a24 <_malloc_usable_size_r>
 80048e8:	4284      	cmp	r4, r0
 80048ea:	4606      	mov	r6, r0
 80048ec:	d802      	bhi.n	80048f4 <_realloc_r+0x34>
 80048ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048f2:	d8f4      	bhi.n	80048de <_realloc_r+0x1e>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff f9b8 	bl	8003c6c <_malloc_r>
 80048fc:	4680      	mov	r8, r0
 80048fe:	b908      	cbnz	r0, 8004904 <_realloc_r+0x44>
 8004900:	4645      	mov	r5, r8
 8004902:	e7ec      	b.n	80048de <_realloc_r+0x1e>
 8004904:	42b4      	cmp	r4, r6
 8004906:	4622      	mov	r2, r4
 8004908:	4629      	mov	r1, r5
 800490a:	bf28      	it	cs
 800490c:	4632      	movcs	r2, r6
 800490e:	f7ff ffc9 	bl	80048a4 <memcpy>
 8004912:	4629      	mov	r1, r5
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff f93d 	bl	8003b94 <_free_r>
 800491a:	e7f1      	b.n	8004900 <_realloc_r+0x40>

0800491c <__swhatbuf_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	460c      	mov	r4, r1
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2900      	cmp	r1, #0
 8004926:	b096      	sub	sp, #88	@ 0x58
 8004928:	4615      	mov	r5, r2
 800492a:	461e      	mov	r6, r3
 800492c:	da0d      	bge.n	800494a <__swhatbuf_r+0x2e>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	bf14      	ite	ne
 800493a:	2340      	movne	r3, #64	@ 0x40
 800493c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004940:	2000      	movs	r0, #0
 8004942:	6031      	str	r1, [r6, #0]
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	b016      	add	sp, #88	@ 0x58
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	466a      	mov	r2, sp
 800494c:	f000 f848 	bl	80049e0 <_fstat_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	dbec      	blt.n	800492e <__swhatbuf_r+0x12>
 8004954:	9901      	ldr	r1, [sp, #4]
 8004956:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800495a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800495e:	4259      	negs	r1, r3
 8004960:	4159      	adcs	r1, r3
 8004962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004966:	e7eb      	b.n	8004940 <__swhatbuf_r+0x24>

08004968 <__smakebuf_r>:
 8004968:	898b      	ldrh	r3, [r1, #12]
 800496a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496c:	079d      	lsls	r5, r3, #30
 800496e:	4606      	mov	r6, r0
 8004970:	460c      	mov	r4, r1
 8004972:	d507      	bpl.n	8004984 <__smakebuf_r+0x1c>
 8004974:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2301      	movs	r3, #1
 800497e:	6163      	str	r3, [r4, #20]
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004984:	ab01      	add	r3, sp, #4
 8004986:	466a      	mov	r2, sp
 8004988:	f7ff ffc8 	bl	800491c <__swhatbuf_r>
 800498c:	9f00      	ldr	r7, [sp, #0]
 800498e:	4605      	mov	r5, r0
 8004990:	4639      	mov	r1, r7
 8004992:	4630      	mov	r0, r6
 8004994:	f7ff f96a 	bl	8003c6c <_malloc_r>
 8004998:	b948      	cbnz	r0, 80049ae <__smakebuf_r+0x46>
 800499a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499e:	059a      	lsls	r2, r3, #22
 80049a0:	d4ee      	bmi.n	8004980 <__smakebuf_r+0x18>
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	e7e2      	b.n	8004974 <__smakebuf_r+0xc>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	6020      	str	r0, [r4, #0]
 80049b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049be:	b15b      	cbz	r3, 80049d8 <__smakebuf_r+0x70>
 80049c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f81d 	bl	8004a04 <_isatty_r>
 80049ca:	b128      	cbz	r0, 80049d8 <__smakebuf_r+0x70>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	431d      	orrs	r5, r3
 80049dc:	81a5      	strh	r5, [r4, #12]
 80049de:	e7cf      	b.n	8004980 <__smakebuf_r+0x18>

080049e0 <_fstat_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	@ (8004a00 <_fstat_r+0x20>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	f7fb ffe5 	bl	80009bc <_fstat>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d102      	bne.n	80049fc <_fstat_r+0x1c>
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	b103      	cbz	r3, 80049fc <_fstat_r+0x1c>
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
 80049fe:	bf00      	nop
 8004a00:	200005e0 	.word	0x200005e0

08004a04 <_isatty_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_isatty_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fb ffe4 	bl	80009dc <_isatty>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_isatty_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_isatty_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200005e0 	.word	0x200005e0

08004a24 <_malloc_usable_size_r>:
 8004a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a28:	1f18      	subs	r0, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfbc      	itt	lt
 8004a2e:	580b      	ldrlt	r3, [r1, r0]
 8004a30:	18c0      	addlt	r0, r0, r3
 8004a32:	4770      	bx	lr

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
