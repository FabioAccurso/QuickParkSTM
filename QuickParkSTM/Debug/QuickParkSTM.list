
QuickParkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005100  08005100  00006100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000061a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051ac  080051ac  000061ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080051b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00000550  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005b0  200005b0  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a5d  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac4  00000000  00000000  00019aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0001c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbc  00000000  00000000  0001d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6ba  00000000  00000000  0001e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ab8  00000000  00000000  0003cbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8bc0  00000000  00000000  0005369e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c25e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fe8  00000000  00000000  0010c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0011128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050e8 	.word	0x080050e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080050e8 	.word	0x080050e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <display_init>:
#define SERVO_UP 1500
#define SERVO_DOWN 500

extern TIM_HandleTypeDef htim1; // Riferimento alla nostra interfaccia TIM1

void display_init(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Inizializza il PWM per il servomotore di ingresso
 8000274:	2100      	movs	r1, #0
 8000276:	4811      	ldr	r0, [pc, #68]	@ (80002bc <display_init+0x4c>)
 8000278:	f003 fb9e 	bl	80039b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Inizializza il PWM per il servomotore di uscita
 800027c:	2104      	movs	r1, #4
 800027e:	480f      	ldr	r0, [pc, #60]	@ (80002bc <display_init+0x4c>)
 8000280:	f003 fb9a 	bl	80039b8 <HAL_TIM_PWM_Start>
	lcd_init(); // Inizializza il display
 8000284:	f000 f8ff 	bl	8000486 <lcd_init>
	Servo_Entrance_Close();
 8000288:	f000 f81e 	bl	80002c8 <Servo_Entrance_Close>
	Servo_Exit_Close();
 800028c:	f000 f82a 	bl	80002e4 <Servo_Exit_Close>
	lcd_put_cur(0, 0);
 8000290:	2100      	movs	r1, #0
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8d8 	bl	8000448 <lcd_put_cur>
	lcd_send_string("QuickParkSTM");
 8000298:	4809      	ldr	r0, [pc, #36]	@ (80002c0 <display_init+0x50>)
 800029a:	f000 f931 	bl	8000500 <lcd_send_string>
	lcd_put_cur(1, 0);
 800029e:	2100      	movs	r1, #0
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f8d1 	bl	8000448 <lcd_put_cur>
	lcd_send_string("WELCOME!");
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <display_init+0x54>)
 80002a8:	f000 f92a 	bl	8000500 <lcd_send_string>
	HAL_Delay(3000);
 80002ac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002b0:	f000 fede 	bl	8001070 <HAL_Delay>
	Display_Write();
 80002b4:	f000 f840 	bl	8000338 <Display_Write>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000134 	.word	0x20000134
 80002c0:	08005100 	.word	0x08005100
 80002c4:	08005110 	.word	0x08005110

080002c8 <Servo_Entrance_Close>:

    // Imposta il valore del compare register
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_length);
}*/

void Servo_Entrance_Close(void){
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	// Imposta la posizione iniziale a 0 gradi (impulso di 500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_DOWN);
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <Servo_Entrance_Close+0x18>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000134 	.word	0x20000134

080002e4 <Servo_Exit_Close>:

void Servo_Exit_Close(void){ //DA MODIFICARE TIM_CHANNEL
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	// Imposta la posizione iniziale a 0 gradi (impulso di 500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SERVO_DOWN);
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <Servo_Exit_Close+0x18>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000134 	.word	0x20000134

08000300 <Servo_Entrance_Open>:

void Servo_Entrance_Open(void){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	// Imposta la posizione desiderata a 90 gradi (impulso di 1500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_UP);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <Servo_Entrance_Open+0x18>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	20000134 	.word	0x20000134

0800031c <Servo_Exit_Open>:

void Servo_Exit_Open(void){ //DA MODIFICARE TIM_CHANNEL
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	// Imposta la posizione desiderata a 90 gradi (impulso di 1500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SERVO_UP);
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <Servo_Exit_Open+0x18>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000328:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	20000134 	.word	0x20000134

08000338 <Display_Write>:

void Display_Write(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
	/*lcd_put_cur(0, 0); // Posiziona il cursore alla riga 0, colonna 0
	lcd_send_string("QuickParkSTM");*/
	if(sensors_get_free_slots() > 0){
 800033e:	f000 fb9b 	bl	8000a78 <sensors_get_free_slots>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	dd10      	ble.n	800036a <Display_Write+0x32>
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
 8000348:	2100      	movs	r1, #0
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f87c 	bl	8000448 <lcd_put_cur>
		char buffer[32];
		snprintf(buffer, sizeof(buffer), "Slot Left: %d", sensors_get_free_slots());
 8000350:	f000 fb92 	bl	8000a78 <sensors_get_free_slots>
 8000354:	4603      	mov	r3, r0
 8000356:	4638      	mov	r0, r7
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <Display_Write+0x48>)
 800035a:	2120      	movs	r1, #32
 800035c:	f004 fa10 	bl	8004780 <sniprintf>
		lcd_send_string(buffer);
 8000360:	463b      	mov	r3, r7
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f8cc 	bl	8000500 <lcd_send_string>
	else{
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
		lcd_send_string("Parking Full :(");
	}

}
 8000368:	e006      	b.n	8000378 <Display_Write+0x40>
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
 800036a:	2100      	movs	r1, #0
 800036c:	2001      	movs	r0, #1
 800036e:	f000 f86b 	bl	8000448 <lcd_put_cur>
		lcd_send_string("Parking Full :(");
 8000372:	4804      	ldr	r0, [pc, #16]	@ (8000384 <Display_Write+0x4c>)
 8000374:	f000 f8c4 	bl	8000500 <lcd_send_string>
}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	0800511c 	.word	0x0800511c
 8000384:	0800512c 	.word	0x0800512c

08000388 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD 0x27 << 1 // Usa 0x27 per indirizzo 0x4E, o 0x3F per 0x7E

extern I2C_HandleTypeDef hi2c1;  // Riferimento alla nostra interfaccia I2C1

void lcd_send_cmd (char cmd)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af02      	add	r7, sp, #8
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f023 030f 	bic.w	r3, r3, #15
 8000398:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	011b      	lsls	r3, r3, #4
 800039e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	f043 030c 	orr.w	r3, r3, #12
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003c8:	f107 0208 	add.w	r2, r7, #8
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2304      	movs	r3, #4
 80003d2:	214e      	movs	r1, #78	@ 0x4e
 80003d4:	4803      	ldr	r0, [pc, #12]	@ (80003e4 <lcd_send_cmd+0x5c>)
 80003d6:	f001 f9df 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000007c 	.word	0x2000007c

080003e8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f023 030f 	bic.w	r3, r3, #15
 80003f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	011b      	lsls	r3, r3, #4
 80003fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f043 030d 	orr.w	r3, r3, #13
 8000406:	b2db      	uxtb	r3, r3
 8000408:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	f043 0309 	orr.w	r3, r3, #9
 8000410:	b2db      	uxtb	r3, r3
 8000412:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	f043 030d 	orr.w	r3, r3, #13
 800041a:	b2db      	uxtb	r3, r3
 800041c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	f043 0309 	orr.w	r3, r3, #9
 8000424:	b2db      	uxtb	r3, r3
 8000426:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000428:	f107 0208 	add.w	r2, r7, #8
 800042c:	2364      	movs	r3, #100	@ 0x64
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2304      	movs	r3, #4
 8000432:	214e      	movs	r1, #78	@ 0x4e
 8000434:	4803      	ldr	r0, [pc, #12]	@ (8000444 <lcd_send_data+0x5c>)
 8000436:	f001 f9af 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000007c 	.word	0x2000007c

08000448 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
    switch (row)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d003      	beq.n	8000460 <lcd_put_cur+0x18>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d005      	beq.n	800046a <lcd_put_cur+0x22>
 800045e:	e009      	b.n	8000474 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000466:	603b      	str	r3, [r7, #0]
            break;
 8000468:	e004      	b.n	8000474 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000470:	603b      	str	r3, [r7, #0]
            break;
 8000472:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff85 	bl	8000388 <lcd_send_cmd>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <lcd_init>:


void lcd_init (void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
	// Inizializzazione in modalità 4-bit
	HAL_Delay(50);
 800048a:	2032      	movs	r0, #50	@ 0x32
 800048c:	f000 fdf0 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000490:	2030      	movs	r0, #48	@ 0x30
 8000492:	f7ff ff79 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(5);
 8000496:	2005      	movs	r0, #5
 8000498:	f000 fdea 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x30);
 800049c:	2030      	movs	r0, #48	@ 0x30
 800049e:	f7ff ff73 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fde4 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x30);
 80004a8:	2030      	movs	r0, #48	@ 0x30
 80004aa:	f7ff ff6d 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(10);
 80004ae:	200a      	movs	r0, #10
 80004b0:	f000 fdde 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x20);  // Modalità 4 bit
 80004b4:	2020      	movs	r0, #32
 80004b6:	f7ff ff67 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(10);
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fdd8 	bl	8001070 <HAL_Delay>

  // Inizializzazione display
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004c0:	2028      	movs	r0, #40	@ 0x28
 80004c2:	f7ff ff61 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fdd2 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80004cc:	2008      	movs	r0, #8
 80004ce:	f7ff ff5b 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fdcc 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ff55 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 fdc6 	bl	8001070 <HAL_Delay>
	HAL_Delay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fdc3 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004ea:	2006      	movs	r0, #6
 80004ec:	f7ff ff4c 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fdbd 	bl	8001070 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C=0, B=0
 80004f6:	200c      	movs	r0, #12
 80004f8:	f7ff ff46 	bl	8000388 <lcd_send_cmd>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000508:	e006      	b.n	8000518 <lcd_send_string+0x18>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff68 	bl	80003e8 <lcd_send_data>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f4      	bne.n	800050a <lcd_send_string+0xa>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int close_entry = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd36 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f838 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f9d6 	bl	80008ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000540:	f000 f898 	bl	8000674 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000544:	f000 f8d6 	bl	80006f4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000548:	f000 f9ae 	bl	80008a8 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 800054c:	f000 f910 	bl	8000770 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //sensors_init();
  display_init();
 8000550:	f7ff fe8e 	bl	8000270 <display_init>

  // Esempio in main.c SUPPONENDO CHE IL LED SIA A CATODO COMUNE


  // main.c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // LED Rosso ON
 8000554:	2201      	movs	r2, #1
 8000556:	2101      	movs	r1, #1
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f001 f850 	bl	8001600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // LED Verde OFF
 8000560:	2200      	movs	r2, #0
 8000562:	2102      	movs	r1, #2
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f001 f84a 	bl	8001600 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800056c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000570:	f000 fd7e 	bl	8001070 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // LED Verde OFF
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057c:	f001 f840 	bl	8001600 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // LED Rosso ON
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f83a 	bl	8001600 <HAL_GPIO_WritePin>
  while (1)
  {
	  //sensors_update();
	  //display_update();
	  //wifi_bot_handle();
	  close_entry = updateCloseEntry();
 800058c:	f000 fa80 	bl	8000a90 <updateCloseEntry>
 8000590:	6078      	str	r0, [r7, #4]
	  if(close_entry == 1){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d1f9      	bne.n	800058c <main+0x62>
		  setCloseEntry(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa85 	bl	8000aa8 <setCloseEntry>
		  HAL_Delay(1500);
 800059e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005a2:	f000 fd65 	bl	8001070 <HAL_Delay>
		  Servo_Entrance_Close();
 80005a6:	f7ff fe8f 	bl	80002c8 <Servo_Entrance_Close>
	  close_entry = updateCloseEntry();
 80005aa:	e7ef      	b.n	800058c <main+0x62>

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09e      	sub	sp, #120	@ 0x78
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005b6:	2228      	movs	r2, #40	@ 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 f916 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	223c      	movs	r2, #60	@ 0x3c
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 f908 	bl	80047ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005dc:	2303      	movs	r3, #3
 80005de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000600:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fd56 	bl	80020b8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000612:	f000 fa2b 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000630:	2101      	movs	r1, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fd4e 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 fa15 	bl	8000a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <SystemClock_Config+0xc4>)
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800064a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fefe 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000662:	f000 fa03 	bl	8000a6c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3778      	adds	r7, #120	@ 0x78
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	00021020 	.word	0x00021020

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <MX_I2C1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <MX_I2C1_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006b0:	f000 ffd6 	bl	8001660 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 f9d7 	bl	8000a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006c2:	f001 fb9b 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 f9ce 	bl	8000a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006d4:	f001 fbdd 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f9c5 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40005400 	.word	0x40005400
 80006f0:	00201d2b 	.word	0x00201d2b

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_SPI1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_SPI1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_SPI1_Init+0x74>)
 800070e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000712:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_SPI1_Init+0x74>)
 800072a:	2208      	movs	r2, #8
 800072c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000742:	2207      	movs	r2, #7
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_SPI1_Init+0x74>)
 800074e:	2208      	movs	r2, #8
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_SPI1_Init+0x74>)
 8000754:	f003 f82e 	bl	80037b4 <HAL_SPI_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 f985 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000d0 	.word	0x200000d0
 800076c:	40013000 	.word	0x40013000

08000770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	@ 0x58
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	222c      	movs	r2, #44	@ 0x2c
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f825 	bl	80047ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007a4:	4a3f      	ldr	r2, [pc, #252]	@ (80008a4 <MX_TIM1_Init+0x134>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007aa:	222f      	movs	r2, #47	@ 0x2f
 80007ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b3c      	ldr	r3, [pc, #240]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80007b4:	4b3a      	ldr	r3, [pc, #232]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007b6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c2:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ce:	4834      	ldr	r0, [pc, #208]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007d0:	f003 f89b 	bl	800390a <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f947 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007ee:	4619      	mov	r1, r3
 80007f0:	482b      	ldr	r0, [pc, #172]	@ (80008a0 <MX_TIM1_Init+0x130>)
 80007f2:	f003 fe8d 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 f936 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	@ 0x60
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <MX_TIM1_Init+0x130>)
 8000826:	f003 f9c7 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000830:	f000 f91c 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000834:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_TIM1_Init+0x130>)
 800083e:	f003 f9bb 	bl	8003bb8 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000848:	f000 f910 	bl	8000a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800086e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM1_Init+0x130>)
 8000882:	f003 fec5 	bl	8004610 <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800088c:	f000 f8ee 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM1_Init+0x130>)
 8000892:	f000 fa5b 	bl	8000d4c <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3758      	adds	r7, #88	@ 0x58
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000134 	.word	0x20000134
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <MX_USB_PCD_Init+0x40>)
 80008b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USB_PCD_Init+0x3c>)
 80008d2:	f001 fb2a 	bl	8001f2a <HAL_PCD_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008dc:	f000 f8c6 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000180 	.word	0x20000180
 80008e8:	40005c00 	.word	0x40005c00

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	@ 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	4b57      	ldr	r3, [pc, #348]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a56      	ldr	r2, [pc, #344]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b54      	ldr	r3, [pc, #336]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b51      	ldr	r3, [pc, #324]	@ (8000a60 <MX_GPIO_Init+0x174>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a50      	ldr	r2, [pc, #320]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b4e      	ldr	r3, [pc, #312]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	4b4b      	ldr	r3, [pc, #300]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a4a      	ldr	r2, [pc, #296]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b48      	ldr	r3, [pc, #288]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <MX_GPIO_Init+0x174>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a44      	ldr	r2, [pc, #272]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b3f      	ldr	r3, [pc, #252]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x174>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800097a:	2200      	movs	r2, #0
 800097c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000980:	4838      	ldr	r0, [pc, #224]	@ (8000a64 <MX_GPIO_Init+0x178>)
 8000982:	f000 fe3d 	bl	8001600 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2103      	movs	r1, #3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098e:	f000 fe37 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin;
 8000992:	2334      	movs	r3, #52	@ 0x34
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000996:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <MX_GPIO_Init+0x178>)
 80009a8:	f000 fc98 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009ac:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80009b0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4827      	ldr	r0, [pc, #156]	@ (8000a64 <MX_GPIO_Init+0x178>)
 80009c6:	f000 fc89 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_Pin */
  GPIO_InitStruct.Pin = PS1_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4822      	ldr	r0, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0x17c>)
 80009e0:	f000 fc7c 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Pin */
  GPIO_InitStruct.Pin = PS2_Pin;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <MX_GPIO_Init+0x17c>)
 80009fa:	f000 fc6f 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009fe:	2303      	movs	r3, #3
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a18:	f000 fc60 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f000 fc53 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2006      	movs	r0, #6
 8000a3c:	f000 fc17 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a40:	2006      	movs	r0, #6
 8000a42:	f000 fc30 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fc0f 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a50:	2007      	movs	r0, #7
 8000a52:	f000 fc28 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001000 	.word	0x48001000
 8000a68:	48000800 	.word	0x48000800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <sensors_get_free_slots>:

void sensors_update(void) {
    // Lasciata vuota o usata se servono aggiornamenti periodici
}

int sensors_get_free_slots(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    return free_spots;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <sensors_get_free_slots+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000

08000a90 <updateCloseEntry>:

int updateCloseEntry(void){
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	return close_entry;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <updateCloseEntry+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000045c 	.word	0x2000045c

08000aa8 <setCloseEntry>:

void setCloseEntry(int x){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	close_entry = x;
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <setCloseEntry+0x1c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000045c 	.word	0x2000045c

08000ac8 <HAL_GPIO_EXTI_Callback>:

// --- GESTIONE INTERRUPT ---

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PS1_Pin) {  // Sensore ingresso
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d136      	bne.n	8000b46 <HAL_GPIO_EXTI_Callback+0x7e>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS1_Pin);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4832      	ldr	r0, [pc, #200]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000adc:	f000 fd78 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	75bb      	strb	r3, [r7, #22]
		uint32_t last_seen;
		uint32_t now;
		uint32_t interval = 500;
 8000ae4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ae8:	613b      	str	r3, [r7, #16]
		if (state == GPIO_PIN_RESET && !entry_detected) {
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10c      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x42>
 8000af0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d108      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x42>
			// FALLING EDGE: ostacolo davanti al sensore
			entry_detected = 1;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
			Servo_Entrance_Open();  // Alza la sbarra
 8000afe:	f7ff fbff 	bl	8000300 <Servo_Entrance_Open>
			last_seen = HAL_GetTick();
 8000b02:	f000 faa9 	bl	8001058 <HAL_GetTick>
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	e047      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
		}
		else if (state == GPIO_PIN_SET && entry_detected) {
 8000b0a:	7dbb      	ldrb	r3, [r7, #22]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d144      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d040      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
			// RISING EDGE: ostacolo andato via
			now = HAL_GetTick();
 8000b18:	f000 fa9e 	bl	8001058 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
			if(now - last_seen > interval){
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d237      	bcs.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
				entry_detected = 0;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
				//Servo_Entrance_Close();  // Abbassa la sbarra
				close_entry = 1;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
				free_spots--;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b3e:	6013      	str	r3, [r2, #0]
				Display_Write();
 8000b40:	f7ff fbfa 	bl	8000338 <Display_Write>
			Servo_Exit_Close();   // Abbassa sbarra uscita
			free_spots++;
			Display_Write();
		}
	}
}
 8000b44:	e029      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
	else if(GPIO_Pin == PS2_Pin){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d126      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS2_Pin);
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4815      	ldr	r0, [pc, #84]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000b50:	f000 fd3e 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	75fb      	strb	r3, [r7, #23]
		if (state == GPIO_PIN_RESET && !exit_detected) {
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d109      	bne.n	8000b72 <HAL_GPIO_EXTI_Callback+0xaa>
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d105      	bne.n	8000b72 <HAL_GPIO_EXTI_Callback+0xaa>
			exit_detected = 1;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
			Servo_Exit_Open();  // Alza sbarra uscita
 8000b6c:	f7ff fbd6 	bl	800031c <Servo_Exit_Open>
 8000b70:	e013      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
		else if (state == GPIO_PIN_SET && exit_detected) {
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d110      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00c      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
			exit_detected = 0;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
			Servo_Exit_Close();   // Abbassa sbarra uscita
 8000b86:	f7ff fbad 	bl	80002e4 <Servo_Exit_Close>
			free_spots++;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000b92:	6013      	str	r3, [r2, #0]
			Display_Write();
 8000b94:	f7ff fbd0 	bl	8000338 <Display_Write>
}
 8000b98:	e7ff      	b.n	8000b9a <HAL_GPIO_EXTI_Callback+0xd2>
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	20000454 	.word	0x20000454
 8000bac:	2000045c 	.word	0x2000045c
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000458 	.word	0x20000458

08000bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f000 fb32 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_I2C_MspInit+0x7c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d128      	bne.n	8000c74 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <HAL_I2C_MspInit+0x84>)
 8000c58:	f000 fb40 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c66:	61d3      	str	r3, [r2, #28]
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_I2C_MspInit+0x80>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_SPI_MspInit+0x7c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d128      	bne.n	8000cfc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a16      	ldr	r2, [pc, #88]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000cda:	23e0      	movs	r3, #224	@ 0xe0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f000 faf0 	bl	80012dc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_TIM_PWM_MspInit+0x38>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10b      	bne.n	8000d36 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a09      	ldr	r2, [pc, #36]	@ (8000d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <HAL_TIM_MspPostInit+0x68>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d11d      	bne.n	8000daa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a11      	ldr	r2, [pc, #68]	@ (8000db8 <HAL_TIM_MspPostInit+0x6c>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_TIM_MspPostInit+0x6c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f000 fa99 	bl	80012dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <HAL_PCD_MspInit+0x80>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d129      	bne.n	8000e32 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000df6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e08:	230e      	movs	r3, #14
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f000 fa61 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000e20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_PCD_MspInit+0x84>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005c00 	.word	0x40005c00
 8000e40:	40021000 	.word	0x40021000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <NMI_Handler+0x4>

08000e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9a:	f000 f8c9 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS1_Pin);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fbc2 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS2_Pin);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f000 fbbb 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f003 fc84 	bl	80047fc <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000a000 	.word	0x2000a000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000460 	.word	0x20000460
 8000f28:	200005b0 	.word	0x200005b0

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f54:	f7ff ffea 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	@ (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	@ (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f003 fc43 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff fad2 	bl	800052a <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f94:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8000f98:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f9c:	200005b0 	.word	0x200005b0

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x28>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f94f 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fdfa 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f967 	bl	80012c2 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f92f 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000464 	.word	0x20000464

08001058 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;  
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000464 	.word	0x20000464

08001070 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff3e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e154      	b.n	8001596 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8146 	beq.w	8001590 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0203 	and.w	r2, r3, #3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80a0 	beq.w	8001590 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <HAL_GPIO_Init+0x2d8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a57      	ldr	r2, [pc, #348]	@ (80015b4 <HAL_GPIO_Init+0x2d8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b55      	ldr	r3, [pc, #340]	@ (80015b4 <HAL_GPIO_Init+0x2d8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001468:	4a53      	ldr	r2, [pc, #332]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001492:	d019      	beq.n	80014c8 <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a49      	ldr	r2, [pc, #292]	@ (80015bc <HAL_GPIO_Init+0x2e0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a48      	ldr	r2, [pc, #288]	@ (80015c0 <HAL_GPIO_Init+0x2e4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a47      	ldr	r2, [pc, #284]	@ (80015c4 <HAL_GPIO_Init+0x2e8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <HAL_GPIO_Init+0x2ec>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1dc>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e008      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014b8:	2305      	movs	r3, #5
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x1ee>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014da:	4937      	ldr	r1, [pc, #220]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e8:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150c:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001512:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001536:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001560:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_GPIO_Init+0x2f0>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f aea3 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	48001000 	.word	0x48001000
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e001      	b.n	80015f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800161c:	e002      	b.n	8001624 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa3a 	bl	8000ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08d      	b.n	800178e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff faba 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	@ 0x24
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d108      	bne.n	8001702 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	e007      	b.n	8001712 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69d9      	ldr	r1, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	817b      	strh	r3, [r7, #10]
 80017a8:	4613      	mov	r3, r2
 80017aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	f040 80fd 	bne.w	80019b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x30>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0f6      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d0:	f7ff fc42 	bl	8001058 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2319      	movs	r3, #25
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f914 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0e1      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2221      	movs	r2, #33	@ 0x21
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2bff      	cmp	r3, #255	@ 0xff
 8001822:	d906      	bls.n	8001832 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	22ff      	movs	r2, #255	@ 0xff
 8001828:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800182a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e007      	b.n	8001842 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800183c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001840:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d024      	beq.n	8001894 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	8979      	ldrh	r1, [r7, #10]
 8001886:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <HAL_I2C_Master_Transmit+0x228>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fa83 	bl	8001d98 <I2C_TransferConfig>
 8001892:	e066      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	8979      	ldrh	r1, [r7, #10]
 800189c:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <HAL_I2C_Master_Transmit+0x228>)
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fa78 	bl	8001d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018a8:	e05b      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f907 	bl	8001ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07b      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d034      	beq.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d130      	bne.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2200      	movs	r2, #0
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f880 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e04d      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	2bff      	cmp	r3, #255	@ 0xff
 8001922:	d90e      	bls.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	22ff      	movs	r2, #255	@ 0xff
 8001928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192e:	b2da      	uxtb	r2, r3
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fa2c 	bl	8001d98 <I2C_TransferConfig>
 8001940:	e00f      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001950:	b2da      	uxtb	r2, r3
 8001952:	8979      	ldrh	r1, [r7, #10]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fa1b 	bl	8001d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d19e      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f8ed 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e01a      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_I2C_Master_Transmit+0x22c>)
 8001994:	400b      	ands	r3, r1
 8001996:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	80002000 	.word	0x80002000
 80019c4:	fe00e800 	.word	0xfe00e800

080019c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d103      	bne.n	80019e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d007      	beq.n	8001a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	619a      	str	r2, [r3, #24]
  }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	e03b      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	6839      	ldr	r1, [r7, #0]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f8d6 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e041      	b.n	8001aba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d02d      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff fb0b 	bl	8001058 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d122      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d113      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	bf0c      	ite	eq
 8001aaa:	2301      	moveq	r3, #1
 8001aac:	2300      	movne	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0b4      	beq.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ace:	e033      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f87f 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e031      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d025      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7ff fab4 	bl	8001058 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11a      	bne.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d013      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e007      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1c4      	bne.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5c:	e02f      	b.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f838 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e02d      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fa71 	bl	8001058 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11a      	bne.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d013      	beq.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d1c8      	bne.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d068      	beq.n	8001cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c0c:	e049      	b.n	8001ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d045      	beq.n	8001ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff fa1f 	bl	8001058 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_IsErrorOccurred+0x54>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13a      	bne.n	8001ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4e:	d121      	bne.n	8001c94 <I2C_IsErrorOccurred+0xbc>
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c56:	d01d      	beq.n	8001c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d01a      	beq.n	8001c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c6e:	f7ff f9f3 	bl	8001058 <HAL_GetTick>
 8001c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c74:	e00e      	b.n	8001c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c76:	f7ff f9ef 	bl	8001058 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b19      	cmp	r3, #25
 8001c82:	d907      	bls.n	8001c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001c92:	e006      	b.n	8001ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d1e9      	bne.n	8001c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d003      	beq.n	8001cb8 <I2C_IsErrorOccurred+0xe0>
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0aa      	beq.n	8001c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fe3b 	bl	80019c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <I2C_IsErrorOccurred+0x1bc>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	@ 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	fe00e800 	.word	0xfe00e800

08001d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	817b      	strh	r3, [r7, #10]
 8001da6:	4613      	mov	r3, r2
 8001da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db0:	7a7b      	ldrb	r3, [r7, #9]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	0d5b      	lsrs	r3, r3, #21
 8001dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <I2C_TransferConfig+0x60>)
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	ea02 0103 	and.w	r1, r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	03ff63ff 	.word	0x03ff63ff

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	@ 0x24
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d139      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e033      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2224      	movs	r2, #36	@ 0x24
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b9      	b.n	80020b0 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe ff33 	bl	8000dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 fbd2 	bl	800470c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e03e      	b.n	8001fec <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3311      	adds	r3, #17
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3310      	adds	r3, #16
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3313      	adds	r3, #19
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3320      	adds	r3, #32
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	3324      	adds	r3, #36	@ 0x24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	791b      	ldrb	r3, [r3, #4]
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3bb      	bcc.n	8001f6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e044      	b.n	8002086 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3301      	adds	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3b5      	bcc.n	8001ffc <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	e893 0006 	ldmia.w	r3, {r1, r2}
 800209c:	f002 fb51 	bl	8004742 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80020be:	af00      	add	r7, sp, #0
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f000 bff4 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 816d 	beq.w	80023ce <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020f4:	4bb4      	ldr	r3, [pc, #720]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d00c      	beq.n	800211a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002100:	4bb1      	ldr	r3, [pc, #708]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x104>
 800210c:	4bae      	ldr	r3, [pc, #696]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002118:	d150      	bne.n	80021bc <HAL_RCC_OscConfig+0x104>
 800211a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800211e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800212e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b3f      	cmp	r3, #63	@ 0x3f
 800213a:	d802      	bhi.n	8002142 <HAL_RCC_OscConfig+0x8a>
 800213c:	4ba2      	ldr	r3, [pc, #648]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0xb6>
 8002142:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002146:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002156:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800215a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800215e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800216a:	4b97      	ldr	r3, [pc, #604]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002172:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002176:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800217a:	fa92 f2a2 	rbit	r2, r2
 800217e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002182:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8114 	beq.w	80023cc <HAL_RCC_OscConfig+0x314>
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 810b 	bne.w	80023cc <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f000 bf85 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x124>
 80021ce:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7d      	ldr	r2, [pc, #500]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e036      	b.n	800224a <HAL_RCC_OscConfig+0x192>
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x14e>
 80021ec:	4b76      	ldr	r3, [pc, #472]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a75      	ldr	r2, [pc, #468]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b73      	ldr	r3, [pc, #460]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a72      	ldr	r2, [pc, #456]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e021      	b.n	800224a <HAL_RCC_OscConfig+0x192>
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x17a>
 8002218:	4b6b      	ldr	r3, [pc, #428]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6a      	ldr	r2, [pc, #424]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800221e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a67      	ldr	r2, [pc, #412]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x192>
 8002232:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a64      	ldr	r2, [pc, #400]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b62      	ldr	r3, [pc, #392]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a61      	ldr	r2, [pc, #388]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224a:	4b5f      	ldr	r3, [pc, #380]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	495a      	ldr	r1, [pc, #360]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002260:	4313      	orrs	r3, r2
 8002262:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d054      	beq.n	800231e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe fef0 	bl	8001058 <HAL_GetTick>
 8002278:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227e:	f7fe feeb 	bl	8001058 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d902      	bls.n	8002294 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	f000 bf19 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002294:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002298:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80022a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80022b4:	d802      	bhi.n	80022bc <HAL_RCC_OscConfig+0x204>
 80022b6:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e015      	b.n	80022e8 <HAL_RCC_OscConfig+0x230>
 80022bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80022d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80022d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80022f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80022fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f002 021f 	and.w	r2, r2, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f202 	lsl.w	r2, r1, r2
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0b0      	beq.n	800227e <HAL_RCC_OscConfig+0x1c6>
 800231c:	e057      	b.n	80023ce <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fe9b 	bl	8001058 <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fe96 	bl	8001058 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	@ 0x64
 8002336:	d902      	bls.n	800233e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	f000 bec4 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 800233e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002342:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b3f      	cmp	r3, #63	@ 0x3f
 800235e:	d802      	bhi.n	8002366 <HAL_RCC_OscConfig+0x2ae>
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x2da>
 8002366:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800236a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800237a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800237e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002382:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_RCC_OscConfig+0x310>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002396:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800239a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800239e:	fa92 f2a2 	rbit	r2, r2
 80023a2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80023a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0220 	orr.w	r2, r2, #32
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1b0      	bne.n	8002328 <HAL_RCC_OscConfig+0x270>
 80023c6:	e002      	b.n	80023ce <HAL_RCC_OscConfig+0x316>
 80023c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 816c 	beq.w	80026bc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023e4:	4bcc      	ldr	r3, [pc, #816]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023f0:	4bc9      	ldr	r3, [pc, #804]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d16d      	bne.n	80024d8 <HAL_RCC_OscConfig+0x420>
 80023fc:	4bc6      	ldr	r3, [pc, #792]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d167      	bne.n	80024d8 <HAL_RCC_OscConfig+0x420>
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800241a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b3f      	cmp	r3, #63	@ 0x3f
 8002426:	d802      	bhi.n	800242e <HAL_RCC_OscConfig+0x376>
 8002428:	4bbb      	ldr	r3, [pc, #748]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e013      	b.n	8002456 <HAL_RCC_OscConfig+0x39e>
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002446:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002452:	4bb1      	ldr	r3, [pc, #708]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800245c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002468:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f002 021f 	and.w	r2, r2, #31
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCC_OscConfig+0x3e6>
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f000 be14 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b9e      	ldr	r3, [pc, #632]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	21f8      	movs	r1, #248	@ 0xf8
 80024b4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80024bc:	fa91 f1a1 	rbit	r1, r1
 80024c0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80024c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80024c8:	fab1 f181 	clz	r1, r1
 80024cc:	b2c9      	uxtb	r1, r1
 80024ce:	408b      	lsls	r3, r1
 80024d0:	4991      	ldr	r1, [pc, #580]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e0f1      	b.n	80026bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8083 	beq.w	80025f0 <HAL_RCC_OscConfig+0x538>
 80024ea:	2301      	movs	r3, #1
 80024ec:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80024fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800250a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	461a      	mov	r2, r3
 8002512:	2301      	movs	r3, #1
 8002514:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe fd9f 	bl	8001058 <HAL_GetTick>
 800251a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe fd9a 	bl	8001058 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d902      	bls.n	8002536 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	f000 bdc8 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002548:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b3f      	cmp	r3, #63	@ 0x3f
 8002554:	d802      	bhi.n	800255c <HAL_RCC_OscConfig+0x4a4>
 8002556:	4b70      	ldr	r3, [pc, #448]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	e013      	b.n	8002584 <HAL_RCC_OscConfig+0x4cc>
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800256e:	2302      	movs	r3, #2
 8002570:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002574:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002580:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	2202      	movs	r2, #2
 8002586:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800258a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800258e:	fa92 f2a2 	rbit	r2, r2
 8002592:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002596:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800259a:	fab2 f282 	clz	r2, r2
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f002 021f 	and.w	r2, r2, #31
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0b4      	beq.n	8002520 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	21f8      	movs	r1, #248	@ 0xf8
 80025cc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80025d4:	fa91 f1a1 	rbit	r1, r1
 80025d8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80025dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80025e0:	fab1 f181 	clz	r1, r1
 80025e4:	b2c9      	uxtb	r1, r1
 80025e6:	408b      	lsls	r3, r1
 80025e8:	494b      	ldr	r1, [pc, #300]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	e065      	b.n	80026bc <HAL_RCC_OscConfig+0x604>
 80025f0:	2301      	movs	r3, #1
 80025f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002602:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002610:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	2300      	movs	r3, #0
 800261a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fd1c 	bl	8001058 <HAL_GetTick>
 8002620:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe fd17 	bl	8001058 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	f000 bd45 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 800263c:	2302      	movs	r3, #2
 800263e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800264e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b3f      	cmp	r3, #63	@ 0x3f
 800265a:	d802      	bhi.n	8002662 <HAL_RCC_OscConfig+0x5aa>
 800265c:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e013      	b.n	800268a <HAL_RCC_OscConfig+0x5d2>
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800267a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x660>)
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	2202      	movs	r2, #2
 800268c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002690:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002694:	fa92 f2a2 	rbit	r2, r2
 8002698:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800269c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f042 0220 	orr.w	r2, r2, #32
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f002 021f 	and.w	r2, r2, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1b4      	bne.n	8002626 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8115 	beq.w	80028fc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d07e      	beq.n	80027e0 <HAL_RCC_OscConfig+0x728>
 80026e2:	2301      	movs	r3, #1
 80026e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80026f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x664>)
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	461a      	mov	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe fca4 	bl	8001058 <HAL_GetTick>
 8002710:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002714:	e00f      	b.n	8002736 <HAL_RCC_OscConfig+0x67e>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe fc9a 	bl	8001058 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d902      	bls.n	8002736 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	f000 bcc8 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800278e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002790:	4bb0      	ldr	r3, [pc, #704]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002798:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800279c:	2102      	movs	r1, #2
 800279e:	6019      	str	r1, [r3, #0]
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f1a3 	rbit	r1, r3
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027b6:	6019      	str	r1, [r3, #0]
  return result;
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0a0      	beq.n	8002720 <HAL_RCC_OscConfig+0x668>
 80027de:	e08d      	b.n	80028fc <HAL_RCC_OscConfig+0x844>
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800280c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4b90      	ldr	r3, [pc, #576]	@ (8002a58 <HAL_RCC_OscConfig+0x9a0>)
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2300      	movs	r3, #0
 8002820:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fc19 	bl	8001058 <HAL_GetTick>
 8002826:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fc14 	bl	8001058 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 bc42 	b.w	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800286e:	2202      	movs	r2, #2
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	4b69      	ldr	r3, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80028b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028ba:	2102      	movs	r1, #2
 80028bc:	6019      	str	r1, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f1a3 	rbit	r1, r3
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028d4:	6019      	str	r1, [r3, #0]
  return result;
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d197      	bne.n	800282c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 819e 	beq.w	8002c4e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b4b      	ldr	r3, [pc, #300]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a4a      	ldr	r2, [pc, #296]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292e:	61d3      	str	r3, [r2, #28]
 8002930:	4b48      	ldr	r3, [pc, #288]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800294a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b42      	ldr	r3, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x9a4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11a      	bne.n	8002994 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0x9a4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a3e      	ldr	r2, [pc, #248]	@ (8002a5c <HAL_RCC_OscConfig+0x9a4>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002968:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296a:	f7fe fb75 	bl	8001058 <HAL_GetTick>
 800296e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	e009      	b.n	8002988 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fb70 	bl	8001058 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	@ 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e39e      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b34      	ldr	r3, [pc, #208]	@ (8002a5c <HAL_RCC_OscConfig+0x9a4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x8fa>
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e035      	b.n	8002a1e <HAL_RCC_OscConfig+0x966>
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x924>
 80029c2:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a23      	ldr	r2, [pc, #140]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6213      	str	r3, [r2, #32]
 80029ce:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a20      	ldr	r2, [pc, #128]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6213      	str	r3, [r2, #32]
 80029da:	e020      	b.n	8002a1e <HAL_RCC_OscConfig+0x966>
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d10c      	bne.n	8002a06 <HAL_RCC_OscConfig+0x94e>
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a18      	ldr	r2, [pc, #96]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	e00b      	b.n	8002a1e <HAL_RCC_OscConfig+0x966>
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <HAL_RCC_OscConfig+0x99c>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fb12 	bl	8001058 <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	e012      	b.n	8002a60 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fb0d 	bl	8001058 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d908      	bls.n	8002a60 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e339      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	10908120 	.word	0x10908120
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fa93 f2a3 	rbit	r2, r3
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002aa6:	601a      	str	r2, [r3, #0]
  return result;
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ab0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xa10>
 8002ac2:	4b98      	ldr	r3, [pc, #608]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	e013      	b.n	8002af0 <HAL_RCC_OscConfig+0xa38>
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	4b8d      	ldr	r3, [pc, #564]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002af8:	2102      	movs	r1, #2
 8002afa:	6011      	str	r1, [r2, #0]
 8002afc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fa92 f1a2 	rbit	r1, r2
 8002b0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b12:	6011      	str	r1, [r2, #0]
  return result;
 8002b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b18:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f43f af7f 	beq.w	8002a3a <HAL_RCC_OscConfig+0x982>
 8002b3c:	e07d      	b.n	8002c3a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fa8b 	bl	8001058 <HAL_GetTick>
 8002b42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fa86 	bl	8001058 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2b2      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b68:	2202      	movs	r2, #2
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b88:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fa93 f2a3 	rbit	r2, r3
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ba6:	601a      	str	r2, [r3, #0]
  return result;
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002bb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xb10>
 8002bc2:	4b58      	ldr	r3, [pc, #352]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	e013      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb38>
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bf4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	6011      	str	r1, [r2, #0]
 8002bfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c00:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	fa92 f1a2 	rbit	r1, r2
 8002c0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c0e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c12:	6011      	str	r1, [r2, #0]
  return result;
 8002c14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c18:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 021f 	and.w	r2, r2, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d186      	bne.n	8002b48 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4a37      	ldr	r2, [pc, #220]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8232 	beq.w	80030c4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f000 8201 	beq.w	8003070 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	f040 8157 	bne.w	8002f2e <HAL_RCC_OscConfig+0xe76>
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ca4:	601a      	str	r2, [r3, #0]
  return result;
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002cae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f9c7 	bl	8001058 <HAL_GetTick>
 8002cca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	e009      	b.n	8002ce4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe f9c2 	bl	8001058 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1f0      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002cec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d08:	601a      	str	r2, [r3, #0]
  return result;
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d1c:	d804      	bhi.n	8002d28 <HAL_RCC_OscConfig+0xc70>
 8002d1e:	4b01      	ldr	r3, [pc, #4]	@ (8002d24 <HAL_RCC_OscConfig+0xc6c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	e029      	b.n	8002d78 <HAL_RCC_OscConfig+0xcc0>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4bc3      	ldr	r3, [pc, #780]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d7c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d8a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fa92 f1a2 	rbit	r1, r2
 8002d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d9c:	6011      	str	r1, [r2, #0]
  return result;
 8002d9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002da2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d185      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4baf      	ldr	r3, [pc, #700]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	49a7      	ldr	r1, [pc, #668]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002df4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e10:	601a      	str	r2, [r3, #0]
  return result;
 8002e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002e1a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe f911 	bl	8001058 <HAL_GetTick>
 8002e36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3a:	e009      	b.n	8002e50 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f90c 	bl	8001058 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e13a      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e88:	d802      	bhi.n	8002e90 <HAL_RCC_OscConfig+0xdd8>
 8002e8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e027      	b.n	8002ee0 <HAL_RCC_OscConfig+0xe28>
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b69      	ldr	r3, [pc, #420]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ee4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ee8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002eec:	6011      	str	r1, [r2, #0]
 8002eee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fa92 f1a2 	rbit	r1, r2
 8002efc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f04:	6011      	str	r1, [r2, #0]
  return result;
 8002f06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d087      	beq.n	8002e3c <HAL_RCC_OscConfig+0xd84>
 8002f2c:	e0ca      	b.n	80030c4 <HAL_RCC_OscConfig+0x100c>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe f870 	bl	8001058 <HAL_GetTick>
 8002f78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e009      	b.n	8002f92 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe f86b 	bl	8001058 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e099      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fb6:	601a      	str	r2, [r3, #0]
  return result;
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002fc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fca:	d802      	bhi.n	8002fd2 <HAL_RCC_OscConfig+0xf1a>
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e027      	b.n	8003022 <HAL_RCC_OscConfig+0xf6a>
 8002fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fa93 f2a3 	rbit	r2, r3
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCC_OscConfig+0xfcc>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003026:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800302a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800302e:	6011      	str	r1, [r2, #0]
 8003030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003034:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	fa92 f1a2 	rbit	r1, r2
 800303e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003042:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003046:	6011      	str	r1, [r2, #0]
  return result;
 8003048:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800304c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	fab2 f282 	clz	r2, r2
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	f042 0220 	orr.w	r2, r2, #32
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	f002 021f 	and.w	r2, r2, #31
 8003062:	2101      	movs	r1, #1
 8003064:	fa01 f202 	lsl.w	r2, r1, r2
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d187      	bne.n	8002f7e <HAL_RCC_OscConfig+0xec6>
 800306e:	e029      	b.n	80030c4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d103      	bne.n	8003088 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e020      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
 8003084:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCC_OscConfig+0x1018>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003090:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003094:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80030ac:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b09e      	sub	sp, #120	@ 0x78
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e154      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b89      	ldr	r3, [pc, #548]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b86      	ldr	r3, [pc, #536]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4984      	ldr	r1, [pc, #528]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b82      	ldr	r3, [pc, #520]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e13c      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b7b      	ldr	r3, [pc, #492]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4978      	ldr	r1, [pc, #480]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80cd 	beq.w	80032e2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d137      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xec>
 8003150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003154:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800315e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b3f      	cmp	r3, #63	@ 0x3f
 8003168:	d802      	bhi.n	8003170 <HAL_RCC_ClockConfig+0x9c>
 800316a:	4b6b      	ldr	r3, [pc, #428]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	e00f      	b.n	8003190 <HAL_RCC_ClockConfig+0xbc>
 8003170:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003174:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	667b      	str	r3, [r7, #100]	@ 0x64
 800317e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003182:	663b      	str	r3, [r7, #96]	@ 0x60
 8003184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800318c:	4b62      	ldr	r3, [pc, #392]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003194:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003198:	fa92 f2a2 	rbit	r2, r2
 800319c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800319e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031a0:	fab2 f282 	clz	r2, r2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f002 021f 	and.w	r2, r2, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d171      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0ea      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d137      	bne.n	8003238 <HAL_RCC_ClockConfig+0x164>
 80031c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b3f      	cmp	r3, #63	@ 0x3f
 80031e0:	d802      	bhi.n	80031e8 <HAL_RCC_ClockConfig+0x114>
 80031e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e00f      	b.n	8003208 <HAL_RCC_ClockConfig+0x134>
 80031e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80031fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003204:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800320e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003210:	fa92 f2a2 	rbit	r2, r2
 8003214:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003218:	fab2 f282 	clz	r2, r2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f042 0220 	orr.w	r2, r2, #32
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f002 021f 	and.w	r2, r2, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d135      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0ae      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
 8003238:	2302      	movs	r3, #2
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b3f      	cmp	r3, #63	@ 0x3f
 800324e:	d802      	bhi.n	8003256 <HAL_RCC_ClockConfig+0x182>
 8003250:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e00d      	b.n	8003272 <HAL_RCC_ClockConfig+0x19e>
 8003256:	2302      	movs	r3, #2
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
 8003262:	2302      	movs	r3, #2
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	4b2a      	ldr	r3, [pc, #168]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2202      	movs	r2, #2
 8003274:	61ba      	str	r2, [r7, #24]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	617a      	str	r2, [r7, #20]
  return result;
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f042 0220 	orr.w	r2, r2, #32
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	f002 021f 	and.w	r2, r2, #31
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f202 	lsl.w	r2, r1, r2
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e07a      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 0203 	bic.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	491a      	ldr	r1, [pc, #104]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b2:	f7fd fed1 	bl	8001058 <HAL_GetTick>
 80032b6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ba:	f7fd fecd 	bl	8001058 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e062      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 020c 	and.w	r2, r3, #12
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	429a      	cmp	r2, r3
 80032e0:	d1eb      	bne.n	80032ba <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d215      	bcs.n	800331c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f0:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	4906      	ldr	r1, [pc, #24]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_RCC_ClockConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d006      	beq.n	800331c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e041      	b.n	8003396 <HAL_RCC_ClockConfig+0x2c2>
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCC_ClockConfig+0x2cc>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	491a      	ldr	r1, [pc, #104]	@ (80033a0 <HAL_RCC_ClockConfig+0x2cc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_RCC_ClockConfig+0x2cc>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4912      	ldr	r1, [pc, #72]	@ (80033a0 <HAL_RCC_ClockConfig+0x2cc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800335a:	f000 f829 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <HAL_RCC_ClockConfig+0x2cc>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003368:	22f0      	movs	r2, #240	@ 0xf0
 800336a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	fa92 f2a2 	rbit	r2, r2
 8003372:	60fa      	str	r2, [r7, #12]
  return result;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	fab2 f282 	clz	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	40d3      	lsrs	r3, r2
 800337e:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x2d0>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	fa21 f303 	lsr.w	r3, r1, r3
 8003386:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <HAL_RCC_ClockConfig+0x2d4>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800338a:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <HAL_RCC_ClockConfig+0x2d8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fe1e 	bl	8000fd0 <HAL_InitTick>
  
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3778      	adds	r7, #120	@ 0x78
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	0800513c 	.word	0x0800513c
 80033a8:	20000004 	.word	0x20000004
 80033ac:	20000008 	.word	0x20000008

080033b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x94>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x30>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x36>
 80033de:	e026      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 80033e2:	613b      	str	r3, [r7, #16]
      break;
 80033e4:	e026      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a17      	ldr	r2, [pc, #92]	@ (800344c <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x94>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800340c:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	fbb2 f2f3 	udiv	r2, r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e004      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a0c      	ldr	r2, [pc, #48]	@ (8003454 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	613b      	str	r3, [r7, #16]
      break;
 800342c:	e002      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x98>)
 8003430:	613b      	str	r3, [r7, #16]
      break;
 8003432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003434:	693b      	ldr	r3, [r7, #16]
}
 8003436:	4618      	mov	r0, r3
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	007a1200 	.word	0x007a1200
 800344c:	0800514c 	.word	0x0800514c
 8003450:	0800515c 	.word	0x0800515c
 8003454:	003d0900 	.word	0x003d0900

08003458 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b092      	sub	sp, #72	@ 0x48
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80d2 	beq.w	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347c:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10e      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4a49      	ldr	r2, [pc, #292]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003492:	61d3      	str	r3, [r2, #28]
 8003494:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b44      	ldr	r3, [pc, #272]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b41      	ldr	r3, [pc, #260]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a40      	ldr	r2, [pc, #256]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fd fdcb 	bl	8001058 <HAL_GetTick>
 80034c2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fd fdc7 	bl	8001058 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e167      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034e4:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8082 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003500:	429a      	cmp	r2, r3
 8003502:	d07a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003504:	4b2b      	ldr	r3, [pc, #172]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800350e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4b25      	ldr	r3, [pc, #148]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	2301      	movs	r3, #1
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	4b1c      	ldr	r3, [pc, #112]	@ (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003556:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800355c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d049      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fd fd77 	bl	8001058 <HAL_GetTick>
 800356a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd fd73 	bl	8001058 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e111      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	2302      	movs	r3, #2
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	61fb      	str	r3, [r7, #28]
  return result;
 800359c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035ae:	4b01      	ldr	r3, [pc, #4]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	e00d      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40007000 	.word	0x40007000
 80035bc:	10908100 	.word	0x10908100
 80035c0:	2302      	movs	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	4b78      	ldr	r3, [pc, #480]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	2202      	movs	r2, #2
 80035d2:	613a      	str	r2, [r7, #16]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	fa92 f2a2 	rbit	r2, r2
 80035da:	60fa      	str	r2, [r7, #12]
  return result;
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0b9      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035fa:	4b6d      	ldr	r3, [pc, #436]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	496a      	ldr	r1, [pc, #424]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003608:	4313      	orrs	r3, r2
 800360a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800360c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800362c:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f023 0203 	bic.w	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	495d      	ldr	r1, [pc, #372]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800363a:	4313      	orrs	r3, r2
 800363c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800364a:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4956      	ldr	r1, [pc, #344]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003658:	4313      	orrs	r3, r2
 800365a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003668:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	494e      	ldr	r1, [pc, #312]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003676:	4313      	orrs	r3, r2
 8003678:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f023 0210 	bic.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4947      	ldr	r1, [pc, #284]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003694:	4313      	orrs	r3, r2
 8003696:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036a4:	4b42      	ldr	r3, [pc, #264]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	493f      	ldr	r1, [pc, #252]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f023 0220 	bic.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4938      	ldr	r1, [pc, #224]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e0:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4930      	ldr	r1, [pc, #192]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036fe:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4929      	ldr	r1, [pc, #164]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800370c:	4313      	orrs	r3, r2
 800370e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800371c:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	4921      	ldr	r1, [pc, #132]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800373a:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	491a      	ldr	r1, [pc, #104]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003748:	4313      	orrs	r3, r2
 800374a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003758:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	4912      	ldr	r1, [pc, #72]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003766:	4313      	orrs	r3, r2
 8003768:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	490b      	ldr	r1, [pc, #44]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	4903      	ldr	r1, [pc, #12]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3748      	adds	r7, #72	@ 0x48
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e09d      	b.n	8003902 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d6:	d009      	beq.n	80037ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
 80037de:	e005      	b.n	80037ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fa3e 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800382c:	d902      	bls.n	8003834 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e002      	b.n	800383a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003838:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003842:	d007      	beq.n	8003854 <HAL_SPI_Init+0xa0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800384c:	d002      	beq.n	8003854 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	ea42 0103 	orr.w	r1, r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	0c1b      	lsrs	r3, r3, #16
 80038b0:	f003 0204 	and.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80038d0:	ea42 0103 	orr.w	r1, r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e049      	b.n	80039b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f9eb 	bl	8000d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f000 fa49 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_TIM_PWM_Start+0x24>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e03c      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d109      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x3e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e02f      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x58>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e022      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d109      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x72>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e015      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x8c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e008      	b.n	8003a56 <HAL_TIM_PWM_Start+0x9e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e097      	b.n	8003b8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xb6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a6c:	e023      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xc6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a7c:	e01b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xd6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0xe6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0xf6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_PWM_Start+0xfe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fd00 	bl	80044c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <HAL_TIM_PWM_Start+0x1e0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a32      	ldr	r2, [pc, #200]	@ (8003b9c <HAL_TIM_PWM_Start+0x1e4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x13e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Start+0x142>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_TIM_PWM_Start+0x144>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <HAL_TIM_PWM_Start+0x1e0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x194>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b22:	d013      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x194>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <HAL_TIM_PWM_Start+0x1f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x194>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x194>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	@ (8003b9c <HAL_TIM_PWM_Start+0x1e4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x194>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d115      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d015      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x1d2>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d011      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	e008      	b.n	8003b8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	00010007 	.word	0x00010007

08003bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0ff      	b.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b14      	cmp	r3, #20
 8003be2:	f200 80f0 	bhi.w	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003be6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003dc7 	.word	0x08003dc7
 8003bf4:	08003dc7 	.word	0x08003dc7
 8003bf8:	08003dc7 	.word	0x08003dc7
 8003bfc:	08003c81 	.word	0x08003c81
 8003c00:	08003dc7 	.word	0x08003dc7
 8003c04:	08003dc7 	.word	0x08003dc7
 8003c08:	08003dc7 	.word	0x08003dc7
 8003c0c:	08003cc3 	.word	0x08003cc3
 8003c10:	08003dc7 	.word	0x08003dc7
 8003c14:	08003dc7 	.word	0x08003dc7
 8003c18:	08003dc7 	.word	0x08003dc7
 8003c1c:	08003d03 	.word	0x08003d03
 8003c20:	08003dc7 	.word	0x08003dc7
 8003c24:	08003dc7 	.word	0x08003dc7
 8003c28:	08003dc7 	.word	0x08003dc7
 8003c2c:	08003d45 	.word	0x08003d45
 8003c30:	08003dc7 	.word	0x08003dc7
 8003c34:	08003dc7 	.word	0x08003dc7
 8003c38:	08003dc7 	.word	0x08003dc7
 8003c3c:	08003d85 	.word	0x08003d85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f966 	bl	8003f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0208 	orr.w	r2, r2, #8
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	619a      	str	r2, [r3, #24]
      break;
 8003c7e:	e0a5      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f9d6 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	619a      	str	r2, [r3, #24]
      break;
 8003cc0:	e084      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fa3f 	bl	800414c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0208 	orr.w	r2, r2, #8
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0204 	bic.w	r2, r2, #4
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
      break;
 8003d00:	e064      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 faa7 	bl	800425c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	021a      	lsls	r2, r3, #8
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	61da      	str	r2, [r3, #28]
      break;
 8003d42:	e043      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 faf0 	bl	8004330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d82:	e023      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb34 	bl	80043f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	021a      	lsls	r2, r3, #8
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003dc4:	e002      	b.n	8003dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <TIM_Base_SetConfig+0x11c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3f      	ldr	r2, [pc, #252]	@ (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x38>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3d      	ldr	r2, [pc, #244]	@ (8003f08 <TIM_Base_SetConfig+0x128>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a33      	ldr	r2, [pc, #204]	@ (8003efc <TIM_Base_SetConfig+0x11c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	@ (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <TIM_Base_SetConfig+0x128>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	@ (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2b      	ldr	r2, [pc, #172]	@ (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <TIM_Base_SetConfig+0x11c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0xe8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <TIM_Base_SetConfig+0x128>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0xe8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0xe8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a15      	ldr	r2, [pc, #84]	@ (8003f10 <TIM_Base_SetConfig+0x130>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0xe8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <TIM_Base_SetConfig+0x134>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d103      	bne.n	8003ed0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f023 0201 	bic.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800

08003f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f023 0201 	bic.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f023 0302 	bic.w	r3, r3, #2
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2c      	ldr	r2, [pc, #176]	@ (8004024 <TIM_OC1_SetConfig+0x10c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00f      	beq.n	8003f98 <TIM_OC1_SetConfig+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <TIM_OC1_SetConfig+0x110>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_OC1_SetConfig+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a2a      	ldr	r2, [pc, #168]	@ (800402c <TIM_OC1_SetConfig+0x114>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_OC1_SetConfig+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a29      	ldr	r2, [pc, #164]	@ (8004030 <TIM_OC1_SetConfig+0x118>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC1_SetConfig+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a28      	ldr	r2, [pc, #160]	@ (8004034 <TIM_OC1_SetConfig+0x11c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10c      	bne.n	8003fb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0308 	bic.w	r3, r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004024 <TIM_OC1_SetConfig+0x10c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00f      	beq.n	8003fda <TIM_OC1_SetConfig+0xc2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <TIM_OC1_SetConfig+0x110>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_OC1_SetConfig+0xc2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <TIM_OC1_SetConfig+0x114>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_OC1_SetConfig+0xc2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC1_SetConfig+0x118>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC1_SetConfig+0xc2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC1_SetConfig+0x11c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d111      	bne.n	8003ffe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0210 	bic.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <TIM_OC2_SetConfig+0x100>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC2_SetConfig+0x6c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a27      	ldr	r2, [pc, #156]	@ (800413c <TIM_OC2_SetConfig+0x104>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10d      	bne.n	80040c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <TIM_OC2_SetConfig+0x100>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00f      	beq.n	80040e8 <TIM_OC2_SetConfig+0xb0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <TIM_OC2_SetConfig+0x104>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_OC2_SetConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <TIM_OC2_SetConfig+0x108>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_OC2_SetConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1a      	ldr	r2, [pc, #104]	@ (8004144 <TIM_OC2_SetConfig+0x10c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a19      	ldr	r2, [pc, #100]	@ (8004148 <TIM_OC2_SetConfig+0x110>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d113      	bne.n	8004110 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040f6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40013400 	.word	0x40013400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800

0800414c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a27      	ldr	r2, [pc, #156]	@ (8004248 <TIM_OC3_SetConfig+0xfc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC3_SetConfig+0x6a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a26      	ldr	r2, [pc, #152]	@ (800424c <TIM_OC3_SetConfig+0x100>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10d      	bne.n	80041d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <TIM_OC3_SetConfig+0xfc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00f      	beq.n	80041fa <TIM_OC3_SetConfig+0xae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <TIM_OC3_SetConfig+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00b      	beq.n	80041fa <TIM_OC3_SetConfig+0xae>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <TIM_OC3_SetConfig+0x104>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <TIM_OC3_SetConfig+0xae>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a19      	ldr	r2, [pc, #100]	@ (8004254 <TIM_OC3_SetConfig+0x108>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_OC3_SetConfig+0xae>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <TIM_OC3_SetConfig+0x10c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d113      	bne.n	8004222 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a18      	ldr	r2, [pc, #96]	@ (800431c <TIM_OC4_SetConfig+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <TIM_OC4_SetConfig+0x84>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <TIM_OC4_SetConfig+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_OC4_SetConfig+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <TIM_OC4_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_OC4_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a15      	ldr	r2, [pc, #84]	@ (8004328 <TIM_OC4_SetConfig+0xcc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC4_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a14      	ldr	r2, [pc, #80]	@ (800432c <TIM_OC4_SetConfig+0xd0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800

08004330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a17      	ldr	r2, [pc, #92]	@ (80043e4 <TIM_OC5_SetConfig+0xb4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC5_SetConfig+0x7a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <TIM_OC5_SetConfig+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC5_SetConfig+0x7a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <TIM_OC5_SetConfig+0xbc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC5_SetConfig+0x7a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <TIM_OC5_SetConfig+0xc0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC5_SetConfig+0x7a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <TIM_OC5_SetConfig+0xc4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d109      	bne.n	80043be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800

080043f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800443e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	051b      	lsls	r3, r3, #20
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <TIM_OC6_SetConfig+0xb8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_OC6_SetConfig+0x7c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <TIM_OC6_SetConfig+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_OC6_SetConfig+0x7c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <TIM_OC6_SetConfig+0xc0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_OC6_SetConfig+0x7c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a15      	ldr	r2, [pc, #84]	@ (80044bc <TIM_OC6_SetConfig+0xc4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC6_SetConfig+0x7c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <TIM_OC6_SetConfig+0xc8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800447a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40013400 	.word	0x40013400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40014400 	.word	0x40014400
 80044c0:	40014800 	.word	0x40014800

080044c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2201      	movs	r2, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e063      	b.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2b      	ldr	r2, [pc, #172]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1b      	ldr	r2, [pc, #108]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459a:	d013      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40014000 	.word	0x40014000

08004610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e065      	b.n	80046f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a14      	ldr	r2, [pc, #80]	@ (8004708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d115      	bne.n	80046e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	051b      	lsls	r3, r3, #20
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40013400 	.word	0x40013400

0800470c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004714:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004718:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	b29b      	uxth	r3, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	b29b      	uxth	r3, r3
 800472a:	4013      	ands	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <sniprintf>:
 8004780:	b40c      	push	{r2, r3}
 8004782:	b530      	push	{r4, r5, lr}
 8004784:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <sniprintf+0x68>)
 8004786:	1e0c      	subs	r4, r1, #0
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	b09d      	sub	sp, #116	@ 0x74
 800478c:	da08      	bge.n	80047a0 <sniprintf+0x20>
 800478e:	238b      	movs	r3, #139	@ 0x8b
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	b01d      	add	sp, #116	@ 0x74
 8004798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800479c:	b002      	add	sp, #8
 800479e:	4770      	bx	lr
 80047a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80047a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80047ae:	bf14      	ite	ne
 80047b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80047b4:	4623      	moveq	r3, r4
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	9307      	str	r3, [sp, #28]
 80047ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047be:	9002      	str	r0, [sp, #8]
 80047c0:	9006      	str	r0, [sp, #24]
 80047c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80047c8:	ab21      	add	r3, sp, #132	@ 0x84
 80047ca:	a902      	add	r1, sp, #8
 80047cc:	4628      	mov	r0, r5
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f000 f994 	bl	8004afc <_svfiprintf_r>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	bfbc      	itt	lt
 80047d8:	238b      	movlt	r3, #139	@ 0x8b
 80047da:	602b      	strlt	r3, [r5, #0]
 80047dc:	2c00      	cmp	r4, #0
 80047de:	d0da      	beq.n	8004796 <sniprintf+0x16>
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e7d6      	b.n	8004796 <sniprintf+0x16>
 80047e8:	20000010 	.word	0x20000010

080047ec <memset>:
 80047ec:	4402      	add	r2, r0
 80047ee:	4603      	mov	r3, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	@ (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000010 	.word	0x20000010

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	@ (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	@ (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	@ (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	@ (800484c <__libc_init_array+0x44>)
 800481c:	f000 fc64 	bl	80050e8 <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	080051a8 	.word	0x080051a8
 8004844:	080051a8 	.word	0x080051a8
 8004848:	080051a8 	.word	0x080051a8
 800484c:	080051ac 	.word	0x080051ac

08004850 <__retarget_lock_acquire_recursive>:
 8004850:	4770      	bx	lr

08004852 <__retarget_lock_release_recursive>:
 8004852:	4770      	bx	lr

08004854 <_free_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4605      	mov	r5, r0
 8004858:	2900      	cmp	r1, #0
 800485a:	d041      	beq.n	80048e0 <_free_r+0x8c>
 800485c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004860:	1f0c      	subs	r4, r1, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfb8      	it	lt
 8004866:	18e4      	addlt	r4, r4, r3
 8004868:	f000 f8e0 	bl	8004a2c <__malloc_lock>
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <_free_r+0x90>)
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	b933      	cbnz	r3, 8004880 <_free_r+0x2c>
 8004872:	6063      	str	r3, [r4, #4]
 8004874:	6014      	str	r4, [r2, #0]
 8004876:	4628      	mov	r0, r5
 8004878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800487c:	f000 b8dc 	b.w	8004a38 <__malloc_unlock>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d908      	bls.n	8004896 <_free_r+0x42>
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	1821      	adds	r1, r4, r0
 8004888:	428b      	cmp	r3, r1
 800488a:	bf01      	itttt	eq
 800488c:	6819      	ldreq	r1, [r3, #0]
 800488e:	685b      	ldreq	r3, [r3, #4]
 8004890:	1809      	addeq	r1, r1, r0
 8004892:	6021      	streq	r1, [r4, #0]
 8004894:	e7ed      	b.n	8004872 <_free_r+0x1e>
 8004896:	461a      	mov	r2, r3
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	b10b      	cbz	r3, 80048a0 <_free_r+0x4c>
 800489c:	42a3      	cmp	r3, r4
 800489e:	d9fa      	bls.n	8004896 <_free_r+0x42>
 80048a0:	6811      	ldr	r1, [r2, #0]
 80048a2:	1850      	adds	r0, r2, r1
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d10b      	bne.n	80048c0 <_free_r+0x6c>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	4401      	add	r1, r0
 80048ac:	1850      	adds	r0, r2, r1
 80048ae:	4283      	cmp	r3, r0
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	d1e0      	bne.n	8004876 <_free_r+0x22>
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	6053      	str	r3, [r2, #4]
 80048ba:	4408      	add	r0, r1
 80048bc:	6010      	str	r0, [r2, #0]
 80048be:	e7da      	b.n	8004876 <_free_r+0x22>
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x74>
 80048c2:	230c      	movs	r3, #12
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	e7d6      	b.n	8004876 <_free_r+0x22>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	1821      	adds	r1, r4, r0
 80048cc:	428b      	cmp	r3, r1
 80048ce:	bf04      	itt	eq
 80048d0:	6819      	ldreq	r1, [r3, #0]
 80048d2:	685b      	ldreq	r3, [r3, #4]
 80048d4:	6063      	str	r3, [r4, #4]
 80048d6:	bf04      	itt	eq
 80048d8:	1809      	addeq	r1, r1, r0
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	6054      	str	r4, [r2, #4]
 80048de:	e7ca      	b.n	8004876 <_free_r+0x22>
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	200005ac 	.word	0x200005ac

080048e8 <sbrk_aligned>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004928 <sbrk_aligned+0x40>)
 80048ec:	460c      	mov	r4, r1
 80048ee:	6831      	ldr	r1, [r6, #0]
 80048f0:	4605      	mov	r5, r0
 80048f2:	b911      	cbnz	r1, 80048fa <sbrk_aligned+0x12>
 80048f4:	f000 fba4 	bl	8005040 <_sbrk_r>
 80048f8:	6030      	str	r0, [r6, #0]
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 fb9f 	bl	8005040 <_sbrk_r>
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d103      	bne.n	800490e <sbrk_aligned+0x26>
 8004906:	f04f 34ff 	mov.w	r4, #4294967295
 800490a:	4620      	mov	r0, r4
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	1cc4      	adds	r4, r0, #3
 8004910:	f024 0403 	bic.w	r4, r4, #3
 8004914:	42a0      	cmp	r0, r4
 8004916:	d0f8      	beq.n	800490a <sbrk_aligned+0x22>
 8004918:	1a21      	subs	r1, r4, r0
 800491a:	4628      	mov	r0, r5
 800491c:	f000 fb90 	bl	8005040 <_sbrk_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d1f2      	bne.n	800490a <sbrk_aligned+0x22>
 8004924:	e7ef      	b.n	8004906 <sbrk_aligned+0x1e>
 8004926:	bf00      	nop
 8004928:	200005a8 	.word	0x200005a8

0800492c <_malloc_r>:
 800492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004930:	1ccd      	adds	r5, r1, #3
 8004932:	f025 0503 	bic.w	r5, r5, #3
 8004936:	3508      	adds	r5, #8
 8004938:	2d0c      	cmp	r5, #12
 800493a:	bf38      	it	cc
 800493c:	250c      	movcc	r5, #12
 800493e:	2d00      	cmp	r5, #0
 8004940:	4606      	mov	r6, r0
 8004942:	db01      	blt.n	8004948 <_malloc_r+0x1c>
 8004944:	42a9      	cmp	r1, r5
 8004946:	d904      	bls.n	8004952 <_malloc_r+0x26>
 8004948:	230c      	movs	r3, #12
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	2000      	movs	r0, #0
 800494e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a28 <_malloc_r+0xfc>
 8004956:	f000 f869 	bl	8004a2c <__malloc_lock>
 800495a:	f8d8 3000 	ldr.w	r3, [r8]
 800495e:	461c      	mov	r4, r3
 8004960:	bb44      	cbnz	r4, 80049b4 <_malloc_r+0x88>
 8004962:	4629      	mov	r1, r5
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff ffbf 	bl	80048e8 <sbrk_aligned>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	4604      	mov	r4, r0
 800496e:	d158      	bne.n	8004a22 <_malloc_r+0xf6>
 8004970:	f8d8 4000 	ldr.w	r4, [r8]
 8004974:	4627      	mov	r7, r4
 8004976:	2f00      	cmp	r7, #0
 8004978:	d143      	bne.n	8004a02 <_malloc_r+0xd6>
 800497a:	2c00      	cmp	r4, #0
 800497c:	d04b      	beq.n	8004a16 <_malloc_r+0xea>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	eb04 0903 	add.w	r9, r4, r3
 8004988:	f000 fb5a 	bl	8005040 <_sbrk_r>
 800498c:	4581      	cmp	r9, r0
 800498e:	d142      	bne.n	8004a16 <_malloc_r+0xea>
 8004990:	6821      	ldr	r1, [r4, #0]
 8004992:	1a6d      	subs	r5, r5, r1
 8004994:	4629      	mov	r1, r5
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff ffa6 	bl	80048e8 <sbrk_aligned>
 800499c:	3001      	adds	r0, #1
 800499e:	d03a      	beq.n	8004a16 <_malloc_r+0xea>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	442b      	add	r3, r5
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	f8d8 3000 	ldr.w	r3, [r8]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	bb62      	cbnz	r2, 8004a08 <_malloc_r+0xdc>
 80049ae:	f8c8 7000 	str.w	r7, [r8]
 80049b2:	e00f      	b.n	80049d4 <_malloc_r+0xa8>
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	1b52      	subs	r2, r2, r5
 80049b8:	d420      	bmi.n	80049fc <_malloc_r+0xd0>
 80049ba:	2a0b      	cmp	r2, #11
 80049bc:	d917      	bls.n	80049ee <_malloc_r+0xc2>
 80049be:	1961      	adds	r1, r4, r5
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	6025      	str	r5, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	6059      	strne	r1, [r3, #4]
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	bf08      	it	eq
 80049cc:	f8c8 1000 	streq.w	r1, [r8]
 80049d0:	5162      	str	r2, [r4, r5]
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f82f 	bl	8004a38 <__malloc_unlock>
 80049da:	f104 000b 	add.w	r0, r4, #11
 80049de:	1d23      	adds	r3, r4, #4
 80049e0:	f020 0007 	bic.w	r0, r0, #7
 80049e4:	1ac2      	subs	r2, r0, r3
 80049e6:	bf1c      	itt	ne
 80049e8:	1a1b      	subne	r3, r3, r0
 80049ea:	50a3      	strne	r3, [r4, r2]
 80049ec:	e7af      	b.n	800494e <_malloc_r+0x22>
 80049ee:	6862      	ldr	r2, [r4, #4]
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	bf0c      	ite	eq
 80049f4:	f8c8 2000 	streq.w	r2, [r8]
 80049f8:	605a      	strne	r2, [r3, #4]
 80049fa:	e7eb      	b.n	80049d4 <_malloc_r+0xa8>
 80049fc:	4623      	mov	r3, r4
 80049fe:	6864      	ldr	r4, [r4, #4]
 8004a00:	e7ae      	b.n	8004960 <_malloc_r+0x34>
 8004a02:	463c      	mov	r4, r7
 8004a04:	687f      	ldr	r7, [r7, #4]
 8004a06:	e7b6      	b.n	8004976 <_malloc_r+0x4a>
 8004a08:	461a      	mov	r2, r3
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d1fb      	bne.n	8004a08 <_malloc_r+0xdc>
 8004a10:	2300      	movs	r3, #0
 8004a12:	6053      	str	r3, [r2, #4]
 8004a14:	e7de      	b.n	80049d4 <_malloc_r+0xa8>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6033      	str	r3, [r6, #0]
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f80c 	bl	8004a38 <__malloc_unlock>
 8004a20:	e794      	b.n	800494c <_malloc_r+0x20>
 8004a22:	6005      	str	r5, [r0, #0]
 8004a24:	e7d6      	b.n	80049d4 <_malloc_r+0xa8>
 8004a26:	bf00      	nop
 8004a28:	200005ac 	.word	0x200005ac

08004a2c <__malloc_lock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__malloc_lock+0x8>)
 8004a2e:	f7ff bf0f 	b.w	8004850 <__retarget_lock_acquire_recursive>
 8004a32:	bf00      	nop
 8004a34:	200005a4 	.word	0x200005a4

08004a38 <__malloc_unlock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__malloc_unlock+0x8>)
 8004a3a:	f7ff bf0a 	b.w	8004852 <__retarget_lock_release_recursive>
 8004a3e:	bf00      	nop
 8004a40:	200005a4 	.word	0x200005a4

08004a44 <__ssputs_r>:
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	688e      	ldr	r6, [r1, #8]
 8004a4a:	461f      	mov	r7, r3
 8004a4c:	42be      	cmp	r6, r7
 8004a4e:	680b      	ldr	r3, [r1, #0]
 8004a50:	4682      	mov	sl, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	4690      	mov	r8, r2
 8004a56:	d82d      	bhi.n	8004ab4 <__ssputs_r+0x70>
 8004a58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a60:	d026      	beq.n	8004ab0 <__ssputs_r+0x6c>
 8004a62:	6965      	ldr	r5, [r4, #20]
 8004a64:	6909      	ldr	r1, [r1, #16]
 8004a66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a6a:	eba3 0901 	sub.w	r9, r3, r1
 8004a6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a72:	1c7b      	adds	r3, r7, #1
 8004a74:	444b      	add	r3, r9
 8004a76:	106d      	asrs	r5, r5, #1
 8004a78:	429d      	cmp	r5, r3
 8004a7a:	bf38      	it	cc
 8004a7c:	461d      	movcc	r5, r3
 8004a7e:	0553      	lsls	r3, r2, #21
 8004a80:	d527      	bpl.n	8004ad2 <__ssputs_r+0x8e>
 8004a82:	4629      	mov	r1, r5
 8004a84:	f7ff ff52 	bl	800492c <_malloc_r>
 8004a88:	4606      	mov	r6, r0
 8004a8a:	b360      	cbz	r0, 8004ae6 <__ssputs_r+0xa2>
 8004a8c:	6921      	ldr	r1, [r4, #16]
 8004a8e:	464a      	mov	r2, r9
 8004a90:	f000 fae6 	bl	8005060 <memcpy>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	6126      	str	r6, [r4, #16]
 8004aa2:	6165      	str	r5, [r4, #20]
 8004aa4:	444e      	add	r6, r9
 8004aa6:	eba5 0509 	sub.w	r5, r5, r9
 8004aaa:	6026      	str	r6, [r4, #0]
 8004aac:	60a5      	str	r5, [r4, #8]
 8004aae:	463e      	mov	r6, r7
 8004ab0:	42be      	cmp	r6, r7
 8004ab2:	d900      	bls.n	8004ab6 <__ssputs_r+0x72>
 8004ab4:	463e      	mov	r6, r7
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4632      	mov	r2, r6
 8004aba:	4641      	mov	r1, r8
 8004abc:	f000 faa6 	bl	800500c <memmove>
 8004ac0:	68a3      	ldr	r3, [r4, #8]
 8004ac2:	1b9b      	subs	r3, r3, r6
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	4433      	add	r3, r6
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	2000      	movs	r0, #0
 8004ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	f000 fad2 	bl	800507c <_realloc_r>
 8004ad8:	4606      	mov	r6, r0
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d1e0      	bne.n	8004aa0 <__ssputs_r+0x5c>
 8004ade:	6921      	ldr	r1, [r4, #16]
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	f7ff feb7 	bl	8004854 <_free_r>
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	f8ca 3000 	str.w	r3, [sl]
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e7e9      	b.n	8004ace <__ssputs_r+0x8a>
	...

08004afc <_svfiprintf_r>:
 8004afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b00:	4698      	mov	r8, r3
 8004b02:	898b      	ldrh	r3, [r1, #12]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	b09d      	sub	sp, #116	@ 0x74
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	d510      	bpl.n	8004b32 <_svfiprintf_r+0x36>
 8004b10:	690b      	ldr	r3, [r1, #16]
 8004b12:	b973      	cbnz	r3, 8004b32 <_svfiprintf_r+0x36>
 8004b14:	2140      	movs	r1, #64	@ 0x40
 8004b16:	f7ff ff09 	bl	800492c <_malloc_r>
 8004b1a:	6028      	str	r0, [r5, #0]
 8004b1c:	6128      	str	r0, [r5, #16]
 8004b1e:	b930      	cbnz	r0, 8004b2e <_svfiprintf_r+0x32>
 8004b20:	230c      	movs	r3, #12
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	b01d      	add	sp, #116	@ 0x74
 8004b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2e:	2340      	movs	r3, #64	@ 0x40
 8004b30:	616b      	str	r3, [r5, #20]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b36:	2320      	movs	r3, #32
 8004b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b40:	2330      	movs	r3, #48	@ 0x30
 8004b42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ce0 <_svfiprintf_r+0x1e4>
 8004b46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b4a:	f04f 0901 	mov.w	r9, #1
 8004b4e:	4623      	mov	r3, r4
 8004b50:	469a      	mov	sl, r3
 8004b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b56:	b10a      	cbz	r2, 8004b5c <_svfiprintf_r+0x60>
 8004b58:	2a25      	cmp	r2, #37	@ 0x25
 8004b5a:	d1f9      	bne.n	8004b50 <_svfiprintf_r+0x54>
 8004b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b60:	d00b      	beq.n	8004b7a <_svfiprintf_r+0x7e>
 8004b62:	465b      	mov	r3, fp
 8004b64:	4622      	mov	r2, r4
 8004b66:	4629      	mov	r1, r5
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff ff6b 	bl	8004a44 <__ssputs_r>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f000 80a7 	beq.w	8004cc2 <_svfiprintf_r+0x1c6>
 8004b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b76:	445a      	add	r2, fp
 8004b78:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 809f 	beq.w	8004cc2 <_svfiprintf_r+0x1c6>
 8004b84:	2300      	movs	r3, #0
 8004b86:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8e:	f10a 0a01 	add.w	sl, sl, #1
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	9307      	str	r3, [sp, #28]
 8004b96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b9c:	4654      	mov	r4, sl
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba4:	484e      	ldr	r0, [pc, #312]	@ (8004ce0 <_svfiprintf_r+0x1e4>)
 8004ba6:	f7fb fb13 	bl	80001d0 <memchr>
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	b9d8      	cbnz	r0, 8004be6 <_svfiprintf_r+0xea>
 8004bae:	06d0      	lsls	r0, r2, #27
 8004bb0:	bf44      	itt	mi
 8004bb2:	2320      	movmi	r3, #32
 8004bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bb8:	0711      	lsls	r1, r2, #28
 8004bba:	bf44      	itt	mi
 8004bbc:	232b      	movmi	r3, #43	@ 0x2b
 8004bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bc8:	d015      	beq.n	8004bf6 <_svfiprintf_r+0xfa>
 8004bca:	9a07      	ldr	r2, [sp, #28]
 8004bcc:	4654      	mov	r4, sl
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f04f 0c0a 	mov.w	ip, #10
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bda:	3b30      	subs	r3, #48	@ 0x30
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d94b      	bls.n	8004c78 <_svfiprintf_r+0x17c>
 8004be0:	b1b0      	cbz	r0, 8004c10 <_svfiprintf_r+0x114>
 8004be2:	9207      	str	r2, [sp, #28]
 8004be4:	e014      	b.n	8004c10 <_svfiprintf_r+0x114>
 8004be6:	eba0 0308 	sub.w	r3, r0, r8
 8004bea:	fa09 f303 	lsl.w	r3, r9, r3
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	9304      	str	r3, [sp, #16]
 8004bf2:	46a2      	mov	sl, r4
 8004bf4:	e7d2      	b.n	8004b9c <_svfiprintf_r+0xa0>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	1d19      	adds	r1, r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	9103      	str	r1, [sp, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfbb      	ittet	lt
 8004c02:	425b      	neglt	r3, r3
 8004c04:	f042 0202 	orrlt.w	r2, r2, #2
 8004c08:	9307      	strge	r3, [sp, #28]
 8004c0a:	9307      	strlt	r3, [sp, #28]
 8004c0c:	bfb8      	it	lt
 8004c0e:	9204      	strlt	r2, [sp, #16]
 8004c10:	7823      	ldrb	r3, [r4, #0]
 8004c12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c14:	d10a      	bne.n	8004c2c <_svfiprintf_r+0x130>
 8004c16:	7863      	ldrb	r3, [r4, #1]
 8004c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1a:	d132      	bne.n	8004c82 <_svfiprintf_r+0x186>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9203      	str	r2, [sp, #12]
 8004c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c28:	3402      	adds	r4, #2
 8004c2a:	9305      	str	r3, [sp, #20]
 8004c2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cf0 <_svfiprintf_r+0x1f4>
 8004c30:	7821      	ldrb	r1, [r4, #0]
 8004c32:	2203      	movs	r2, #3
 8004c34:	4650      	mov	r0, sl
 8004c36:	f7fb facb 	bl	80001d0 <memchr>
 8004c3a:	b138      	cbz	r0, 8004c4c <_svfiprintf_r+0x150>
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	eba0 000a 	sub.w	r0, r0, sl
 8004c42:	2240      	movs	r2, #64	@ 0x40
 8004c44:	4082      	lsls	r2, r0
 8004c46:	4313      	orrs	r3, r2
 8004c48:	3401      	adds	r4, #1
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c50:	4824      	ldr	r0, [pc, #144]	@ (8004ce4 <_svfiprintf_r+0x1e8>)
 8004c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c56:	2206      	movs	r2, #6
 8004c58:	f7fb faba 	bl	80001d0 <memchr>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d036      	beq.n	8004cce <_svfiprintf_r+0x1d2>
 8004c60:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <_svfiprintf_r+0x1ec>)
 8004c62:	bb1b      	cbnz	r3, 8004cac <_svfiprintf_r+0x1b0>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	3307      	adds	r3, #7
 8004c68:	f023 0307 	bic.w	r3, r3, #7
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c72:	4433      	add	r3, r6
 8004c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c76:	e76a      	b.n	8004b4e <_svfiprintf_r+0x52>
 8004c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	e7a8      	b.n	8004bd4 <_svfiprintf_r+0xd8>
 8004c82:	2300      	movs	r3, #0
 8004c84:	3401      	adds	r4, #1
 8004c86:	9305      	str	r3, [sp, #20]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f04f 0c0a 	mov.w	ip, #10
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c94:	3a30      	subs	r2, #48	@ 0x30
 8004c96:	2a09      	cmp	r2, #9
 8004c98:	d903      	bls.n	8004ca2 <_svfiprintf_r+0x1a6>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0c6      	beq.n	8004c2c <_svfiprintf_r+0x130>
 8004c9e:	9105      	str	r1, [sp, #20]
 8004ca0:	e7c4      	b.n	8004c2c <_svfiprintf_r+0x130>
 8004ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e7f0      	b.n	8004c8e <_svfiprintf_r+0x192>
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	462a      	mov	r2, r5
 8004cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cec <_svfiprintf_r+0x1f0>)
 8004cb4:	a904      	add	r1, sp, #16
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f3af 8000 	nop.w
 8004cbc:	1c42      	adds	r2, r0, #1
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	d1d6      	bne.n	8004c70 <_svfiprintf_r+0x174>
 8004cc2:	89ab      	ldrh	r3, [r5, #12]
 8004cc4:	065b      	lsls	r3, r3, #25
 8004cc6:	f53f af2d 	bmi.w	8004b24 <_svfiprintf_r+0x28>
 8004cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ccc:	e72c      	b.n	8004b28 <_svfiprintf_r+0x2c>
 8004cce:	ab03      	add	r3, sp, #12
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <_svfiprintf_r+0x1f0>)
 8004cd6:	a904      	add	r1, sp, #16
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f000 f879 	bl	8004dd0 <_printf_i>
 8004cde:	e7ed      	b.n	8004cbc <_svfiprintf_r+0x1c0>
 8004ce0:	0800516c 	.word	0x0800516c
 8004ce4:	08005176 	.word	0x08005176
 8004ce8:	00000000 	.word	0x00000000
 8004cec:	08004a45 	.word	0x08004a45
 8004cf0:	08005172 	.word	0x08005172

08004cf4 <_printf_common>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	4698      	mov	r8, r3
 8004cfc:	688a      	ldr	r2, [r1, #8]
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfb8      	it	lt
 8004d08:	4613      	movlt	r3, r2
 8004d0a:	6033      	str	r3, [r6, #0]
 8004d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d10:	4607      	mov	r7, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	b10a      	cbz	r2, 8004d1a <_printf_common+0x26>
 8004d16:	3301      	adds	r3, #1
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	0699      	lsls	r1, r3, #26
 8004d1e:	bf42      	ittt	mi
 8004d20:	6833      	ldrmi	r3, [r6, #0]
 8004d22:	3302      	addmi	r3, #2
 8004d24:	6033      	strmi	r3, [r6, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	f015 0506 	ands.w	r5, r5, #6
 8004d2c:	d106      	bne.n	8004d3c <_printf_common+0x48>
 8004d2e:	f104 0a19 	add.w	sl, r4, #25
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	dc26      	bgt.n	8004d8a <_printf_common+0x96>
 8004d3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	3b00      	subs	r3, #0
 8004d44:	bf18      	it	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	0692      	lsls	r2, r2, #26
 8004d4a:	d42b      	bmi.n	8004da4 <_printf_common+0xb0>
 8004d4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d50:	4641      	mov	r1, r8
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c8      	blx	r9
 8004d56:	3001      	adds	r0, #1
 8004d58:	d01e      	beq.n	8004d98 <_printf_common+0xa4>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	6922      	ldr	r2, [r4, #16]
 8004d5e:	f003 0306 	and.w	r3, r3, #6
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	bf02      	ittt	eq
 8004d66:	68e5      	ldreq	r5, [r4, #12]
 8004d68:	6833      	ldreq	r3, [r6, #0]
 8004d6a:	1aed      	subeq	r5, r5, r3
 8004d6c:	68a3      	ldr	r3, [r4, #8]
 8004d6e:	bf0c      	ite	eq
 8004d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d74:	2500      	movne	r5, #0
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bfc4      	itt	gt
 8004d7a:	1a9b      	subgt	r3, r3, r2
 8004d7c:	18ed      	addgt	r5, r5, r3
 8004d7e:	2600      	movs	r6, #0
 8004d80:	341a      	adds	r4, #26
 8004d82:	42b5      	cmp	r5, r6
 8004d84:	d11a      	bne.n	8004dbc <_printf_common+0xc8>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e008      	b.n	8004d9c <_printf_common+0xa8>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4641      	mov	r1, r8
 8004d90:	4638      	mov	r0, r7
 8004d92:	47c8      	blx	r9
 8004d94:	3001      	adds	r0, #1
 8004d96:	d103      	bne.n	8004da0 <_printf_common+0xac>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	3501      	adds	r5, #1
 8004da2:	e7c6      	b.n	8004d32 <_printf_common+0x3e>
 8004da4:	18e1      	adds	r1, r4, r3
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	2030      	movs	r0, #48	@ 0x30
 8004daa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dae:	4422      	add	r2, r4
 8004db0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004db8:	3302      	adds	r3, #2
 8004dba:	e7c7      	b.n	8004d4c <_printf_common+0x58>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c8      	blx	r9
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d0e6      	beq.n	8004d98 <_printf_common+0xa4>
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7d9      	b.n	8004d82 <_printf_common+0x8e>
	...

08004dd0 <_printf_i>:
 8004dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	7e0f      	ldrb	r7, [r1, #24]
 8004dd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dd8:	2f78      	cmp	r7, #120	@ 0x78
 8004dda:	4691      	mov	r9, r2
 8004ddc:	4680      	mov	r8, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	469a      	mov	sl, r3
 8004de2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004de6:	d807      	bhi.n	8004df8 <_printf_i+0x28>
 8004de8:	2f62      	cmp	r7, #98	@ 0x62
 8004dea:	d80a      	bhi.n	8004e02 <_printf_i+0x32>
 8004dec:	2f00      	cmp	r7, #0
 8004dee:	f000 80d1 	beq.w	8004f94 <_printf_i+0x1c4>
 8004df2:	2f58      	cmp	r7, #88	@ 0x58
 8004df4:	f000 80b8 	beq.w	8004f68 <_printf_i+0x198>
 8004df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e00:	e03a      	b.n	8004e78 <_printf_i+0xa8>
 8004e02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e06:	2b15      	cmp	r3, #21
 8004e08:	d8f6      	bhi.n	8004df8 <_printf_i+0x28>
 8004e0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e10 <_printf_i+0x40>)
 8004e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e10:	08004e69 	.word	0x08004e69
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004df9 	.word	0x08004df9
 8004e1c:	08004df9 	.word	0x08004df9
 8004e20:	08004df9 	.word	0x08004df9
 8004e24:	08004df9 	.word	0x08004df9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004df9 	.word	0x08004df9
 8004e30:	08004df9 	.word	0x08004df9
 8004e34:	08004df9 	.word	0x08004df9
 8004e38:	08004df9 	.word	0x08004df9
 8004e3c:	08004f7b 	.word	0x08004f7b
 8004e40:	08004ea7 	.word	0x08004ea7
 8004e44:	08004f35 	.word	0x08004f35
 8004e48:	08004df9 	.word	0x08004df9
 8004e4c:	08004df9 	.word	0x08004df9
 8004e50:	08004f9d 	.word	0x08004f9d
 8004e54:	08004df9 	.word	0x08004df9
 8004e58:	08004ea7 	.word	0x08004ea7
 8004e5c:	08004df9 	.word	0x08004df9
 8004e60:	08004df9 	.word	0x08004df9
 8004e64:	08004f3d 	.word	0x08004f3d
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6032      	str	r2, [r6, #0]
 8004e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e09c      	b.n	8004fb6 <_printf_i+0x1e6>
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	6031      	str	r1, [r6, #0]
 8004e84:	0606      	lsls	r6, r0, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0xbc>
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	e003      	b.n	8004e94 <_printf_i+0xc4>
 8004e8c:	0645      	lsls	r5, r0, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0xb8>
 8004e90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	da03      	bge.n	8004ea0 <_printf_i+0xd0>
 8004e98:	232d      	movs	r3, #45	@ 0x2d
 8004e9a:	426d      	negs	r5, r5
 8004e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea0:	4858      	ldr	r0, [pc, #352]	@ (8005004 <_printf_i+0x234>)
 8004ea2:	230a      	movs	r3, #10
 8004ea4:	e011      	b.n	8004eca <_printf_i+0xfa>
 8004ea6:	6821      	ldr	r1, [r4, #0]
 8004ea8:	6833      	ldr	r3, [r6, #0]
 8004eaa:	0608      	lsls	r0, r1, #24
 8004eac:	f853 5b04 	ldr.w	r5, [r3], #4
 8004eb0:	d402      	bmi.n	8004eb8 <_printf_i+0xe8>
 8004eb2:	0649      	lsls	r1, r1, #25
 8004eb4:	bf48      	it	mi
 8004eb6:	b2ad      	uxthmi	r5, r5
 8004eb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eba:	4852      	ldr	r0, [pc, #328]	@ (8005004 <_printf_i+0x234>)
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	bf14      	ite	ne
 8004ec0:	230a      	movne	r3, #10
 8004ec2:	2308      	moveq	r3, #8
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eca:	6866      	ldr	r6, [r4, #4]
 8004ecc:	60a6      	str	r6, [r4, #8]
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	db05      	blt.n	8004ede <_printf_i+0x10e>
 8004ed2:	6821      	ldr	r1, [r4, #0]
 8004ed4:	432e      	orrs	r6, r5
 8004ed6:	f021 0104 	bic.w	r1, r1, #4
 8004eda:	6021      	str	r1, [r4, #0]
 8004edc:	d04b      	beq.n	8004f76 <_printf_i+0x1a6>
 8004ede:	4616      	mov	r6, r2
 8004ee0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ee4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ee8:	5dc7      	ldrb	r7, [r0, r7]
 8004eea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eee:	462f      	mov	r7, r5
 8004ef0:	42bb      	cmp	r3, r7
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	d9f4      	bls.n	8004ee0 <_printf_i+0x110>
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d10b      	bne.n	8004f12 <_printf_i+0x142>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	07df      	lsls	r7, r3, #31
 8004efe:	d508      	bpl.n	8004f12 <_printf_i+0x142>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	6861      	ldr	r1, [r4, #4]
 8004f04:	4299      	cmp	r1, r3
 8004f06:	bfde      	ittt	le
 8004f08:	2330      	movle	r3, #48	@ 0x30
 8004f0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f12:	1b92      	subs	r2, r2, r6
 8004f14:	6122      	str	r2, [r4, #16]
 8004f16:	f8cd a000 	str.w	sl, [sp]
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	aa03      	add	r2, sp, #12
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4640      	mov	r0, r8
 8004f22:	f7ff fee7 	bl	8004cf4 <_printf_common>
 8004f26:	3001      	adds	r0, #1
 8004f28:	d14a      	bne.n	8004fc0 <_printf_i+0x1f0>
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2e:	b004      	add	sp, #16
 8004f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	f043 0320 	orr.w	r3, r3, #32
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	4832      	ldr	r0, [pc, #200]	@ (8005008 <_printf_i+0x238>)
 8004f3e:	2778      	movs	r7, #120	@ 0x78
 8004f40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	061f      	lsls	r7, r3, #24
 8004f4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f4e:	d402      	bmi.n	8004f56 <_printf_i+0x186>
 8004f50:	065f      	lsls	r7, r3, #25
 8004f52:	bf48      	it	mi
 8004f54:	b2ad      	uxthmi	r5, r5
 8004f56:	6031      	str	r1, [r6, #0]
 8004f58:	07d9      	lsls	r1, r3, #31
 8004f5a:	bf44      	itt	mi
 8004f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f60:	6023      	strmi	r3, [r4, #0]
 8004f62:	b11d      	cbz	r5, 8004f6c <_printf_i+0x19c>
 8004f64:	2310      	movs	r3, #16
 8004f66:	e7ad      	b.n	8004ec4 <_printf_i+0xf4>
 8004f68:	4826      	ldr	r0, [pc, #152]	@ (8005004 <_printf_i+0x234>)
 8004f6a:	e7e9      	b.n	8004f40 <_printf_i+0x170>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	f023 0320 	bic.w	r3, r3, #32
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	e7f6      	b.n	8004f64 <_printf_i+0x194>
 8004f76:	4616      	mov	r6, r2
 8004f78:	e7bd      	b.n	8004ef6 <_printf_i+0x126>
 8004f7a:	6833      	ldr	r3, [r6, #0]
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	6961      	ldr	r1, [r4, #20]
 8004f80:	1d18      	adds	r0, r3, #4
 8004f82:	6030      	str	r0, [r6, #0]
 8004f84:	062e      	lsls	r6, r5, #24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	d501      	bpl.n	8004f8e <_printf_i+0x1be>
 8004f8a:	6019      	str	r1, [r3, #0]
 8004f8c:	e002      	b.n	8004f94 <_printf_i+0x1c4>
 8004f8e:	0668      	lsls	r0, r5, #25
 8004f90:	d5fb      	bpl.n	8004f8a <_printf_i+0x1ba>
 8004f92:	8019      	strh	r1, [r3, #0]
 8004f94:	2300      	movs	r3, #0
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	4616      	mov	r6, r2
 8004f9a:	e7bc      	b.n	8004f16 <_printf_i+0x146>
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	6032      	str	r2, [r6, #0]
 8004fa2:	681e      	ldr	r6, [r3, #0]
 8004fa4:	6862      	ldr	r2, [r4, #4]
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f7fb f911 	bl	80001d0 <memchr>
 8004fae:	b108      	cbz	r0, 8004fb4 <_printf_i+0x1e4>
 8004fb0:	1b80      	subs	r0, r0, r6
 8004fb2:	6060      	str	r0, [r4, #4]
 8004fb4:	6863      	ldr	r3, [r4, #4]
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fbe:	e7aa      	b.n	8004f16 <_printf_i+0x146>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	47d0      	blx	sl
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0ad      	beq.n	8004f2a <_printf_i+0x15a>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	079b      	lsls	r3, r3, #30
 8004fd2:	d413      	bmi.n	8004ffc <_printf_i+0x22c>
 8004fd4:	68e0      	ldr	r0, [r4, #12]
 8004fd6:	9b03      	ldr	r3, [sp, #12]
 8004fd8:	4298      	cmp	r0, r3
 8004fda:	bfb8      	it	lt
 8004fdc:	4618      	movlt	r0, r3
 8004fde:	e7a6      	b.n	8004f2e <_printf_i+0x15e>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	47d0      	blx	sl
 8004fea:	3001      	adds	r0, #1
 8004fec:	d09d      	beq.n	8004f2a <_printf_i+0x15a>
 8004fee:	3501      	adds	r5, #1
 8004ff0:	68e3      	ldr	r3, [r4, #12]
 8004ff2:	9903      	ldr	r1, [sp, #12]
 8004ff4:	1a5b      	subs	r3, r3, r1
 8004ff6:	42ab      	cmp	r3, r5
 8004ff8:	dcf2      	bgt.n	8004fe0 <_printf_i+0x210>
 8004ffa:	e7eb      	b.n	8004fd4 <_printf_i+0x204>
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	f104 0619 	add.w	r6, r4, #25
 8005002:	e7f5      	b.n	8004ff0 <_printf_i+0x220>
 8005004:	0800517d 	.word	0x0800517d
 8005008:	0800518e 	.word	0x0800518e

0800500c <memmove>:
 800500c:	4288      	cmp	r0, r1
 800500e:	b510      	push	{r4, lr}
 8005010:	eb01 0402 	add.w	r4, r1, r2
 8005014:	d902      	bls.n	800501c <memmove+0x10>
 8005016:	4284      	cmp	r4, r0
 8005018:	4623      	mov	r3, r4
 800501a:	d807      	bhi.n	800502c <memmove+0x20>
 800501c:	1e43      	subs	r3, r0, #1
 800501e:	42a1      	cmp	r1, r4
 8005020:	d008      	beq.n	8005034 <memmove+0x28>
 8005022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800502a:	e7f8      	b.n	800501e <memmove+0x12>
 800502c:	4402      	add	r2, r0
 800502e:	4601      	mov	r1, r0
 8005030:	428a      	cmp	r2, r1
 8005032:	d100      	bne.n	8005036 <memmove+0x2a>
 8005034:	bd10      	pop	{r4, pc}
 8005036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800503a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800503e:	e7f7      	b.n	8005030 <memmove+0x24>

08005040 <_sbrk_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d06      	ldr	r5, [pc, #24]	@ (800505c <_sbrk_r+0x1c>)
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	f7fb ff38 	bl	8000ec0 <_sbrk>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_sbrk_r+0x1a>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_sbrk_r+0x1a>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	200005a0 	.word	0x200005a0

08005060 <memcpy>:
 8005060:	440a      	add	r2, r1
 8005062:	4291      	cmp	r1, r2
 8005064:	f100 33ff 	add.w	r3, r0, #4294967295
 8005068:	d100      	bne.n	800506c <memcpy+0xc>
 800506a:	4770      	bx	lr
 800506c:	b510      	push	{r4, lr}
 800506e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005076:	4291      	cmp	r1, r2
 8005078:	d1f9      	bne.n	800506e <memcpy+0xe>
 800507a:	bd10      	pop	{r4, pc}

0800507c <_realloc_r>:
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4607      	mov	r7, r0
 8005082:	4614      	mov	r4, r2
 8005084:	460d      	mov	r5, r1
 8005086:	b921      	cbnz	r1, 8005092 <_realloc_r+0x16>
 8005088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	4611      	mov	r1, r2
 800508e:	f7ff bc4d 	b.w	800492c <_malloc_r>
 8005092:	b92a      	cbnz	r2, 80050a0 <_realloc_r+0x24>
 8005094:	f7ff fbde 	bl	8004854 <_free_r>
 8005098:	4625      	mov	r5, r4
 800509a:	4628      	mov	r0, r5
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	f000 f81a 	bl	80050d8 <_malloc_usable_size_r>
 80050a4:	4284      	cmp	r4, r0
 80050a6:	4606      	mov	r6, r0
 80050a8:	d802      	bhi.n	80050b0 <_realloc_r+0x34>
 80050aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050ae:	d8f4      	bhi.n	800509a <_realloc_r+0x1e>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff fc3a 	bl	800492c <_malloc_r>
 80050b8:	4680      	mov	r8, r0
 80050ba:	b908      	cbnz	r0, 80050c0 <_realloc_r+0x44>
 80050bc:	4645      	mov	r5, r8
 80050be:	e7ec      	b.n	800509a <_realloc_r+0x1e>
 80050c0:	42b4      	cmp	r4, r6
 80050c2:	4622      	mov	r2, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	bf28      	it	cs
 80050c8:	4632      	movcs	r2, r6
 80050ca:	f7ff ffc9 	bl	8005060 <memcpy>
 80050ce:	4629      	mov	r1, r5
 80050d0:	4638      	mov	r0, r7
 80050d2:	f7ff fbbf 	bl	8004854 <_free_r>
 80050d6:	e7f1      	b.n	80050bc <_realloc_r+0x40>

080050d8 <_malloc_usable_size_r>:
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f18      	subs	r0, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfbc      	itt	lt
 80050e2:	580b      	ldrlt	r3, [r1, r0]
 80050e4:	18c0      	addlt	r0, r0, r3
 80050e6:	4770      	bx	lr

080050e8 <_init>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr

080050f4 <_fini>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr
