
QuickParkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005318  08005318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053b8  080053b8  000063b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c0  080053c0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080053c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00000554  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012baf  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b16  00000000  00000000  00019c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0001c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfd  00000000  00000000  0001d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e798  00000000  00000000  0001e735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bd5  00000000  00000000  0003cecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8db0  00000000  00000000  00053aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c852  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005084  00000000  00000000  0010c898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0011191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005300 	.word	0x08005300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005300 	.word	0x08005300

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <display_init>:
#define SERVO_UP 1500
#define SERVO_DOWN 500

extern TIM_HandleTypeDef htim1; // Riferimento alla nostra interfaccia TIM1

void display_init(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Inizializza il PWM per il servomotore di ingresso
 8000274:	2100      	movs	r1, #0
 8000276:	4811      	ldr	r0, [pc, #68]	@ (80002bc <display_init+0x4c>)
 8000278:	f003 fcaa 	bl	8003bd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Inizializza il PWM per il servomotore di uscita
 800027c:	2104      	movs	r1, #4
 800027e:	480f      	ldr	r0, [pc, #60]	@ (80002bc <display_init+0x4c>)
 8000280:	f003 fca6 	bl	8003bd0 <HAL_TIM_PWM_Start>
	lcd_init(); // Inizializza il display
 8000284:	f000 f8ff 	bl	8000486 <lcd_init>
	Servo_Entrance_Close();
 8000288:	f000 f81e 	bl	80002c8 <Servo_Entrance_Close>
	Servo_Exit_Close();
 800028c:	f000 f82a 	bl	80002e4 <Servo_Exit_Close>
	lcd_put_cur(0, 0);
 8000290:	2100      	movs	r1, #0
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8d8 	bl	8000448 <lcd_put_cur>
	lcd_send_string("QuickParkSTM");
 8000298:	4809      	ldr	r0, [pc, #36]	@ (80002c0 <display_init+0x50>)
 800029a:	f000 f931 	bl	8000500 <lcd_send_string>
	lcd_put_cur(1, 0);
 800029e:	2100      	movs	r1, #0
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f8d1 	bl	8000448 <lcd_put_cur>
	lcd_send_string("WELCOME!");
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <display_init+0x54>)
 80002a8:	f000 f92a 	bl	8000500 <lcd_send_string>
	HAL_Delay(3000);
 80002ac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002b0:	f000 ffea 	bl	8001288 <HAL_Delay>
	Display_Write();
 80002b4:	f000 f840 	bl	8000338 <Display_Write>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000134 	.word	0x20000134
 80002c0:	08005318 	.word	0x08005318
 80002c4:	08005328 	.word	0x08005328

080002c8 <Servo_Entrance_Close>:

    // Imposta il valore del compare register
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_length);
}*/

void Servo_Entrance_Close(void){
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	// Imposta la posizione iniziale a 0 gradi (impulso di 500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_DOWN);
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <Servo_Entrance_Close+0x18>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000134 	.word	0x20000134

080002e4 <Servo_Exit_Close>:

void Servo_Exit_Close(void){ //DA MODIFICARE TIM_CHANNEL
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	// Imposta la posizione iniziale a 0 gradi (impulso di 500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SERVO_DOWN);
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <Servo_Exit_Close+0x18>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000134 	.word	0x20000134

08000300 <Servo_Entrance_Open>:

void Servo_Entrance_Open(void){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	// Imposta la posizione desiderata a 90 gradi (impulso di 1500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_UP);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <Servo_Entrance_Open+0x18>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	20000134 	.word	0x20000134

0800031c <Servo_Exit_Open>:

void Servo_Exit_Open(void){ //DA MODIFICARE TIM_CHANNEL
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	// Imposta la posizione desiderata a 90 gradi (impulso di 1500)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SERVO_UP);
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <Servo_Exit_Open+0x18>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000328:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	20000134 	.word	0x20000134

08000338 <Display_Write>:

void Display_Write(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
	/*lcd_put_cur(0, 0); // Posiziona il cursore alla riga 0, colonna 0
	lcd_send_string("QuickParkSTM");*/
	if(sensors_get_free_slots() > 0){
 800033e:	f000 fbd5 	bl	8000aec <sensors_get_free_slots>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	dd10      	ble.n	800036a <Display_Write+0x32>
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
 8000348:	2100      	movs	r1, #0
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f87c 	bl	8000448 <lcd_put_cur>
		char buffer[32];
		snprintf(buffer, sizeof(buffer), "Slot Left: %d", sensors_get_free_slots());
 8000350:	f000 fbcc 	bl	8000aec <sensors_get_free_slots>
 8000354:	4603      	mov	r3, r0
 8000356:	4638      	mov	r0, r7
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <Display_Write+0x48>)
 800035a:	2120      	movs	r1, #32
 800035c:	f004 fb1c 	bl	8004998 <sniprintf>
		lcd_send_string(buffer);
 8000360:	463b      	mov	r3, r7
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f8cc 	bl	8000500 <lcd_send_string>
	else{
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
		lcd_send_string("Parking Full :(");
	}

}
 8000368:	e006      	b.n	8000378 <Display_Write+0x40>
		lcd_put_cur(1, 0); // Posiziona il cursore alla riga 1, colonna 0
 800036a:	2100      	movs	r1, #0
 800036c:	2001      	movs	r0, #1
 800036e:	f000 f86b 	bl	8000448 <lcd_put_cur>
		lcd_send_string("Parking Full :(");
 8000372:	4804      	ldr	r0, [pc, #16]	@ (8000384 <Display_Write+0x4c>)
 8000374:	f000 f8c4 	bl	8000500 <lcd_send_string>
}
 8000378:	bf00      	nop
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	08005334 	.word	0x08005334
 8000384:	08005344 	.word	0x08005344

08000388 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD 0x27 << 1 // Usa 0x27 per indirizzo 0x4E, o 0x3F per 0x7E

extern I2C_HandleTypeDef hi2c1;  // Riferimento alla nostra interfaccia I2C1

void lcd_send_cmd (char cmd)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af02      	add	r7, sp, #8
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f023 030f 	bic.w	r3, r3, #15
 8000398:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	011b      	lsls	r3, r3, #4
 800039e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	f043 030c 	orr.w	r3, r3, #12
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003c8:	f107 0208 	add.w	r2, r7, #8
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2304      	movs	r3, #4
 80003d2:	214e      	movs	r1, #78	@ 0x4e
 80003d4:	4803      	ldr	r0, [pc, #12]	@ (80003e4 <lcd_send_cmd+0x5c>)
 80003d6:	f001 faeb 	bl	80019b0 <HAL_I2C_Master_Transmit>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000007c 	.word	0x2000007c

080003e8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f023 030f 	bic.w	r3, r3, #15
 80003f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	011b      	lsls	r3, r3, #4
 80003fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f043 030d 	orr.w	r3, r3, #13
 8000406:	b2db      	uxtb	r3, r3
 8000408:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	f043 0309 	orr.w	r3, r3, #9
 8000410:	b2db      	uxtb	r3, r3
 8000412:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	f043 030d 	orr.w	r3, r3, #13
 800041a:	b2db      	uxtb	r3, r3
 800041c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	f043 0309 	orr.w	r3, r3, #9
 8000424:	b2db      	uxtb	r3, r3
 8000426:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000428:	f107 0208 	add.w	r2, r7, #8
 800042c:	2364      	movs	r3, #100	@ 0x64
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2304      	movs	r3, #4
 8000432:	214e      	movs	r1, #78	@ 0x4e
 8000434:	4803      	ldr	r0, [pc, #12]	@ (8000444 <lcd_send_data+0x5c>)
 8000436:	f001 fabb 	bl	80019b0 <HAL_I2C_Master_Transmit>
}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000007c 	.word	0x2000007c

08000448 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
    switch (row)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d003      	beq.n	8000460 <lcd_put_cur+0x18>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d005      	beq.n	800046a <lcd_put_cur+0x22>
 800045e:	e009      	b.n	8000474 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000466:	603b      	str	r3, [r7, #0]
            break;
 8000468:	e004      	b.n	8000474 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000470:	603b      	str	r3, [r7, #0]
            break;
 8000472:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff85 	bl	8000388 <lcd_send_cmd>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <lcd_init>:


void lcd_init (void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
	// Inizializzazione in modalità 4-bit
	HAL_Delay(50);
 800048a:	2032      	movs	r0, #50	@ 0x32
 800048c:	f000 fefc 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000490:	2030      	movs	r0, #48	@ 0x30
 8000492:	f7ff ff79 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(5);
 8000496:	2005      	movs	r0, #5
 8000498:	f000 fef6 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x30);
 800049c:	2030      	movs	r0, #48	@ 0x30
 800049e:	f7ff ff73 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fef0 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x30);
 80004a8:	2030      	movs	r0, #48	@ 0x30
 80004aa:	f7ff ff6d 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(10);
 80004ae:	200a      	movs	r0, #10
 80004b0:	f000 feea 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x20);  // Modalità 4 bit
 80004b4:	2020      	movs	r0, #32
 80004b6:	f7ff ff67 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(10);
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fee4 	bl	8001288 <HAL_Delay>

  // Inizializzazione display
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004c0:	2028      	movs	r0, #40	@ 0x28
 80004c2:	f7ff ff61 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fede 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80004cc:	2008      	movs	r0, #8
 80004ce:	f7ff ff5b 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fed8 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ff55 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 fed2 	bl	8001288 <HAL_Delay>
	HAL_Delay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fecf 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004ea:	2006      	movs	r0, #6
 80004ec:	f7ff ff4c 	bl	8000388 <lcd_send_cmd>
	HAL_Delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fec9 	bl	8001288 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C=0, B=0
 80004f6:	200c      	movs	r0, #12
 80004f8:	f7ff ff46 	bl	8000388 <lcd_send_cmd>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000508:	e006      	b.n	8000518 <lcd_send_string+0x18>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff68 	bl	80003e8 <lcd_send_data>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f4      	bne.n	800050a <lcd_send_string+0xa>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int close_entry = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  int close_exit = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fe40 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f82e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9cc 	bl	80008dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f000 f88e 	bl	8000664 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000548:	f000 f8cc 	bl	80006e4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800054c:	f000 f9a4 	bl	8000898 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000550:	f000 f906 	bl	8000760 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  sensors_init();
 8000554:	f000 fab4 	bl	8000ac0 <sensors_init>
  display_init();
 8000558:	f7ff fe8a 	bl	8000270 <display_init>
  while (1)
  {
	  //sensors_update();
	  //display_update();
	  //wifi_bot_handle();
	  close_entry = updateCloseEntry();
 800055c:	f000 fad2 	bl	8000b04 <updateCloseEntry>
 8000560:	6078      	str	r0, [r7, #4]
	  if(close_entry == 1){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d108      	bne.n	800057a <main+0x50>
		  setCloseEntry(0);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fae3 	bl	8000b34 <setCloseEntry>
		  HAL_Delay(1500);
 800056e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000572:	f000 fe89 	bl	8001288 <HAL_Delay>
		  Servo_Entrance_Close();
 8000576:	f7ff fea7 	bl	80002c8 <Servo_Entrance_Close>
	  }
	  close_exit = updateCloseExit();
 800057a:	f000 facf 	bl	8000b1c <updateCloseExit>
 800057e:	6038      	str	r0, [r7, #0]
	  if(close_exit == 1){
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d1ea      	bne.n	800055c <main+0x32>
		  setCloseExit(0);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fae4 	bl	8000b54 <setCloseExit>
		  HAL_Delay(1500);
 800058c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000590:	f000 fe7a 	bl	8001288 <HAL_Delay>
		  Servo_Exit_Close();
 8000594:	f7ff fea6 	bl	80002e4 <Servo_Exit_Close>
	  close_entry = updateCloseEntry();
 8000598:	e7e0      	b.n	800055c <main+0x32>
	...

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09e      	sub	sp, #120	@ 0x78
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005a6:	2228      	movs	r2, #40	@ 0x28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fa2a 	bl	8004a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	223c      	movs	r2, #60	@ 0x3c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fa1c 	bl	8004a04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005cc:	2303      	movs	r3, #3
 80005ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2310      	movs	r3, #16
 80005e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80005f0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe6a 	bl	80022d0 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000602:	f000 fa57 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000620:	2101      	movs	r1, #1
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fe62 	bl	80032ec <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062e:	f000 fa41 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <SystemClock_Config+0xc4>)
 8000634:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800063a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f812 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000652:	f000 fa2f 	bl	8000ab4 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3778      	adds	r7, #120	@ 0x78
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	00021020 	.word	0x00021020

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	f001 f8ea 	bl	8001878 <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 fa03 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006b2:	f001 fcaf 	bl	8002014 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f9fa 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006c4:	f001 fcf1 	bl	80020aa <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f9f1 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00201d2b 	.word	0x00201d2b

080006e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_SPI1_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <MX_SPI1_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_SPI1_Init+0x74>)
 80006f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_SPI1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_SPI1_Init+0x74>)
 80006fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000702:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000716:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_SPI1_Init+0x74>)
 800071a:	2208      	movs	r2, #8
 800071c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000732:	2207      	movs	r2, #7
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_SPI1_Init+0x74>)
 800073e:	2208      	movs	r2, #8
 8000740:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_SPI1_Init+0x74>)
 8000744:	f003 f942 	bl	80039cc <HAL_SPI_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 f9b1 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000d0 	.word	0x200000d0
 800075c:	40013000 	.word	0x40013000

08000760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	@ 0x58
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	222c      	movs	r2, #44	@ 0x2c
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f004 f939 	bl	8004a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000792:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_TIM1_Init+0x130>)
 8000794:	4a3f      	ldr	r2, [pc, #252]	@ (8000894 <MX_TIM1_Init+0x134>)
 8000796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000798:	4b3d      	ldr	r3, [pc, #244]	@ (8000890 <MX_TIM1_Init+0x130>)
 800079a:	222f      	movs	r2, #47	@ 0x2f
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80007a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007be:	4834      	ldr	r0, [pc, #208]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007c0:	f003 f9af 	bl	8003b22 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f973 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007de:	4619      	mov	r1, r3
 80007e0:	482b      	ldr	r0, [pc, #172]	@ (8000890 <MX_TIM1_Init+0x130>)
 80007e2:	f003 ffa1 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 f962 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f0:	2360      	movs	r3, #96	@ 0x60
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	481e      	ldr	r0, [pc, #120]	@ (8000890 <MX_TIM1_Init+0x130>)
 8000816:	f003 fadb 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000820:	f000 f948 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000828:	2204      	movs	r2, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_TIM1_Init+0x130>)
 800082e:	f003 facf 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000838:	f000 f93c 	bl	8000ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000850:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000854:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800085e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	@ (8000890 <MX_TIM1_Init+0x130>)
 8000872:	f003 ffd9 	bl	8004828 <HAL_TIMEx_ConfigBreakDeadTime>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800087c:	f000 f91a 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <MX_TIM1_Init+0x130>)
 8000882:	f000 fb5b 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3758      	adds	r7, #88	@ 0x58
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000134 	.word	0x20000134
 8000894:	40012c00 	.word	0x40012c00

08000898 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <MX_USB_PCD_Init+0x40>)
 80008a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_USB_PCD_Init+0x3c>)
 80008c2:	f001 fc3e 	bl	8002142 <HAL_PCD_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008cc:	f000 f8f2 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000180 	.word	0x20000180
 80008d8:	40005c00 	.word	0x40005c00

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a6b      	ldr	r2, [pc, #428]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 80008f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b69      	ldr	r3, [pc, #420]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b66      	ldr	r3, [pc, #408]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a65      	ldr	r2, [pc, #404]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000910:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b63      	ldr	r3, [pc, #396]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000922:	4b60      	ldr	r3, [pc, #384]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a5f      	ldr	r2, [pc, #380]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a59      	ldr	r2, [pc, #356]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b57      	ldr	r3, [pc, #348]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b54      	ldr	r3, [pc, #336]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a53      	ldr	r2, [pc, #332]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b51      	ldr	r3, [pc, #324]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a4d      	ldr	r2, [pc, #308]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000988:	4847      	ldr	r0, [pc, #284]	@ (8000aa8 <MX_GPIO_Init+0x1cc>)
 800098a:	f000 ff45 	bl	8001818 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2103      	movs	r1, #3
 8000992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000996:	f000 ff3f 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Red_light_Pin|Green_light_Pin|Red_lightD2_Pin|Green_lightD3_Pin
 800099a:	2200      	movs	r2, #0
 800099c:	213f      	movs	r1, #63	@ 0x3f
 800099e:	4843      	ldr	r0, [pc, #268]	@ (8000aac <MX_GPIO_Init+0x1d0>)
 80009a0:	f000 ff3a 	bl	8001818 <HAL_GPIO_WritePin>
                          |Red_lightD4_Pin|Green_lightD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009a4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80009a8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	483a      	ldr	r0, [pc, #232]	@ (8000aa8 <MX_GPIO_Init+0x1cc>)
 80009be:	f000 fd99 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 80009c2:	2320      	movs	r3, #32
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4834      	ldr	r0, [pc, #208]	@ (8000aa8 <MX_GPIO_Init+0x1cc>)
 80009d8:	f000 fd8c 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_Pin PS2_Pin PS3_Pin PS4_Pin
                           PS5_Pin */
  GPIO_InitStruct.Pin = PS1_Pin|PS2_Pin|PS3_Pin|PS4_Pin
 80009dc:	231f      	movs	r3, #31
 80009de:	61fb      	str	r3, [r7, #28]
                          |PS5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482f      	ldr	r0, [pc, #188]	@ (8000ab0 <MX_GPIO_Init+0x1d4>)
 80009f2:	f000 fd7f 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a10:	f000 fd70 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a14:	2304      	movs	r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f000 fd63 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_light_Pin Green_light_Pin Red_lightD2_Pin Green_lightD3_Pin
                           Red_lightD4_Pin Green_lightD5_Pin */
  GPIO_InitStruct.Pin = Red_light_Pin|Green_light_Pin|Red_lightD2_Pin|Green_lightD3_Pin
 8000a2e:	233f      	movs	r3, #63	@ 0x3f
 8000a30:	61fb      	str	r3, [r7, #28]
                          |Red_lightD4_Pin|Green_lightD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4819      	ldr	r0, [pc, #100]	@ (8000aac <MX_GPIO_Init+0x1d0>)
 8000a46:	f000 fd55 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2006      	movs	r0, #6
 8000a50:	f000 fd19 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a54:	2006      	movs	r0, #6
 8000a56:	f000 fd32 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fd11 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a64:	2007      	movs	r0, #7
 8000a66:	f000 fd2a 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f000 fd09 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000a74:	2008      	movs	r0, #8
 8000a76:	f000 fd22 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2009      	movs	r0, #9
 8000a80:	f000 fd01 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a84:	2009      	movs	r0, #9
 8000a86:	f000 fd1a 	bl	80014be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 fcf9 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f000 fd12 	bl	80014be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48001000 	.word	0x48001000
 8000aac:	48000c00 	.word	0x48000c00
 8000ab0:	48000800 	.word	0x48000800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <sensors_init>:
extern void Servo_Exit_Open(void);
extern void Servo_Entrance_Close(void);
extern void Servo_Exit_Close(void);

// Eseguito una sola volta all’avvio
void sensors_init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	//Tutti gli slot inizialmente solo liberi -> led verdi ON
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <sensors_init+0x28>)
 8000aca:	f000 fea5 	bl	8001818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <sensors_init+0x28>)
 8000ad4:	f000 fea0 	bl	8001818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <sensors_init+0x28>)
 8000ade:	f000 fe9b 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <sensors_get_free_slots>:

void sensors_update(void) {
    // Lasciata vuota o usata se servono aggiornamenti periodici
}

int sensors_get_free_slots(void) {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    return free_spots;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <sensors_get_free_slots+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <updateCloseEntry>:

int updateCloseEntry(void){
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	return close_entry;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <updateCloseEntry+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000045c 	.word	0x2000045c

08000b1c <updateCloseExit>:

int updateCloseExit(void){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	return close_exit;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <updateCloseExit+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000460 	.word	0x20000460

08000b34 <setCloseEntry>:

void setCloseEntry(int x){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	close_entry = x;
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <setCloseEntry+0x1c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000045c 	.word	0x2000045c

08000b54 <setCloseExit>:

void setCloseExit(int x){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	close_exit = x;
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <setCloseExit+0x1c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000460 	.word	0x20000460

08000b74 <HAL_GPIO_EXTI_Callback>:

// --- GESTIONE INTERRUPT ---

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == PS1_Pin) {  // Sensore ingresso
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d140      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x92>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS1_Pin);
 8000b84:	2101      	movs	r1, #1
 8000b86:	4881      	ldr	r0, [pc, #516]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x218>)
 8000b88:	f000 fe2e 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	75fb      	strb	r3, [r7, #23]
		uint32_t last_seen;
		uint32_t now;
		uint32_t interval = 500;
 8000b90:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b94:	613b      	str	r3, [r7, #16]
		if (state == GPIO_PIN_RESET && !entry_detected) {
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x50>
 8000b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x50>
			// FALLING EDGE: ostacolo davanti al sensore
			if(free_spots <= 0){
 8000ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dc02      	bgt.n	8000bb2 <HAL_GPIO_EXTI_Callback+0x3e>
				Display_Write();
 8000bac:	f7ff fbc4 	bl	8000338 <Display_Write>
			if(free_spots <= 0){
 8000bb0:	e0e8      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			}
			else{
				entry_detected = 1;
 8000bb2:	4b77      	ldr	r3, [pc, #476]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]
				Servo_Entrance_Open();  // Alza la sbarra
 8000bb8:	f7ff fba2 	bl	8000300 <Servo_Entrance_Open>
				last_seen = HAL_GetTick();
 8000bbc:	f000 fb58 	bl	8001270 <HAL_GetTick>
 8000bc0:	60f8      	str	r0, [r7, #12]
			if(free_spots <= 0){
 8000bc2:	e0df      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			}
		}
		else if (state == GPIO_PIN_SET && entry_detected) {
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 80dc 	bne.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
 8000bcc:	4b70      	ldr	r3, [pc, #448]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80d7 	beq.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			// RISING EDGE: ostacolo andato via
			now = HAL_GetTick();
 8000bd6:	f000 fb4b 	bl	8001270 <HAL_GetTick>
 8000bda:	60b8      	str	r0, [r7, #8]
			if(now - last_seen > interval){
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f080 80cd 	bcs.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
				entry_detected = 0;
 8000bea:	4b69      	ldr	r3, [pc, #420]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x21c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
				//Servo_Entrance_Close();  // Abbassa la sbarra
				close_entry = 1;
 8000bf0:	4b69      	ldr	r3, [pc, #420]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x224>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
				free_spots--;
 8000bf6:	4b67      	ldr	r3, [pc, #412]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a65      	ldr	r2, [pc, #404]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000bfe:	6013      	str	r3, [r2, #0]
				Display_Write();
 8000c00:	f7ff fb9a 	bl	8000338 <Display_Write>
		else if(state == GPIO_PIN_SET){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);   // LED Rosso OFF
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // LED Verde ON
		}
	}
}
 8000c04:	e0be      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
	else if(GPIO_Pin == PS2_Pin){
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d143      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x120>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS2_Pin);
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	485f      	ldr	r0, [pc, #380]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x218>)
 8000c10:	f000 fdea 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		uint32_t interval = 500;
 8000c1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c1e:	623b      	str	r3, [r7, #32]
		if (state == GPIO_PIN_RESET && !exit_detected) {
 8000c20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10c      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0xce>
 8000c28:	4b5c      	ldr	r3, [pc, #368]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x228>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d108      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0xce>
			exit_detected = 1;
 8000c30:	4b5a      	ldr	r3, [pc, #360]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x228>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
			Servo_Exit_Open();  // Alza sbarra uscita
 8000c36:	f7ff fb71 	bl	800031c <Servo_Exit_Open>
			last_seen = HAL_GetTick();
 8000c3a:	f000 fb19 	bl	8001270 <HAL_GetTick>
 8000c3e:	61f8      	str	r0, [r7, #28]
 8000c40:	e0a0      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
		else if (state == GPIO_PIN_SET && exit_detected) {
 8000c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	f040 809c 	bne.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
 8000c4c:	4b53      	ldr	r3, [pc, #332]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x228>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8097 	beq.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			now = HAL_GetTick();
 8000c56:	f000 fb0b 	bl	8001270 <HAL_GetTick>
 8000c5a:	61b8      	str	r0, [r7, #24]
			if(now - last_seen > interval){
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	6a3a      	ldr	r2, [r7, #32]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f080 808d 	bcs.w	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
				exit_detected = 0;
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x228>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
				close_exit = 1;
 8000c70:	4b4b      	ldr	r3, [pc, #300]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
				free_spots++;
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a45      	ldr	r2, [pc, #276]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000c7e:	6013      	str	r3, [r2, #0]
				if(free_spots > 3){
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	dd02      	ble.n	8000c8e <HAL_GPIO_EXTI_Callback+0x11a>
					free_spots = 3;
 8000c88:	4b42      	ldr	r3, [pc, #264]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x220>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
				Display_Write();
 8000c8e:	f7ff fb53 	bl	8000338 <Display_Write>
}
 8000c92:	e077      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
	else if(GPIO_Pin == PS3_Pin){ //PRIMO SLOT
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d124      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x170>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS3_Pin);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	483b      	ldr	r0, [pc, #236]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x218>)
 8000c9e:	f000 fda3 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		if(state == GPIO_PIN_RESET){
 8000ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <HAL_GPIO_EXTI_Callback+0x152>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);   // LED Rosso ON
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	483b      	ldr	r0, [pc, #236]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000cb6:	f000 fdaf 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); // LED Verde OFF
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4839      	ldr	r0, [pc, #228]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000cc0:	f000 fdaa 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000cc4:	e05e      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
		else if(state == GPIO_PIN_SET){
 8000cc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d15a      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);   // LED Rosso OFF
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4834      	ldr	r0, [pc, #208]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000cd4:	f000 fda0 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET); // LED Verde ON
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4831      	ldr	r0, [pc, #196]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000cde:	f000 fd9b 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000ce2:	e04f      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
	else if(GPIO_Pin == PS4_Pin){ //SECONDO SLOT
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d124      	bne.n	8000d34 <HAL_GPIO_EXTI_Callback+0x1c0>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS4_Pin);
 8000cea:	2108      	movs	r1, #8
 8000cec:	4827      	ldr	r0, [pc, #156]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x218>)
 8000cee:	f000 fd7b 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if(state == GPIO_PIN_RESET){
 8000cf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10a      	bne.n	8000d16 <HAL_GPIO_EXTI_Callback+0x1a2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);   // LED Rosso ON
 8000d00:	2201      	movs	r2, #1
 8000d02:	2104      	movs	r1, #4
 8000d04:	4827      	ldr	r0, [pc, #156]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d06:	f000 fd87 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // LED Verde OFF
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4825      	ldr	r0, [pc, #148]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d10:	f000 fd82 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000d14:	e036      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
		else if(state == GPIO_PIN_SET){
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d132      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);   // LED Rosso OFF
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2104      	movs	r1, #4
 8000d22:	4820      	ldr	r0, [pc, #128]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d24:	f000 fd78 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); // LED Verde ON
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	481d      	ldr	r0, [pc, #116]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d2e:	f000 fd73 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000d32:	e027      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
	else if(GPIO_Pin == PS5_Pin){ //TERZO SLOT
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d124      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
		GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, PS5_Pin);
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x218>)
 8000d3e:	f000 fd53 	bl	80017e8 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if(state == GPIO_PIN_RESET){
 8000d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10a      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0x1f2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);   // LED Rosso ON
 8000d50:	2201      	movs	r2, #1
 8000d52:	2110      	movs	r1, #16
 8000d54:	4813      	ldr	r0, [pc, #76]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d56:	f000 fd5f 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET); // LED Verde OFF
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d60:	f000 fd5a 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000d64:	e00e      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
		else if(state == GPIO_PIN_SET){
 8000d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d10a      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);   // LED Rosso OFF
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2110      	movs	r1, #16
 8000d72:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d74:	f000 fd50 	bl	8001818 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); // LED Verde ON
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d7e:	f000 fd4b 	bl	8001818 <HAL_GPIO_WritePin>
}
 8000d82:	e7ff      	b.n	8000d84 <HAL_GPIO_EXTI_Callback+0x210>
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	20000454 	.word	0x20000454
 8000d94:	20000000 	.word	0x20000000
 8000d98:	2000045c 	.word	0x2000045c
 8000d9c:	20000458 	.word	0x20000458
 8000da0:	20000460 	.word	0x20000460
 8000da4:	48000c00 	.word	0x48000c00

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_MspInit+0x44>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <HAL_MspInit+0x44>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_MspInit+0x44>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_MspInit+0x44>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x44>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x44>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f000 fb46 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <HAL_I2C_MspInit+0x7c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d128      	bne.n	8000e64 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <HAL_I2C_MspInit+0x84>)
 8000e48:	f000 fb54 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e56:	61d3      	str	r3, [r2, #28]
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_I2C_MspInit+0x80>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <HAL_SPI_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d128      	bne.n	8000eec <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_SPI_MspInit+0x80>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000eca:	23e0      	movs	r3, #224	@ 0xe0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee8:	f000 fb04 	bl	80014f4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_TIM_PWM_MspInit+0x38>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10b      	bne.n	8000f26 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40012c00 	.word	0x40012c00
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11d      	bne.n	8000f9a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f96:	f000 faad 	bl	80014f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a18      	ldr	r2, [pc, #96]	@ (800102c <HAL_PCD_MspInit+0x80>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d129      	bne.n	8001022 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000fe6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f000 fa75 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 8001010:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_PCD_MspInit+0x84>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	@ 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40005c00 	.word	0x40005c00
 8001030:	40021000 	.word	0x40021000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f8dd 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS1_Pin);
 8001096:	2001      	movs	r0, #1
 8001098:	f000 fbd6 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS2_Pin);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fbcf 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS3_Pin);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f000 fbc8 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS4_Pin);
 80010c0:	2008      	movs	r0, #8
 80010c2:	f000 fbc1 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}

080010ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS5_Pin);
 80010ce:	2010      	movs	r0, #16
 80010d0:	f000 fbba 	bl	8001848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f003 fc84 	bl	8004a14 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000a000 	.word	0x2000a000
 8001138:	00000400 	.word	0x00000400
 800113c:	20000464 	.word	0x20000464
 8001140:	200005b8 	.word	0x200005b8

08001144 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800116c:	f7ff ffea 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f003 fc43 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119a:	f7ff f9c6 	bl	800052a <main>

0800119e <LoopForever>:

LoopForever:
    b LoopForever
 800119e:	e7fe      	b.n	800119e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011ac:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 80011b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011b4:	200005b4 	.word	0x200005b4

080011b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_2_IRQHandler>
	...

080011bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x28>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f94f 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fde6 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f967 	bl	80014da <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f92f 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000004 	.word	0x20000004
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000468 	.word	0x20000468

08001270 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;  
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000468 	.word	0x20000468

08001288 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	@ (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e154      	b.n	80017ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8146 	beq.w	80017a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 0201 	and.w	r2, r3, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	6939      	ldr	r1, [r7, #16]
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80a0 	beq.w	80017a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <HAL_GPIO_Init+0x2d8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a57      	ldr	r2, [pc, #348]	@ (80017cc <HAL_GPIO_Init+0x2d8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b55      	ldr	r3, [pc, #340]	@ (80017cc <HAL_GPIO_Init+0x2d8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001680:	4a53      	ldr	r2, [pc, #332]	@ (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016aa:	d019      	beq.n	80016e0 <HAL_GPIO_Init+0x1ec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <HAL_GPIO_Init+0x2e0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d013      	beq.n	80016dc <HAL_GPIO_Init+0x1e8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a48      	ldr	r2, [pc, #288]	@ (80017d8 <HAL_GPIO_Init+0x2e4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_GPIO_Init+0x1e4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a47      	ldr	r2, [pc, #284]	@ (80017dc <HAL_GPIO_Init+0x2e8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d007      	beq.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a46      	ldr	r2, [pc, #280]	@ (80017e0 <HAL_GPIO_Init+0x2ec>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_GPIO_Init+0x1dc>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016d0:	2305      	movs	r3, #5
 80016d2:	e006      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e004      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016d8:	2302      	movs	r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016e0:	2300      	movs	r3, #0
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f2:	4937      	ldr	r1, [pc, #220]	@ (80017d0 <HAL_GPIO_Init+0x2dc>)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001700:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001724:	4a2f      	ldr	r2, [pc, #188]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800174e:	4a25      	ldr	r2, [pc, #148]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001778:	4a1a      	ldr	r2, [pc, #104]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f aea3 	bne.w	8001504 <HAL_GPIO_Init+0x10>
  }
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	48001000 	.word	0x48001000
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e001      	b.n	800180a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001834:	e002      	b.n	800183c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f984 	bl	8000b74 <HAL_GPIO_EXTI_Callback>
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e08d      	b.n	80019a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff faa6 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e006      	b.n	8001900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d108      	bne.n	800191a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	e007      	b.n	800192a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800193c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800194c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69d9      	ldr	r1, [r3, #28]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	460b      	mov	r3, r1
 80019be:	817b      	strh	r3, [r7, #10]
 80019c0:	4613      	mov	r3, r2
 80019c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	f040 80fd 	bne.w	8001bcc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_I2C_Master_Transmit+0x30>
 80019dc:	2302      	movs	r3, #2
 80019de:	e0f6      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019e8:	f7ff fc42 	bl	8001270 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2319      	movs	r3, #25
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f914 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0e1      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2221      	movs	r2, #33	@ 0x21
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2210      	movs	r2, #16
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	893a      	ldrh	r2, [r7, #8]
 8001a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2bff      	cmp	r3, #255	@ 0xff
 8001a3a:	d906      	bls.n	8001a4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	22ff      	movs	r2, #255	@ 0xff
 8001a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e007      	b.n	8001a5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d024      	beq.n	8001aac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd8 <HAL_I2C_Master_Transmit+0x228>)
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fa83 	bl	8001fb0 <I2C_TransferConfig>
 8001aaa:	e066      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	8979      	ldrh	r1, [r7, #10]
 8001ab4:	4b48      	ldr	r3, [pc, #288]	@ (8001bd8 <HAL_I2C_Master_Transmit+0x228>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fa78 	bl	8001fb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ac0:	e05b      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f907 	bl	8001cda <I2C_WaitOnTXISFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07b      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d034      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x1ca>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d130      	bne.n	8001b7a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f880 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e04d      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2bff      	cmp	r3, #255	@ 0xff
 8001b3a:	d90e      	bls.n	8001b5a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	22ff      	movs	r2, #255	@ 0xff
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	8979      	ldrh	r1, [r7, #10]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fa2c 	bl	8001fb0 <I2C_TransferConfig>
 8001b58:	e00f      	b.n	8001b7a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fa1b 	bl	8001fb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d19e      	bne.n	8001ac2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f8ed 	bl	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01a      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_I2C_Master_Transmit+0x22c>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	80002000 	.word	0x80002000
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d007      	beq.n	8001c1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	619a      	str	r2, [r3, #24]
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c38:	e03b      	b.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f8d6 	bl	8001df0 <I2C_IsErrorOccurred>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d02d      	beq.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff fb0b 	bl	8001270 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d122      	bne.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d113      	bne.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0220 	orr.w	r2, r3, #32
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d0b4      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce6:	e033      	b.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f87f 	bl	8001df0 <I2C_IsErrorOccurred>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e031      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d02:	d025      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff fab4 	bl	8001270 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11a      	bne.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d013      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d1c4      	bne.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d74:	e02f      	b.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f838 	bl	8001df0 <I2C_IsErrorOccurred>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02d      	b.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7ff fa71 	bl	8001270 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11a      	bne.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d013      	beq.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0220 	orr.w	r2, r3, #32
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d1c8      	bne.n	8001d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d068      	beq.n	8001eee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2210      	movs	r2, #16
 8001e22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e24:	e049      	b.n	8001eba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d045      	beq.n	8001eba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e2e:	f7ff fa1f 	bl	8001270 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <I2C_IsErrorOccurred+0x54>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d13a      	bne.n	8001eba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e66:	d121      	bne.n	8001eac <I2C_IsErrorOccurred+0xbc>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e6e:	d01d      	beq.n	8001eac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d01a      	beq.n	8001eac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e86:	f7ff f9f3 	bl	8001270 <HAL_GetTick>
 8001e8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e8c:	e00e      	b.n	8001eac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e8e:	f7ff f9ef 	bl	8001270 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b19      	cmp	r3, #25
 8001e9a:	d907      	bls.n	8001eac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001eaa:	e006      	b.n	8001eba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d1e9      	bne.n	8001e8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d003      	beq.n	8001ed0 <I2C_IsErrorOccurred+0xe0>
 8001ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0aa      	beq.n	8001e26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d103      	bne.n	8001ee0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2220      	movs	r2, #32
 8001ede:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01c      	beq.n	8001f9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fe3b 	bl	8001be0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <I2C_IsErrorOccurred+0x1bc>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3728      	adds	r7, #40	@ 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	fe00e800 	.word	0xfe00e800

08001fb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	817b      	strh	r3, [r7, #10]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fc8:	7a7b      	ldrb	r3, [r7, #9]
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	0d5b      	lsrs	r3, r3, #21
 8001fea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <I2C_TransferConfig+0x60>)
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	ea02 0103 	and.w	r1, r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	03ff63ff 	.word	0x03ff63ff

08002014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d138      	bne.n	800209c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002034:	2302      	movs	r3, #2
 8002036:	e032      	b.n	800209e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	@ 0x24
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d139      	bne.n	8002134 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e033      	b.n	8002136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2224      	movs	r2, #36	@ 0x24
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b9      	b.n	80022c8 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe ff1f 	bl	8000fac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fbd2 	bl	8004924 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e03e      	b.n	8002204 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3311      	adds	r3, #17
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3310      	adds	r3, #16
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3313      	adds	r3, #19
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3320      	adds	r3, #32
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3324      	adds	r3, #36	@ 0x24
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3bb      	bcc.n	8002186 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e044      	b.n	800229e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3b5      	bcc.n	8002214 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80022b4:	f002 fb51 	bl	800495a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f000 bff4 	b.w	80032de <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 816d 	beq.w	80025e6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800230c:	4bb4      	ldr	r3, [pc, #720]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b04      	cmp	r3, #4
 8002316:	d00c      	beq.n	8002332 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002318:	4bb1      	ldr	r3, [pc, #708]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d157      	bne.n	80023d4 <HAL_RCC_OscConfig+0x104>
 8002324:	4bae      	ldr	r3, [pc, #696]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002330:	d150      	bne.n	80023d4 <HAL_RCC_OscConfig+0x104>
 8002332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002336:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002346:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b3f      	cmp	r3, #63	@ 0x3f
 8002352:	d802      	bhi.n	800235a <HAL_RCC_OscConfig+0x8a>
 8002354:	4ba2      	ldr	r3, [pc, #648]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0xb6>
 800235a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800236e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002372:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002376:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002382:	4b97      	ldr	r3, [pc, #604]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800238a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800238e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800239a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8114 	beq.w	80025e4 <HAL_RCC_OscConfig+0x314>
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 810b 	bne.w	80025e4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 bf85 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x124>
 80023e6:	4b7e      	ldr	r3, [pc, #504]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7d      	ldr	r2, [pc, #500]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e036      	b.n	8002462 <HAL_RCC_OscConfig+0x192>
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x14e>
 8002404:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a75      	ldr	r2, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a72      	ldr	r2, [pc, #456]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e021      	b.n	8002462 <HAL_RCC_OscConfig+0x192>
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x17a>
 8002430:	4b6b      	ldr	r3, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6a      	ldr	r2, [pc, #424]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b68      	ldr	r3, [pc, #416]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x192>
 800244a:	4b65      	ldr	r3, [pc, #404]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a64      	ldr	r2, [pc, #400]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b62      	ldr	r3, [pc, #392]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a61      	ldr	r2, [pc, #388]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002462:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	495a      	ldr	r1, [pc, #360]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d054      	beq.n	8002536 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fef0 	bl	8001270 <HAL_GetTick>
 8002490:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002496:	f7fe feeb 	bl	8001270 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d902      	bls.n	80024ac <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	f000 bf19 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 80024ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80024c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80024cc:	d802      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x204>
 80024ce:	4b44      	ldr	r3, [pc, #272]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e015      	b.n	8002500 <HAL_RCC_OscConfig+0x230>
 80024d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80024e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80024f0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002504:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002508:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800250c:	fa92 f2a2 	rbit	r2, r2
 8002510:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002514:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0b0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1c6>
 8002534:	e057      	b.n	80025e6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fe9b 	bl	8001270 <HAL_GetTick>
 800253a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe fe96 	bl	8001270 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	@ 0x64
 800254e:	d902      	bls.n	8002556 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f000 bec4 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 8002556:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800256a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b3f      	cmp	r3, #63	@ 0x3f
 8002576:	d802      	bhi.n	800257e <HAL_RCC_OscConfig+0x2ae>
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x2da>
 800257e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002582:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002596:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800259a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_RCC_OscConfig+0x310>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ae:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80025b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80025be:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0220 	orr.w	r2, r2, #32
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1b0      	bne.n	8002540 <HAL_RCC_OscConfig+0x270>
 80025de:	e002      	b.n	80025e6 <HAL_RCC_OscConfig+0x316>
 80025e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 816c 	beq.w	80028d4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025fc:	4bcc      	ldr	r3, [pc, #816]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002608:	4bc9      	ldr	r3, [pc, #804]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d16d      	bne.n	80026f0 <HAL_RCC_OscConfig+0x420>
 8002614:	4bc6      	ldr	r3, [pc, #792]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d167      	bne.n	80026f0 <HAL_RCC_OscConfig+0x420>
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002632:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b3f      	cmp	r3, #63	@ 0x3f
 800263e:	d802      	bhi.n	8002646 <HAL_RCC_OscConfig+0x376>
 8002640:	4bbb      	ldr	r3, [pc, #748]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e013      	b.n	800266e <HAL_RCC_OscConfig+0x39e>
 8002646:	2302      	movs	r3, #2
 8002648:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800265e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800266a:	4bb1      	ldr	r3, [pc, #708]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	2202      	movs	r2, #2
 8002670:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002674:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002680:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCC_OscConfig+0x3e6>
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d002      	beq.n	80026b6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f000 be14 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b9e      	ldr	r3, [pc, #632]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	21f8      	movs	r1, #248	@ 0xf8
 80026cc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80026d4:	fa91 f1a1 	rbit	r1, r1
 80026d8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80026dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80026e0:	fab1 f181 	clz	r1, r1
 80026e4:	b2c9      	uxtb	r1, r1
 80026e6:	408b      	lsls	r3, r1
 80026e8:	4991      	ldr	r1, [pc, #580]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e0f1      	b.n	80028d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8083 	beq.w	8002808 <HAL_RCC_OscConfig+0x538>
 8002702:	2301      	movs	r3, #1
 8002704:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002714:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002722:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fd9f 	bl	8001270 <HAL_GetTick>
 8002732:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fd9a 	bl	8001270 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d902      	bls.n	800274e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	f000 bdc8 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002760:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b3f      	cmp	r3, #63	@ 0x3f
 800276c:	d802      	bhi.n	8002774 <HAL_RCC_OscConfig+0x4a4>
 800276e:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x4cc>
 8002774:	2302      	movs	r3, #2
 8002776:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800278c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002798:	4b65      	ldr	r3, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	2202      	movs	r2, #2
 800279e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80027a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027a6:	fa92 f2a2 	rbit	r2, r2
 80027aa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80027ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80027b2:	fab2 f282 	clz	r2, r2
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f002 021f 	and.w	r2, r2, #31
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0b4      	beq.n	8002738 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b58      	ldr	r3, [pc, #352]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	21f8      	movs	r1, #248	@ 0xf8
 80027e4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80027ec:	fa91 f1a1 	rbit	r1, r1
 80027f0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027f8:	fab1 f181 	clz	r1, r1
 80027fc:	b2c9      	uxtb	r1, r1
 80027fe:	408b      	lsls	r3, r1
 8002800:	494b      	ldr	r1, [pc, #300]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
 8002806:	e065      	b.n	80028d4 <HAL_RCC_OscConfig+0x604>
 8002808:	2301      	movs	r3, #1
 800280a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800281a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002828:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	461a      	mov	r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fd1c 	bl	8001270 <HAL_GetTick>
 8002838:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe fd17 	bl	8001270 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	f000 bd45 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b3f      	cmp	r3, #63	@ 0x3f
 8002872:	d802      	bhi.n	800287a <HAL_RCC_OscConfig+0x5aa>
 8002874:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e013      	b.n	80028a2 <HAL_RCC_OscConfig+0x5d2>
 800287a:	2302      	movs	r3, #2
 800287c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002892:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800289e:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <HAL_RCC_OscConfig+0x660>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	2202      	movs	r2, #2
 80028a4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80028a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80028b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1b4      	bne.n	800283e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8115 	beq.w	8002b14 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07e      	beq.n	80029f8 <HAL_RCC_OscConfig+0x728>
 80028fa:	2301      	movs	r3, #1
 80028fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800290c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x664>)
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	461a      	mov	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fe fca4 	bl	8001270 <HAL_GetTick>
 8002928:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292c:	e00f      	b.n	800294e <HAL_RCC_OscConfig+0x67e>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fc9a 	bl	8001270 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bcc8 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800298c:	2202      	movs	r2, #2
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a8:	4bb0      	ldr	r3, [pc, #704]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 80029aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029b4:	2102      	movs	r1, #2
 80029b6:	6019      	str	r1, [r3, #0]
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f1a3 	rbit	r1, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029ce:	6019      	str	r1, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0a0      	beq.n	8002938 <HAL_RCC_OscConfig+0x668>
 80029f6:	e08d      	b.n	8002b14 <HAL_RCC_OscConfig+0x844>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b90      	ldr	r3, [pc, #576]	@ (8002c70 <HAL_RCC_OscConfig+0x9a0>)
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc19 	bl	8001270 <HAL_GetTick>
 8002a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fc14 	bl	8001270 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d902      	bls.n	8002a5a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f000 bc42 	b.w	80032de <HAL_RCC_OscConfig+0x100e>
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a86:	2202      	movs	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002aaa:	2202      	movs	r2, #2
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ac4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	4b69      	ldr	r3, [pc, #420]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f1a3 	rbit	r1, r3
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aec:	6019      	str	r1, [r3, #0]
  return result;
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d197      	bne.n	8002a44 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 819e 	beq.w	8002e66 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b30:	4b4e      	ldr	r3, [pc, #312]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a4a      	ldr	r2, [pc, #296]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	61d3      	str	r3, [r2, #28]
 8002b48:	4b48      	ldr	r3, [pc, #288]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <HAL_RCC_OscConfig+0x9a4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11a      	bne.n	8002bac <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b3f      	ldr	r3, [pc, #252]	@ (8002c74 <HAL_RCC_OscConfig+0x9a4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c74 <HAL_RCC_OscConfig+0x9a4>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fb75 	bl	8001270 <HAL_GetTick>
 8002b86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fb70 	bl	8001270 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e39e      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_OscConfig+0x9a4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ef      	beq.n	8002b8c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x8fa>
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	e035      	b.n	8002c36 <HAL_RCC_OscConfig+0x966>
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x924>
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	e020      	b.n	8002c36 <HAL_RCC_OscConfig+0x966>
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x94e>
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0x966>
 8002c1e:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <HAL_RCC_OscConfig+0x99c>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8087 	beq.w	8002d56 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fb12 	bl	8001270 <HAL_GetTick>
 8002c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e012      	b.n	8002c78 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fb0d 	bl	8001270 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d908      	bls.n	8002c78 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e339      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	10908120 	.word	0x10908120
 8002c74:	40007000 	.word	0x40007000
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xa10>
 8002cda:	4b98      	ldr	r3, [pc, #608]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	e013      	b.n	8002d08 <HAL_RCC_OscConfig+0xa38>
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d10:	2102      	movs	r1, #2
 8002d12:	6011      	str	r1, [r2, #0]
 8002d14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	fa92 f1a2 	rbit	r1, r2
 8002d22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d26:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d2a:	6011      	str	r1, [r2, #0]
  return result;
 8002d2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d30:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f43f af7f 	beq.w	8002c52 <HAL_RCC_OscConfig+0x982>
 8002d54:	e07d      	b.n	8002e52 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fa8b 	bl	8001270 <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fa86 	bl	8001270 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e2b2      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0xb10>
 8002dda:	4b58      	ldr	r3, [pc, #352]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	e013      	b.n	8002e08 <HAL_RCC_OscConfig+0xb38>
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002de8:	2202      	movs	r2, #2
 8002dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e10:	2102      	movs	r1, #2
 8002e12:	6011      	str	r1, [r2, #0]
 8002e14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e18:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	fa92 f1a2 	rbit	r1, r2
 8002e22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e26:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e2a:	6011      	str	r1, [r2, #0]
  return result;
 8002e2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e30:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d186      	bne.n	8002d60 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e52:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b38      	ldr	r3, [pc, #224]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a37      	ldr	r2, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8232 	beq.w	80032dc <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e78:	4b30      	ldr	r3, [pc, #192]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	f000 8201 	beq.w	8003288 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	f040 8157 	bne.w	8003146 <HAL_RCC_OscConfig+0xe76>
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ebc:	601a      	str	r2, [r3, #0]
  return result;
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ec6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ed2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe f9c7 	bl	8001270 <HAL_GetTick>
 8002ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	e009      	b.n	8002efc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe f9c2 	bl	8001270 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1f0      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f34:	d804      	bhi.n	8002f40 <HAL_RCC_OscConfig+0xc70>
 8002f36:	4b01      	ldr	r3, [pc, #4]	@ (8002f3c <HAL_RCC_OscConfig+0xc6c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e029      	b.n	8002f90 <HAL_RCC_OscConfig+0xcc0>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f78:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	4bc3      	ldr	r3, [pc, #780]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f94:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	fa92 f1a2 	rbit	r1, r2
 8002fac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fb4:	6011      	str	r1, [r2, #0]
  return result;
 8002fb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f002 021f 	and.w	r2, r2, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d185      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4baf      	ldr	r3, [pc, #700]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	49a7      	ldr	r1, [pc, #668]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
 8003004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003008:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800300c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003032:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800303e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	2301      	movs	r3, #1
 8003048:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe f911 	bl	8001270 <HAL_GetTick>
 800304e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003052:	e009      	b.n	8003068 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f90c 	bl	8001270 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e13a      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800308c:	601a      	str	r2, [r3, #0]
  return result;
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003096:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b3f      	cmp	r3, #63	@ 0x3f
 80030a0:	d802      	bhi.n	80030a8 <HAL_RCC_OscConfig+0xdd8>
 80030a2:	4b7e      	ldr	r3, [pc, #504]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e027      	b.n	80030f8 <HAL_RCC_OscConfig+0xe28>
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	4b69      	ldr	r3, [pc, #420]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003100:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003104:	6011      	str	r1, [r2, #0]
 8003106:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800310a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fa92 f1a2 	rbit	r1, r2
 8003114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003118:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800311c:	6011      	str	r1, [r2, #0]
  return result;
 800311e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003122:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	f042 0220 	orr.w	r2, r2, #32
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	f002 021f 	and.w	r2, r2, #31
 8003138:	2101      	movs	r1, #1
 800313a:	fa01 f202 	lsl.w	r2, r1, r2
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d087      	beq.n	8003054 <HAL_RCC_OscConfig+0xd84>
 8003144:	e0ca      	b.n	80032dc <HAL_RCC_OscConfig+0x100c>
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800314e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800316a:	601a      	str	r2, [r3, #0]
  return result;
 800316c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003170:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003174:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003180:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe f870 	bl	8001270 <HAL_GetTick>
 8003190:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	e009      	b.n	80031aa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe f86b 	bl	8001270 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e099      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031ce:	601a      	str	r2, [r3, #0]
  return result;
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80031e2:	d802      	bhi.n	80031ea <HAL_RCC_OscConfig+0xf1a>
 80031e4:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e027      	b.n	800323a <HAL_RCC_OscConfig+0xf6a>
 80031ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4b19      	ldr	r3, [pc, #100]	@ (800329c <HAL_RCC_OscConfig+0xfcc>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003242:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003246:	6011      	str	r1, [r2, #0]
 8003248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	fa92 f1a2 	rbit	r1, r2
 8003256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800325a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800325e:	6011      	str	r1, [r2, #0]
  return result;
 8003260:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003264:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	fab2 f282 	clz	r2, r2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f002 021f 	and.w	r2, r2, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d187      	bne.n	8003196 <HAL_RCC_OscConfig+0xec6>
 8003286:	e029      	b.n	80032dc <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d103      	bne.n	80032a0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e020      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
 800329c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_OscConfig+0x1018>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d10b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032c4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09e      	sub	sp, #120	@ 0x78
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e154      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	4b89      	ldr	r3, [pc, #548]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b86      	ldr	r3, [pc, #536]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4984      	ldr	r1, [pc, #528]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b82      	ldr	r3, [pc, #520]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e13c      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b7b      	ldr	r3, [pc, #492]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4978      	ldr	r1, [pc, #480]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80cd 	beq.w	80034fa <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d137      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xec>
 8003368:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800336c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003380:	d802      	bhi.n	8003388 <HAL_RCC_ClockConfig+0x9c>
 8003382:	4b6b      	ldr	r3, [pc, #428]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e00f      	b.n	80033a8 <HAL_RCC_ClockConfig+0xbc>
 8003388:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800338c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	667b      	str	r3, [r7, #100]	@ 0x64
 8003396:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800339a:	663b      	str	r3, [r7, #96]	@ 0x60
 800339c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033a4:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b0:	fa92 f2a2 	rbit	r2, r2
 80033b4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0220 	orr.w	r2, r2, #32
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d171      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0ea      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d137      	bne.n	8003450 <HAL_RCC_ClockConfig+0x164>
 80033e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80033f8:	d802      	bhi.n	8003400 <HAL_RCC_ClockConfig+0x114>
 80033fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_ClockConfig+0x134>
 8003400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003404:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	647b      	str	r3, [r7, #68]	@ 0x44
 800340e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003412:	643b      	str	r3, [r7, #64]	@ 0x40
 8003414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341c:	4b44      	ldr	r3, [pc, #272]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003424:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800342e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f002 021f 	and.w	r2, r2, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d135      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0ae      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
 8003450:	2302      	movs	r3, #2
 8003452:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b3f      	cmp	r3, #63	@ 0x3f
 8003466:	d802      	bhi.n	800346e <HAL_RCC_ClockConfig+0x182>
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e00d      	b.n	800348a <HAL_RCC_ClockConfig+0x19e>
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	2302      	movs	r3, #2
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	4b2a      	ldr	r3, [pc, #168]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	2202      	movs	r2, #2
 800348c:	61ba      	str	r2, [r7, #24]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	fa92 f2a2 	rbit	r2, r2
 8003494:	617a      	str	r2, [r7, #20]
  return result;
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e07a      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 0203 	bic.w	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	491a      	ldr	r1, [pc, #104]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ca:	f7fd fed1 	bl	8001270 <HAL_GetTick>
 80034ce:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fd fecd 	bl	8001270 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e062      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e8:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 020c 	and.w	r2, r3, #12
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d1eb      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d215      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	4906      	ldr	r1, [pc, #24]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003518:	4b04      	ldr	r3, [pc, #16]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d006      	beq.n	8003534 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_RCC_ClockConfig+0x2c2>
 800352a:	bf00      	nop
 800352c:	40022000 	.word	0x40022000
 8003530:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <HAL_RCC_ClockConfig+0x2cc>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	491a      	ldr	r1, [pc, #104]	@ (80035b8 <HAL_RCC_ClockConfig+0x2cc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <HAL_RCC_ClockConfig+0x2cc>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4912      	ldr	r1, [pc, #72]	@ (80035b8 <HAL_RCC_ClockConfig+0x2cc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003572:	f000 f829 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003576:	4601      	mov	r1, r0
 8003578:	4b0f      	ldr	r3, [pc, #60]	@ (80035b8 <HAL_RCC_ClockConfig+0x2cc>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	22f0      	movs	r2, #240	@ 0xf0
 8003582:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	60fa      	str	r2, [r7, #12]
  return result;
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	fab2 f282 	clz	r2, r2
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	40d3      	lsrs	r3, r2
 8003596:	4a09      	ldr	r2, [pc, #36]	@ (80035bc <HAL_RCC_ClockConfig+0x2d0>)
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	fa21 f303 	lsr.w	r3, r1, r3
 800359e:	4a08      	ldr	r2, [pc, #32]	@ (80035c0 <HAL_RCC_ClockConfig+0x2d4>)
 80035a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035a2:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <HAL_RCC_ClockConfig+0x2d8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fe1e 	bl	80011e8 <HAL_InitTick>
  
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3778      	adds	r7, #120	@ 0x78
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08005354 	.word	0x08005354
 80035c0:	20000004 	.word	0x20000004
 80035c4:	20000008 	.word	0x20000008

080035c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <HAL_RCC_GetSysClockFreq+0x94>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x30>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x36>
 80035f6:	e026      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fa:	613b      	str	r3, [r7, #16]
      break;
 80035fc:	e026      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800360c:	4b13      	ldr	r3, [pc, #76]	@ (800365c <HAL_RCC_GetSysClockFreq+0x94>)
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003624:	4a0e      	ldr	r2, [pc, #56]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e004      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <HAL_RCC_GetSysClockFreq+0xa4>)
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
      break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 8003648:	613b      	str	r3, [r7, #16]
      break;
 800364a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364c:	693b      	ldr	r3, [r7, #16]
}
 800364e:	4618      	mov	r0, r3
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	007a1200 	.word	0x007a1200
 8003664:	08005364 	.word	0x08005364
 8003668:	08005374 	.word	0x08005374
 800366c:	003d0900 	.word	0x003d0900

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b092      	sub	sp, #72	@ 0x48
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80d2 	beq.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003694:	4b4d      	ldr	r3, [pc, #308]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10e      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a0:	4b4a      	ldr	r3, [pc, #296]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4a49      	ldr	r2, [pc, #292]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	61d3      	str	r3, [r2, #28]
 80036ac:	4b47      	ldr	r3, [pc, #284]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b44      	ldr	r3, [pc, #272]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a40      	ldr	r2, [pc, #256]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd fdcb 	bl	8001270 <HAL_GetTick>
 80036da:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fd fdc7 	bl	8001270 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	@ 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e167      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036fc:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003704:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8082 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003716:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003718:	429a      	cmp	r2, r3
 800371a:	d07a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800371c:	4b2b      	ldr	r3, [pc, #172]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003726:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b25      	ldr	r3, [pc, #148]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2301      	movs	r3, #1
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800374e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	461a      	mov	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d049      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fd77 	bl	8001270 <HAL_GetTick>
 8003782:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fd73 	bl	8001270 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e111      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	2302      	movs	r3, #2
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	61fb      	str	r3, [r7, #28]
  return result;
 80037b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037c6:	4b01      	ldr	r3, [pc, #4]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	e00d      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	10908100 	.word	0x10908100
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	4b78      	ldr	r3, [pc, #480]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	2202      	movs	r2, #2
 80037ea:	613a      	str	r2, [r7, #16]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	fa92 f2a2 	rbit	r2, r2
 80037f2:	60fa      	str	r2, [r7, #12]
  return result;
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	fab2 f282 	clz	r2, r2
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	f002 021f 	and.w	r2, r2, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0b9      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003812:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	496a      	ldr	r1, [pc, #424]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003820:	4313      	orrs	r3, r2
 8003822:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003824:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382c:	4b66      	ldr	r3, [pc, #408]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4a65      	ldr	r2, [pc, #404]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003844:	4b60      	ldr	r3, [pc, #384]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f023 0203 	bic.w	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	495d      	ldr	r1, [pc, #372]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003862:	4b59      	ldr	r3, [pc, #356]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4956      	ldr	r1, [pc, #344]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003880:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	494e      	ldr	r1, [pc, #312]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800388e:	4313      	orrs	r3, r2
 8003890:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800389e:	4b4a      	ldr	r3, [pc, #296]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f023 0210 	bic.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4947      	ldr	r1, [pc, #284]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80038bc:	4b42      	ldr	r3, [pc, #264]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	493f      	ldr	r1, [pc, #252]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f023 0220 	bic.w	r2, r3, #32
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	4b33      	ldr	r3, [pc, #204]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4930      	ldr	r1, [pc, #192]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003906:	4313      	orrs	r3, r2
 8003908:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003916:	4b2c      	ldr	r3, [pc, #176]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4929      	ldr	r1, [pc, #164]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003924:	4313      	orrs	r3, r2
 8003926:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003934:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	4921      	ldr	r1, [pc, #132]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003952:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	491a      	ldr	r1, [pc, #104]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003960:	4313      	orrs	r3, r2
 8003962:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003970:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	4912      	ldr	r1, [pc, #72]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800397e:	4313      	orrs	r3, r2
 8003980:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	490b      	ldr	r1, [pc, #44]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800399c:	4313      	orrs	r3, r2
 800399e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80039ac:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3748      	adds	r7, #72	@ 0x48
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e09d      	b.n	8003b1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ee:	d009      	beq.n	8003a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
 80039f6:	e005      	b.n	8003a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fa2a 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a44:	d902      	bls.n	8003a4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e002      	b.n	8003a52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a5a:	d007      	beq.n	8003a6c <HAL_SPI_Init+0xa0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a64:	d002      	beq.n	8003a6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aae:	ea42 0103 	orr.w	r1, r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	f003 0204 	and.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e049      	b.n	8003bc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd f9d7 	bl	8000efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 fa49 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x24>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e03c      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x3e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e02f      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x58>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e022      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b0c      	cmp	r3, #12
 8003c2c:	d109      	bne.n	8003c42 <HAL_TIM_PWM_Start+0x72>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e015      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_PWM_Start+0x8c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e008      	b.n	8003c6e <HAL_TIM_PWM_Start+0x9e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e097      	b.n	8003da6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Start+0xb6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c84:	e023      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Start+0xc6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c94:	e01b      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0xd6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0xe6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cb4:	e00b      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0xf6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc4:	e003      	b.n	8003cce <HAL_TIM_PWM_Start+0xfe>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd00 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a33      	ldr	r2, [pc, #204]	@ (8003db0 <HAL_TIM_PWM_Start+0x1e0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a32      	ldr	r2, [pc, #200]	@ (8003db4 <HAL_TIM_PWM_Start+0x1e4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a30      	ldr	r2, [pc, #192]	@ (8003db8 <HAL_TIM_PWM_Start+0x1e8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8003dbc <HAL_TIM_PWM_Start+0x1ec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x13e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc0 <HAL_TIM_PWM_Start+0x1f0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x142>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_TIM_PWM_Start+0x144>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <HAL_TIM_PWM_Start+0x1e0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3a:	d013      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a20      	ldr	r2, [pc, #128]	@ (8003dc4 <HAL_TIM_PWM_Start+0x1f4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc8 <HAL_TIM_PWM_Start+0x1f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	@ (8003db4 <HAL_TIM_PWM_Start+0x1e4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <HAL_TIM_PWM_Start+0x1e8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d115      	bne.n	8003d90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b18      	ldr	r3, [pc, #96]	@ (8003dcc <HAL_TIM_PWM_Start+0x1fc>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d015      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d011      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	e008      	b.n	8003da2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	00010007 	.word	0x00010007

08003dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0ff      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b14      	cmp	r3, #20
 8003dfa:	f200 80f0 	bhi.w	8003fde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003fdf 	.word	0x08003fdf
 8003e0c:	08003fdf 	.word	0x08003fdf
 8003e10:	08003fdf 	.word	0x08003fdf
 8003e14:	08003e99 	.word	0x08003e99
 8003e18:	08003fdf 	.word	0x08003fdf
 8003e1c:	08003fdf 	.word	0x08003fdf
 8003e20:	08003fdf 	.word	0x08003fdf
 8003e24:	08003edb 	.word	0x08003edb
 8003e28:	08003fdf 	.word	0x08003fdf
 8003e2c:	08003fdf 	.word	0x08003fdf
 8003e30:	08003fdf 	.word	0x08003fdf
 8003e34:	08003f1b 	.word	0x08003f1b
 8003e38:	08003fdf 	.word	0x08003fdf
 8003e3c:	08003fdf 	.word	0x08003fdf
 8003e40:	08003fdf 	.word	0x08003fdf
 8003e44:	08003f5d 	.word	0x08003f5d
 8003e48:	08003fdf 	.word	0x08003fdf
 8003e4c:	08003fdf 	.word	0x08003fdf
 8003e50:	08003fdf 	.word	0x08003fdf
 8003e54:	08003f9d 	.word	0x08003f9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f966 	bl	8004130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	619a      	str	r2, [r3, #24]
      break;
 8003e96:	e0a5      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f9d6 	bl	8004250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6999      	ldr	r1, [r3, #24]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	619a      	str	r2, [r3, #24]
      break;
 8003ed8:	e084      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa3f 	bl	8004364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0208 	orr.w	r2, r2, #8
 8003ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0204 	bic.w	r2, r2, #4
 8003f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	61da      	str	r2, [r3, #28]
      break;
 8003f18:	e064      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 faa7 	bl	8004474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69d9      	ldr	r1, [r3, #28]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	021a      	lsls	r2, r3, #8
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	61da      	str	r2, [r3, #28]
      break;
 8003f5a:	e043      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 faf0 	bl	8004548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f9a:	e023      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb34 	bl	8004610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fdc:	e002      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a42      	ldr	r2, [pc, #264]	@ (8004114 <TIM_Base_SetConfig+0x11c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3f      	ldr	r2, [pc, #252]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3e      	ldr	r2, [pc, #248]	@ (800411c <TIM_Base_SetConfig+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3d      	ldr	r2, [pc, #244]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <TIM_Base_SetConfig+0x11c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a30      	ldr	r2, [pc, #192]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <TIM_Base_SetConfig+0x124>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2e      	ldr	r2, [pc, #184]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <TIM_Base_SetConfig+0x134>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <TIM_Base_SetConfig+0x11c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a17      	ldr	r2, [pc, #92]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a16      	ldr	r2, [pc, #88]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xe8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a14      	ldr	r2, [pc, #80]	@ (800412c <TIM_Base_SetConfig+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]
  }
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40013400 	.word	0x40013400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f023 0201 	bic.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a2c      	ldr	r2, [pc, #176]	@ (800423c <TIM_OC1_SetConfig+0x10c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2b      	ldr	r2, [pc, #172]	@ (8004240 <TIM_OC1_SetConfig+0x110>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2a      	ldr	r2, [pc, #168]	@ (8004244 <TIM_OC1_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <TIM_OC1_SetConfig+0x118>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a28      	ldr	r2, [pc, #160]	@ (800424c <TIM_OC1_SetConfig+0x11c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10c      	bne.n	80041ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0308 	bic.w	r3, r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <TIM_OC1_SetConfig+0x10c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004240 <TIM_OC1_SetConfig+0x110>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a19      	ldr	r2, [pc, #100]	@ (8004244 <TIM_OC1_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a18      	ldr	r2, [pc, #96]	@ (8004248 <TIM_OC1_SetConfig+0x118>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a17      	ldr	r2, [pc, #92]	@ (800424c <TIM_OC1_SetConfig+0x11c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f023 0210 	bic.w	r2, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a28      	ldr	r2, [pc, #160]	@ (8004350 <TIM_OC2_SetConfig+0x100>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC2_SetConfig+0x6c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a27      	ldr	r2, [pc, #156]	@ (8004354 <TIM_OC2_SetConfig+0x104>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10d      	bne.n	80042d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <TIM_OC2_SetConfig+0x100>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <TIM_OC2_SetConfig+0x104>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <TIM_OC2_SetConfig+0x108>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a1a      	ldr	r2, [pc, #104]	@ (800435c <TIM_OC2_SetConfig+0x10c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a19      	ldr	r2, [pc, #100]	@ (8004360 <TIM_OC2_SetConfig+0x110>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d113      	bne.n	8004328 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004306:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800430e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <TIM_OC3_SetConfig+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_OC3_SetConfig+0x6a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <TIM_OC3_SetConfig+0x100>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10d      	bne.n	80043ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <TIM_OC3_SetConfig+0xfc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <TIM_OC3_SetConfig+0x100>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <TIM_OC3_SetConfig+0x104>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a19      	ldr	r2, [pc, #100]	@ (800446c <TIM_OC3_SetConfig+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <TIM_OC3_SetConfig+0x10c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d113      	bne.n	800443a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <TIM_OC4_SetConfig+0xc0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00f      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <TIM_OC4_SetConfig+0xc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a16      	ldr	r2, [pc, #88]	@ (800453c <TIM_OC4_SetConfig+0xc8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <TIM_OC4_SetConfig+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <TIM_OC4_SetConfig+0xd0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d109      	bne.n	800450c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800

08004548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800458c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <TIM_OC5_SetConfig+0xb4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00f      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <TIM_OC5_SetConfig+0xb8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	@ (8004604 <TIM_OC5_SetConfig+0xbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	@ (8004608 <TIM_OC5_SetConfig+0xc0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <TIM_OC5_SetConfig+0xc4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d109      	bne.n	80045d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	051b      	lsls	r3, r3, #20
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <TIM_OC6_SetConfig+0xb8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <TIM_OC6_SetConfig+0xbc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a16      	ldr	r2, [pc, #88]	@ (80046d0 <TIM_OC6_SetConfig+0xc0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <TIM_OC6_SetConfig+0xc4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <TIM_OC6_SetConfig+0xc8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d109      	bne.n	80046a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e063      	b.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2b      	ldr	r2, [pc, #172]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2a      	ldr	r2, [pc, #168]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800477a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b2:	d013      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a13      	ldr	r2, [pc, #76]	@ (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40013400 	.word	0x40013400
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40014000 	.word	0x40014000

08004828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004840:	2302      	movs	r3, #2
 8004842:	e065      	b.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a16      	ldr	r2, [pc, #88]	@ (800491c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d115      	bne.n	80048fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	051b      	lsls	r3, r3, #20
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40013400 	.word	0x40013400

08004924 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800492c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004930:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	b29b      	uxth	r3, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	4013      	ands	r3, r2
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <sniprintf>:
 8004998:	b40c      	push	{r2, r3}
 800499a:	b530      	push	{r4, r5, lr}
 800499c:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <sniprintf+0x68>)
 800499e:	1e0c      	subs	r4, r1, #0
 80049a0:	681d      	ldr	r5, [r3, #0]
 80049a2:	b09d      	sub	sp, #116	@ 0x74
 80049a4:	da08      	bge.n	80049b8 <sniprintf+0x20>
 80049a6:	238b      	movs	r3, #139	@ 0x8b
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
 80049ae:	b01d      	add	sp, #116	@ 0x74
 80049b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049b4:	b002      	add	sp, #8
 80049b6:	4770      	bx	lr
 80049b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80049bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80049c6:	bf14      	ite	ne
 80049c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049cc:	4623      	moveq	r3, r4
 80049ce:	9304      	str	r3, [sp, #16]
 80049d0:	9307      	str	r3, [sp, #28]
 80049d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049d6:	9002      	str	r0, [sp, #8]
 80049d8:	9006      	str	r0, [sp, #24]
 80049da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049e0:	ab21      	add	r3, sp, #132	@ 0x84
 80049e2:	a902      	add	r1, sp, #8
 80049e4:	4628      	mov	r0, r5
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	f000 f994 	bl	8004d14 <_svfiprintf_r>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	bfbc      	itt	lt
 80049f0:	238b      	movlt	r3, #139	@ 0x8b
 80049f2:	602b      	strlt	r3, [r5, #0]
 80049f4:	2c00      	cmp	r4, #0
 80049f6:	d0da      	beq.n	80049ae <sniprintf+0x16>
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	e7d6      	b.n	80049ae <sniprintf+0x16>
 8004a00:	20000010 	.word	0x20000010

08004a04 <memset>:
 8004a04:	4402      	add	r2, r0
 8004a06:	4603      	mov	r3, r0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <memset+0xa>
 8004a0c:	4770      	bx	lr
 8004a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a12:	e7f9      	b.n	8004a08 <memset+0x4>

08004a14 <__errno>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	@ (8004a1c <__errno+0x8>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000010 	.word	0x20000010

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4d0d      	ldr	r5, [pc, #52]	@ (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	@ (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1b64      	subs	r4, r4, r5
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4d0b      	ldr	r5, [pc, #44]	@ (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	@ (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 fc64 	bl	8005300 <_init>
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2600      	movs	r6, #0
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	080053c0 	.word	0x080053c0
 8004a5c:	080053c0 	.word	0x080053c0
 8004a60:	080053c0 	.word	0x080053c0
 8004a64:	080053c4 	.word	0x080053c4

08004a68 <__retarget_lock_acquire_recursive>:
 8004a68:	4770      	bx	lr

08004a6a <__retarget_lock_release_recursive>:
 8004a6a:	4770      	bx	lr

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d041      	beq.n	8004af8 <_free_r+0x8c>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 f8e0 	bl	8004c44 <__malloc_lock>
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <_free_r+0x90>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	b933      	cbnz	r3, 8004a98 <_free_r+0x2c>
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	6014      	str	r4, [r2, #0]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a94:	f000 b8dc 	b.w	8004c50 <__malloc_unlock>
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	d908      	bls.n	8004aae <_free_r+0x42>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	1821      	adds	r1, r4, r0
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf01      	itttt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	1809      	addeq	r1, r1, r0
 8004aaa:	6021      	streq	r1, [r4, #0]
 8004aac:	e7ed      	b.n	8004a8a <_free_r+0x1e>
 8004aae:	461a      	mov	r2, r3
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_free_r+0x4c>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d9fa      	bls.n	8004aae <_free_r+0x42>
 8004ab8:	6811      	ldr	r1, [r2, #0]
 8004aba:	1850      	adds	r0, r2, r1
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d10b      	bne.n	8004ad8 <_free_r+0x6c>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	1850      	adds	r0, r2, r1
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	d1e0      	bne.n	8004a8e <_free_r+0x22>
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	6053      	str	r3, [r2, #4]
 8004ad2:	4408      	add	r0, r1
 8004ad4:	6010      	str	r0, [r2, #0]
 8004ad6:	e7da      	b.n	8004a8e <_free_r+0x22>
 8004ad8:	d902      	bls.n	8004ae0 <_free_r+0x74>
 8004ada:	230c      	movs	r3, #12
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	e7d6      	b.n	8004a8e <_free_r+0x22>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	1821      	adds	r1, r4, r0
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf04      	itt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	bf04      	itt	eq
 8004af0:	1809      	addeq	r1, r1, r0
 8004af2:	6021      	streq	r1, [r4, #0]
 8004af4:	6054      	str	r4, [r2, #4]
 8004af6:	e7ca      	b.n	8004a8e <_free_r+0x22>
 8004af8:	bd38      	pop	{r3, r4, r5, pc}
 8004afa:	bf00      	nop
 8004afc:	200005b0 	.word	0x200005b0

08004b00 <sbrk_aligned>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0f      	ldr	r6, [pc, #60]	@ (8004b40 <sbrk_aligned+0x40>)
 8004b04:	460c      	mov	r4, r1
 8004b06:	6831      	ldr	r1, [r6, #0]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	b911      	cbnz	r1, 8004b12 <sbrk_aligned+0x12>
 8004b0c:	f000 fba4 	bl	8005258 <_sbrk_r>
 8004b10:	6030      	str	r0, [r6, #0]
 8004b12:	4621      	mov	r1, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 fb9f 	bl	8005258 <_sbrk_r>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d103      	bne.n	8004b26 <sbrk_aligned+0x26>
 8004b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b22:	4620      	mov	r0, r4
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	1cc4      	adds	r4, r0, #3
 8004b28:	f024 0403 	bic.w	r4, r4, #3
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d0f8      	beq.n	8004b22 <sbrk_aligned+0x22>
 8004b30:	1a21      	subs	r1, r4, r0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fb90 	bl	8005258 <_sbrk_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1f2      	bne.n	8004b22 <sbrk_aligned+0x22>
 8004b3c:	e7ef      	b.n	8004b1e <sbrk_aligned+0x1e>
 8004b3e:	bf00      	nop
 8004b40:	200005ac 	.word	0x200005ac

08004b44 <_malloc_r>:
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b48:	1ccd      	adds	r5, r1, #3
 8004b4a:	f025 0503 	bic.w	r5, r5, #3
 8004b4e:	3508      	adds	r5, #8
 8004b50:	2d0c      	cmp	r5, #12
 8004b52:	bf38      	it	cc
 8004b54:	250c      	movcc	r5, #12
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	4606      	mov	r6, r0
 8004b5a:	db01      	blt.n	8004b60 <_malloc_r+0x1c>
 8004b5c:	42a9      	cmp	r1, r5
 8004b5e:	d904      	bls.n	8004b6a <_malloc_r+0x26>
 8004b60:	230c      	movs	r3, #12
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	2000      	movs	r0, #0
 8004b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c40 <_malloc_r+0xfc>
 8004b6e:	f000 f869 	bl	8004c44 <__malloc_lock>
 8004b72:	f8d8 3000 	ldr.w	r3, [r8]
 8004b76:	461c      	mov	r4, r3
 8004b78:	bb44      	cbnz	r4, 8004bcc <_malloc_r+0x88>
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff ffbf 	bl	8004b00 <sbrk_aligned>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	4604      	mov	r4, r0
 8004b86:	d158      	bne.n	8004c3a <_malloc_r+0xf6>
 8004b88:	f8d8 4000 	ldr.w	r4, [r8]
 8004b8c:	4627      	mov	r7, r4
 8004b8e:	2f00      	cmp	r7, #0
 8004b90:	d143      	bne.n	8004c1a <_malloc_r+0xd6>
 8004b92:	2c00      	cmp	r4, #0
 8004b94:	d04b      	beq.n	8004c2e <_malloc_r+0xea>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	4639      	mov	r1, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	eb04 0903 	add.w	r9, r4, r3
 8004ba0:	f000 fb5a 	bl	8005258 <_sbrk_r>
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	d142      	bne.n	8004c2e <_malloc_r+0xea>
 8004ba8:	6821      	ldr	r1, [r4, #0]
 8004baa:	1a6d      	subs	r5, r5, r1
 8004bac:	4629      	mov	r1, r5
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff ffa6 	bl	8004b00 <sbrk_aligned>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d03a      	beq.n	8004c2e <_malloc_r+0xea>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	442b      	add	r3, r5
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	bb62      	cbnz	r2, 8004c20 <_malloc_r+0xdc>
 8004bc6:	f8c8 7000 	str.w	r7, [r8]
 8004bca:	e00f      	b.n	8004bec <_malloc_r+0xa8>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	1b52      	subs	r2, r2, r5
 8004bd0:	d420      	bmi.n	8004c14 <_malloc_r+0xd0>
 8004bd2:	2a0b      	cmp	r2, #11
 8004bd4:	d917      	bls.n	8004c06 <_malloc_r+0xc2>
 8004bd6:	1961      	adds	r1, r4, r5
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	6025      	str	r5, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	6059      	strne	r1, [r3, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	bf08      	it	eq
 8004be4:	f8c8 1000 	streq.w	r1, [r8]
 8004be8:	5162      	str	r2, [r4, r5]
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f82f 	bl	8004c50 <__malloc_unlock>
 8004bf2:	f104 000b 	add.w	r0, r4, #11
 8004bf6:	1d23      	adds	r3, r4, #4
 8004bf8:	f020 0007 	bic.w	r0, r0, #7
 8004bfc:	1ac2      	subs	r2, r0, r3
 8004bfe:	bf1c      	itt	ne
 8004c00:	1a1b      	subne	r3, r3, r0
 8004c02:	50a3      	strne	r3, [r4, r2]
 8004c04:	e7af      	b.n	8004b66 <_malloc_r+0x22>
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	bf0c      	ite	eq
 8004c0c:	f8c8 2000 	streq.w	r2, [r8]
 8004c10:	605a      	strne	r2, [r3, #4]
 8004c12:	e7eb      	b.n	8004bec <_malloc_r+0xa8>
 8004c14:	4623      	mov	r3, r4
 8004c16:	6864      	ldr	r4, [r4, #4]
 8004c18:	e7ae      	b.n	8004b78 <_malloc_r+0x34>
 8004c1a:	463c      	mov	r4, r7
 8004c1c:	687f      	ldr	r7, [r7, #4]
 8004c1e:	e7b6      	b.n	8004b8e <_malloc_r+0x4a>
 8004c20:	461a      	mov	r2, r3
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d1fb      	bne.n	8004c20 <_malloc_r+0xdc>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6053      	str	r3, [r2, #4]
 8004c2c:	e7de      	b.n	8004bec <_malloc_r+0xa8>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f80c 	bl	8004c50 <__malloc_unlock>
 8004c38:	e794      	b.n	8004b64 <_malloc_r+0x20>
 8004c3a:	6005      	str	r5, [r0, #0]
 8004c3c:	e7d6      	b.n	8004bec <_malloc_r+0xa8>
 8004c3e:	bf00      	nop
 8004c40:	200005b0 	.word	0x200005b0

08004c44 <__malloc_lock>:
 8004c44:	4801      	ldr	r0, [pc, #4]	@ (8004c4c <__malloc_lock+0x8>)
 8004c46:	f7ff bf0f 	b.w	8004a68 <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	200005a8 	.word	0x200005a8

08004c50 <__malloc_unlock>:
 8004c50:	4801      	ldr	r0, [pc, #4]	@ (8004c58 <__malloc_unlock+0x8>)
 8004c52:	f7ff bf0a 	b.w	8004a6a <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	200005a8 	.word	0x200005a8

08004c5c <__ssputs_r>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	688e      	ldr	r6, [r1, #8]
 8004c62:	461f      	mov	r7, r3
 8004c64:	42be      	cmp	r6, r7
 8004c66:	680b      	ldr	r3, [r1, #0]
 8004c68:	4682      	mov	sl, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4690      	mov	r8, r2
 8004c6e:	d82d      	bhi.n	8004ccc <__ssputs_r+0x70>
 8004c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c78:	d026      	beq.n	8004cc8 <__ssputs_r+0x6c>
 8004c7a:	6965      	ldr	r5, [r4, #20]
 8004c7c:	6909      	ldr	r1, [r1, #16]
 8004c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c82:	eba3 0901 	sub.w	r9, r3, r1
 8004c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c8a:	1c7b      	adds	r3, r7, #1
 8004c8c:	444b      	add	r3, r9
 8004c8e:	106d      	asrs	r5, r5, #1
 8004c90:	429d      	cmp	r5, r3
 8004c92:	bf38      	it	cc
 8004c94:	461d      	movcc	r5, r3
 8004c96:	0553      	lsls	r3, r2, #21
 8004c98:	d527      	bpl.n	8004cea <__ssputs_r+0x8e>
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7ff ff52 	bl	8004b44 <_malloc_r>
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	b360      	cbz	r0, 8004cfe <__ssputs_r+0xa2>
 8004ca4:	6921      	ldr	r1, [r4, #16]
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	f000 fae6 	bl	8005278 <memcpy>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	6126      	str	r6, [r4, #16]
 8004cba:	6165      	str	r5, [r4, #20]
 8004cbc:	444e      	add	r6, r9
 8004cbe:	eba5 0509 	sub.w	r5, r5, r9
 8004cc2:	6026      	str	r6, [r4, #0]
 8004cc4:	60a5      	str	r5, [r4, #8]
 8004cc6:	463e      	mov	r6, r7
 8004cc8:	42be      	cmp	r6, r7
 8004cca:	d900      	bls.n	8004cce <__ssputs_r+0x72>
 8004ccc:	463e      	mov	r6, r7
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	f000 faa6 	bl	8005224 <memmove>
 8004cd8:	68a3      	ldr	r3, [r4, #8]
 8004cda:	1b9b      	subs	r3, r3, r6
 8004cdc:	60a3      	str	r3, [r4, #8]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	4433      	add	r3, r6
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cea:	462a      	mov	r2, r5
 8004cec:	f000 fad2 	bl	8005294 <_realloc_r>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d1e0      	bne.n	8004cb8 <__ssputs_r+0x5c>
 8004cf6:	6921      	ldr	r1, [r4, #16]
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	f7ff feb7 	bl	8004a6c <_free_r>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	f8ca 3000 	str.w	r3, [sl]
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	e7e9      	b.n	8004ce6 <__ssputs_r+0x8a>
	...

08004d14 <_svfiprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	4698      	mov	r8, r3
 8004d1a:	898b      	ldrh	r3, [r1, #12]
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	b09d      	sub	sp, #116	@ 0x74
 8004d20:	4607      	mov	r7, r0
 8004d22:	460d      	mov	r5, r1
 8004d24:	4614      	mov	r4, r2
 8004d26:	d510      	bpl.n	8004d4a <_svfiprintf_r+0x36>
 8004d28:	690b      	ldr	r3, [r1, #16]
 8004d2a:	b973      	cbnz	r3, 8004d4a <_svfiprintf_r+0x36>
 8004d2c:	2140      	movs	r1, #64	@ 0x40
 8004d2e:	f7ff ff09 	bl	8004b44 <_malloc_r>
 8004d32:	6028      	str	r0, [r5, #0]
 8004d34:	6128      	str	r0, [r5, #16]
 8004d36:	b930      	cbnz	r0, 8004d46 <_svfiprintf_r+0x32>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	b01d      	add	sp, #116	@ 0x74
 8004d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d46:	2340      	movs	r3, #64	@ 0x40
 8004d48:	616b      	str	r3, [r5, #20]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4e:	2320      	movs	r3, #32
 8004d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d58:	2330      	movs	r3, #48	@ 0x30
 8004d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ef8 <_svfiprintf_r+0x1e4>
 8004d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d62:	f04f 0901 	mov.w	r9, #1
 8004d66:	4623      	mov	r3, r4
 8004d68:	469a      	mov	sl, r3
 8004d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d6e:	b10a      	cbz	r2, 8004d74 <_svfiprintf_r+0x60>
 8004d70:	2a25      	cmp	r2, #37	@ 0x25
 8004d72:	d1f9      	bne.n	8004d68 <_svfiprintf_r+0x54>
 8004d74:	ebba 0b04 	subs.w	fp, sl, r4
 8004d78:	d00b      	beq.n	8004d92 <_svfiprintf_r+0x7e>
 8004d7a:	465b      	mov	r3, fp
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4638      	mov	r0, r7
 8004d82:	f7ff ff6b 	bl	8004c5c <__ssputs_r>
 8004d86:	3001      	adds	r0, #1
 8004d88:	f000 80a7 	beq.w	8004eda <_svfiprintf_r+0x1c6>
 8004d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d8e:	445a      	add	r2, fp
 8004d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d92:	f89a 3000 	ldrb.w	r3, [sl]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 809f 	beq.w	8004eda <_svfiprintf_r+0x1c6>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da6:	f10a 0a01 	add.w	sl, sl, #1
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	9307      	str	r3, [sp, #28]
 8004dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004db4:	4654      	mov	r4, sl
 8004db6:	2205      	movs	r2, #5
 8004db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dbc:	484e      	ldr	r0, [pc, #312]	@ (8004ef8 <_svfiprintf_r+0x1e4>)
 8004dbe:	f7fb fa07 	bl	80001d0 <memchr>
 8004dc2:	9a04      	ldr	r2, [sp, #16]
 8004dc4:	b9d8      	cbnz	r0, 8004dfe <_svfiprintf_r+0xea>
 8004dc6:	06d0      	lsls	r0, r2, #27
 8004dc8:	bf44      	itt	mi
 8004dca:	2320      	movmi	r3, #32
 8004dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd0:	0711      	lsls	r1, r2, #28
 8004dd2:	bf44      	itt	mi
 8004dd4:	232b      	movmi	r3, #43	@ 0x2b
 8004dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dda:	f89a 3000 	ldrb.w	r3, [sl]
 8004dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004de0:	d015      	beq.n	8004e0e <_svfiprintf_r+0xfa>
 8004de2:	9a07      	ldr	r2, [sp, #28]
 8004de4:	4654      	mov	r4, sl
 8004de6:	2000      	movs	r0, #0
 8004de8:	f04f 0c0a 	mov.w	ip, #10
 8004dec:	4621      	mov	r1, r4
 8004dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004df2:	3b30      	subs	r3, #48	@ 0x30
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	d94b      	bls.n	8004e90 <_svfiprintf_r+0x17c>
 8004df8:	b1b0      	cbz	r0, 8004e28 <_svfiprintf_r+0x114>
 8004dfa:	9207      	str	r2, [sp, #28]
 8004dfc:	e014      	b.n	8004e28 <_svfiprintf_r+0x114>
 8004dfe:	eba0 0308 	sub.w	r3, r0, r8
 8004e02:	fa09 f303 	lsl.w	r3, r9, r3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	46a2      	mov	sl, r4
 8004e0c:	e7d2      	b.n	8004db4 <_svfiprintf_r+0xa0>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9103      	str	r1, [sp, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfbb      	ittet	lt
 8004e1a:	425b      	neglt	r3, r3
 8004e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e20:	9307      	strge	r3, [sp, #28]
 8004e22:	9307      	strlt	r3, [sp, #28]
 8004e24:	bfb8      	it	lt
 8004e26:	9204      	strlt	r2, [sp, #16]
 8004e28:	7823      	ldrb	r3, [r4, #0]
 8004e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e2c:	d10a      	bne.n	8004e44 <_svfiprintf_r+0x130>
 8004e2e:	7863      	ldrb	r3, [r4, #1]
 8004e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e32:	d132      	bne.n	8004e9a <_svfiprintf_r+0x186>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	9203      	str	r2, [sp, #12]
 8004e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e40:	3402      	adds	r4, #2
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f08 <_svfiprintf_r+0x1f4>
 8004e48:	7821      	ldrb	r1, [r4, #0]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	f7fb f9bf 	bl	80001d0 <memchr>
 8004e52:	b138      	cbz	r0, 8004e64 <_svfiprintf_r+0x150>
 8004e54:	9b04      	ldr	r3, [sp, #16]
 8004e56:	eba0 000a 	sub.w	r0, r0, sl
 8004e5a:	2240      	movs	r2, #64	@ 0x40
 8004e5c:	4082      	lsls	r2, r0
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	3401      	adds	r4, #1
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	4824      	ldr	r0, [pc, #144]	@ (8004efc <_svfiprintf_r+0x1e8>)
 8004e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e6e:	2206      	movs	r2, #6
 8004e70:	f7fb f9ae 	bl	80001d0 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d036      	beq.n	8004ee6 <_svfiprintf_r+0x1d2>
 8004e78:	4b21      	ldr	r3, [pc, #132]	@ (8004f00 <_svfiprintf_r+0x1ec>)
 8004e7a:	bb1b      	cbnz	r3, 8004ec4 <_svfiprintf_r+0x1b0>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e8a:	4433      	add	r3, r6
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	e76a      	b.n	8004d66 <_svfiprintf_r+0x52>
 8004e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e94:	460c      	mov	r4, r1
 8004e96:	2001      	movs	r0, #1
 8004e98:	e7a8      	b.n	8004dec <_svfiprintf_r+0xd8>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0c0a 	mov.w	ip, #10
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eac:	3a30      	subs	r2, #48	@ 0x30
 8004eae:	2a09      	cmp	r2, #9
 8004eb0:	d903      	bls.n	8004eba <_svfiprintf_r+0x1a6>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c6      	beq.n	8004e44 <_svfiprintf_r+0x130>
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	e7c4      	b.n	8004e44 <_svfiprintf_r+0x130>
 8004eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e7f0      	b.n	8004ea6 <_svfiprintf_r+0x192>
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <_svfiprintf_r+0x1f0>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f3af 8000 	nop.w
 8004ed4:	1c42      	adds	r2, r0, #1
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	d1d6      	bne.n	8004e88 <_svfiprintf_r+0x174>
 8004eda:	89ab      	ldrh	r3, [r5, #12]
 8004edc:	065b      	lsls	r3, r3, #25
 8004ede:	f53f af2d 	bmi.w	8004d3c <_svfiprintf_r+0x28>
 8004ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ee4:	e72c      	b.n	8004d40 <_svfiprintf_r+0x2c>
 8004ee6:	ab03      	add	r3, sp, #12
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	462a      	mov	r2, r5
 8004eec:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <_svfiprintf_r+0x1f0>)
 8004eee:	a904      	add	r1, sp, #16
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f000 f879 	bl	8004fe8 <_printf_i>
 8004ef6:	e7ed      	b.n	8004ed4 <_svfiprintf_r+0x1c0>
 8004ef8:	08005384 	.word	0x08005384
 8004efc:	0800538e 	.word	0x0800538e
 8004f00:	00000000 	.word	0x00000000
 8004f04:	08004c5d 	.word	0x08004c5d
 8004f08:	0800538a 	.word	0x0800538a

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4698      	mov	r8, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bfb8      	it	lt
 8004f20:	4613      	movlt	r3, r2
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f28:	4607      	mov	r7, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc26      	bgt.n	8004fa2 <_printf_common+0x96>
 8004f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	3b00      	subs	r3, #0
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d42b      	bmi.n	8004fbc <_printf_common+0xb0>
 8004f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f68:	4641      	mov	r1, r8
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c8      	blx	r9
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d01e      	beq.n	8004fb0 <_printf_common+0xa4>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	f003 0306 	and.w	r3, r3, #6
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf02      	ittt	eq
 8004f7e:	68e5      	ldreq	r5, [r4, #12]
 8004f80:	6833      	ldreq	r3, [r6, #0]
 8004f82:	1aed      	subeq	r5, r5, r3
 8004f84:	68a3      	ldr	r3, [r4, #8]
 8004f86:	bf0c      	ite	eq
 8004f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f8c:	2500      	movne	r5, #0
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bfc4      	itt	gt
 8004f92:	1a9b      	subgt	r3, r3, r2
 8004f94:	18ed      	addgt	r5, r5, r3
 8004f96:	2600      	movs	r6, #0
 8004f98:	341a      	adds	r4, #26
 8004f9a:	42b5      	cmp	r5, r6
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xc8>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xa8>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c8      	blx	r9
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xac>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c6      	b.n	8004f4a <_printf_common+0x3e>
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	2030      	movs	r0, #48	@ 0x30
 8004fc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fc6:	4422      	add	r2, r4
 8004fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	e7c7      	b.n	8004f64 <_printf_common+0x58>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4641      	mov	r1, r8
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c8      	blx	r9
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xa4>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7d9      	b.n	8004f9a <_printf_common+0x8e>
	...

08004fe8 <_printf_i>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	7e0f      	ldrb	r7, [r1, #24]
 8004fee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff0:	2f78      	cmp	r7, #120	@ 0x78
 8004ff2:	4691      	mov	r9, r2
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	469a      	mov	sl, r3
 8004ffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ffe:	d807      	bhi.n	8005010 <_printf_i+0x28>
 8005000:	2f62      	cmp	r7, #98	@ 0x62
 8005002:	d80a      	bhi.n	800501a <_printf_i+0x32>
 8005004:	2f00      	cmp	r7, #0
 8005006:	f000 80d1 	beq.w	80051ac <_printf_i+0x1c4>
 800500a:	2f58      	cmp	r7, #88	@ 0x58
 800500c:	f000 80b8 	beq.w	8005180 <_printf_i+0x198>
 8005010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005018:	e03a      	b.n	8005090 <_printf_i+0xa8>
 800501a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800501e:	2b15      	cmp	r3, #21
 8005020:	d8f6      	bhi.n	8005010 <_printf_i+0x28>
 8005022:	a101      	add	r1, pc, #4	@ (adr r1, 8005028 <_printf_i+0x40>)
 8005024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005028:	08005081 	.word	0x08005081
 800502c:	08005095 	.word	0x08005095
 8005030:	08005011 	.word	0x08005011
 8005034:	08005011 	.word	0x08005011
 8005038:	08005011 	.word	0x08005011
 800503c:	08005011 	.word	0x08005011
 8005040:	08005095 	.word	0x08005095
 8005044:	08005011 	.word	0x08005011
 8005048:	08005011 	.word	0x08005011
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	08005193 	.word	0x08005193
 8005058:	080050bf 	.word	0x080050bf
 800505c:	0800514d 	.word	0x0800514d
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	080051b5 	.word	0x080051b5
 800506c:	08005011 	.word	0x08005011
 8005070:	080050bf 	.word	0x080050bf
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	08005155 	.word	0x08005155
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6032      	str	r2, [r6, #0]
 8005088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e09c      	b.n	80051ce <_printf_i+0x1e6>
 8005094:	6833      	ldr	r3, [r6, #0]
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	6031      	str	r1, [r6, #0]
 800509c:	0606      	lsls	r6, r0, #24
 800509e:	d501      	bpl.n	80050a4 <_printf_i+0xbc>
 80050a0:	681d      	ldr	r5, [r3, #0]
 80050a2:	e003      	b.n	80050ac <_printf_i+0xc4>
 80050a4:	0645      	lsls	r5, r0, #25
 80050a6:	d5fb      	bpl.n	80050a0 <_printf_i+0xb8>
 80050a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	da03      	bge.n	80050b8 <_printf_i+0xd0>
 80050b0:	232d      	movs	r3, #45	@ 0x2d
 80050b2:	426d      	negs	r5, r5
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b8:	4858      	ldr	r0, [pc, #352]	@ (800521c <_printf_i+0x234>)
 80050ba:	230a      	movs	r3, #10
 80050bc:	e011      	b.n	80050e2 <_printf_i+0xfa>
 80050be:	6821      	ldr	r1, [r4, #0]
 80050c0:	6833      	ldr	r3, [r6, #0]
 80050c2:	0608      	lsls	r0, r1, #24
 80050c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80050c8:	d402      	bmi.n	80050d0 <_printf_i+0xe8>
 80050ca:	0649      	lsls	r1, r1, #25
 80050cc:	bf48      	it	mi
 80050ce:	b2ad      	uxthmi	r5, r5
 80050d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050d2:	4852      	ldr	r0, [pc, #328]	@ (800521c <_printf_i+0x234>)
 80050d4:	6033      	str	r3, [r6, #0]
 80050d6:	bf14      	ite	ne
 80050d8:	230a      	movne	r3, #10
 80050da:	2308      	moveq	r3, #8
 80050dc:	2100      	movs	r1, #0
 80050de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050e2:	6866      	ldr	r6, [r4, #4]
 80050e4:	60a6      	str	r6, [r4, #8]
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	db05      	blt.n	80050f6 <_printf_i+0x10e>
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	432e      	orrs	r6, r5
 80050ee:	f021 0104 	bic.w	r1, r1, #4
 80050f2:	6021      	str	r1, [r4, #0]
 80050f4:	d04b      	beq.n	800518e <_printf_i+0x1a6>
 80050f6:	4616      	mov	r6, r2
 80050f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005100:	5dc7      	ldrb	r7, [r0, r7]
 8005102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005106:	462f      	mov	r7, r5
 8005108:	42bb      	cmp	r3, r7
 800510a:	460d      	mov	r5, r1
 800510c:	d9f4      	bls.n	80050f8 <_printf_i+0x110>
 800510e:	2b08      	cmp	r3, #8
 8005110:	d10b      	bne.n	800512a <_printf_i+0x142>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	07df      	lsls	r7, r3, #31
 8005116:	d508      	bpl.n	800512a <_printf_i+0x142>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	6861      	ldr	r1, [r4, #4]
 800511c:	4299      	cmp	r1, r3
 800511e:	bfde      	ittt	le
 8005120:	2330      	movle	r3, #48	@ 0x30
 8005122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800512a:	1b92      	subs	r2, r2, r6
 800512c:	6122      	str	r2, [r4, #16]
 800512e:	f8cd a000 	str.w	sl, [sp]
 8005132:	464b      	mov	r3, r9
 8005134:	aa03      	add	r2, sp, #12
 8005136:	4621      	mov	r1, r4
 8005138:	4640      	mov	r0, r8
 800513a:	f7ff fee7 	bl	8004f0c <_printf_common>
 800513e:	3001      	adds	r0, #1
 8005140:	d14a      	bne.n	80051d8 <_printf_i+0x1f0>
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	b004      	add	sp, #16
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	4832      	ldr	r0, [pc, #200]	@ (8005220 <_printf_i+0x238>)
 8005156:	2778      	movs	r7, #120	@ 0x78
 8005158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6831      	ldr	r1, [r6, #0]
 8005160:	061f      	lsls	r7, r3, #24
 8005162:	f851 5b04 	ldr.w	r5, [r1], #4
 8005166:	d402      	bmi.n	800516e <_printf_i+0x186>
 8005168:	065f      	lsls	r7, r3, #25
 800516a:	bf48      	it	mi
 800516c:	b2ad      	uxthmi	r5, r5
 800516e:	6031      	str	r1, [r6, #0]
 8005170:	07d9      	lsls	r1, r3, #31
 8005172:	bf44      	itt	mi
 8005174:	f043 0320 	orrmi.w	r3, r3, #32
 8005178:	6023      	strmi	r3, [r4, #0]
 800517a:	b11d      	cbz	r5, 8005184 <_printf_i+0x19c>
 800517c:	2310      	movs	r3, #16
 800517e:	e7ad      	b.n	80050dc <_printf_i+0xf4>
 8005180:	4826      	ldr	r0, [pc, #152]	@ (800521c <_printf_i+0x234>)
 8005182:	e7e9      	b.n	8005158 <_printf_i+0x170>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	e7f6      	b.n	800517c <_printf_i+0x194>
 800518e:	4616      	mov	r6, r2
 8005190:	e7bd      	b.n	800510e <_printf_i+0x126>
 8005192:	6833      	ldr	r3, [r6, #0]
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	6961      	ldr	r1, [r4, #20]
 8005198:	1d18      	adds	r0, r3, #4
 800519a:	6030      	str	r0, [r6, #0]
 800519c:	062e      	lsls	r6, r5, #24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	d501      	bpl.n	80051a6 <_printf_i+0x1be>
 80051a2:	6019      	str	r1, [r3, #0]
 80051a4:	e002      	b.n	80051ac <_printf_i+0x1c4>
 80051a6:	0668      	lsls	r0, r5, #25
 80051a8:	d5fb      	bpl.n	80051a2 <_printf_i+0x1ba>
 80051aa:	8019      	strh	r1, [r3, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	4616      	mov	r6, r2
 80051b2:	e7bc      	b.n	800512e <_printf_i+0x146>
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	6032      	str	r2, [r6, #0]
 80051ba:	681e      	ldr	r6, [r3, #0]
 80051bc:	6862      	ldr	r2, [r4, #4]
 80051be:	2100      	movs	r1, #0
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7fb f805 	bl	80001d0 <memchr>
 80051c6:	b108      	cbz	r0, 80051cc <_printf_i+0x1e4>
 80051c8:	1b80      	subs	r0, r0, r6
 80051ca:	6060      	str	r0, [r4, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	2300      	movs	r3, #0
 80051d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d6:	e7aa      	b.n	800512e <_printf_i+0x146>
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	4632      	mov	r2, r6
 80051dc:	4649      	mov	r1, r9
 80051de:	4640      	mov	r0, r8
 80051e0:	47d0      	blx	sl
 80051e2:	3001      	adds	r0, #1
 80051e4:	d0ad      	beq.n	8005142 <_printf_i+0x15a>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	079b      	lsls	r3, r3, #30
 80051ea:	d413      	bmi.n	8005214 <_printf_i+0x22c>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e7a6      	b.n	8005146 <_printf_i+0x15e>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4632      	mov	r2, r6
 80051fc:	4649      	mov	r1, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	47d0      	blx	sl
 8005202:	3001      	adds	r0, #1
 8005204:	d09d      	beq.n	8005142 <_printf_i+0x15a>
 8005206:	3501      	adds	r5, #1
 8005208:	68e3      	ldr	r3, [r4, #12]
 800520a:	9903      	ldr	r1, [sp, #12]
 800520c:	1a5b      	subs	r3, r3, r1
 800520e:	42ab      	cmp	r3, r5
 8005210:	dcf2      	bgt.n	80051f8 <_printf_i+0x210>
 8005212:	e7eb      	b.n	80051ec <_printf_i+0x204>
 8005214:	2500      	movs	r5, #0
 8005216:	f104 0619 	add.w	r6, r4, #25
 800521a:	e7f5      	b.n	8005208 <_printf_i+0x220>
 800521c:	08005395 	.word	0x08005395
 8005220:	080053a6 	.word	0x080053a6

08005224 <memmove>:
 8005224:	4288      	cmp	r0, r1
 8005226:	b510      	push	{r4, lr}
 8005228:	eb01 0402 	add.w	r4, r1, r2
 800522c:	d902      	bls.n	8005234 <memmove+0x10>
 800522e:	4284      	cmp	r4, r0
 8005230:	4623      	mov	r3, r4
 8005232:	d807      	bhi.n	8005244 <memmove+0x20>
 8005234:	1e43      	subs	r3, r0, #1
 8005236:	42a1      	cmp	r1, r4
 8005238:	d008      	beq.n	800524c <memmove+0x28>
 800523a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800523e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005242:	e7f8      	b.n	8005236 <memmove+0x12>
 8005244:	4402      	add	r2, r0
 8005246:	4601      	mov	r1, r0
 8005248:	428a      	cmp	r2, r1
 800524a:	d100      	bne.n	800524e <memmove+0x2a>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005256:	e7f7      	b.n	8005248 <memmove+0x24>

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb ff38 	bl	80010d8 <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200005a4 	.word	0x200005a4

08005278 <memcpy>:
 8005278:	440a      	add	r2, r1
 800527a:	4291      	cmp	r1, r2
 800527c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005280:	d100      	bne.n	8005284 <memcpy+0xc>
 8005282:	4770      	bx	lr
 8005284:	b510      	push	{r4, lr}
 8005286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800528a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528e:	4291      	cmp	r1, r2
 8005290:	d1f9      	bne.n	8005286 <memcpy+0xe>
 8005292:	bd10      	pop	{r4, pc}

08005294 <_realloc_r>:
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	4607      	mov	r7, r0
 800529a:	4614      	mov	r4, r2
 800529c:	460d      	mov	r5, r1
 800529e:	b921      	cbnz	r1, 80052aa <_realloc_r+0x16>
 80052a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052a4:	4611      	mov	r1, r2
 80052a6:	f7ff bc4d 	b.w	8004b44 <_malloc_r>
 80052aa:	b92a      	cbnz	r2, 80052b8 <_realloc_r+0x24>
 80052ac:	f7ff fbde 	bl	8004a6c <_free_r>
 80052b0:	4625      	mov	r5, r4
 80052b2:	4628      	mov	r0, r5
 80052b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b8:	f000 f81a 	bl	80052f0 <_malloc_usable_size_r>
 80052bc:	4284      	cmp	r4, r0
 80052be:	4606      	mov	r6, r0
 80052c0:	d802      	bhi.n	80052c8 <_realloc_r+0x34>
 80052c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052c6:	d8f4      	bhi.n	80052b2 <_realloc_r+0x1e>
 80052c8:	4621      	mov	r1, r4
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7ff fc3a 	bl	8004b44 <_malloc_r>
 80052d0:	4680      	mov	r8, r0
 80052d2:	b908      	cbnz	r0, 80052d8 <_realloc_r+0x44>
 80052d4:	4645      	mov	r5, r8
 80052d6:	e7ec      	b.n	80052b2 <_realloc_r+0x1e>
 80052d8:	42b4      	cmp	r4, r6
 80052da:	4622      	mov	r2, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	bf28      	it	cs
 80052e0:	4632      	movcs	r2, r6
 80052e2:	f7ff ffc9 	bl	8005278 <memcpy>
 80052e6:	4629      	mov	r1, r5
 80052e8:	4638      	mov	r0, r7
 80052ea:	f7ff fbbf 	bl	8004a6c <_free_r>
 80052ee:	e7f1      	b.n	80052d4 <_realloc_r+0x40>

080052f0 <_malloc_usable_size_r>:
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f18      	subs	r0, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfbc      	itt	lt
 80052fa:	580b      	ldrlt	r3, [r1, r0]
 80052fc:	18c0      	addlt	r0, r0, r3
 80052fe:	4770      	bx	lr

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
