
QuickParkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b68  08003b68  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b68  08003b68  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b68  08003b68  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000003f8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114b6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c5  00000000  00000000  000164f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000188b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  00019978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0ca  00000000  00000000  0001a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b4d  00000000  00000000  00037756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b53aa  00000000  00000000  0004c2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010164d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047dc  00000000  00000000  00101690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00105e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b20 	.word	0x08003b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b20 	.word	0x08003b20

080001c8 <Servo_Entrance_Open>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Servo_Entrance_Open(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1700);
 80001cc:	4b07      	ldr	r3, [pc, #28]	@ (80001ec <Servo_Entrance_Open+0x24>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80001d4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(350);  // Tempo empirico per circa 90 gradi (da regolare)
 80001d6:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80001da:	f000 fc7b 	bl	8000ad4 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500); // Stop
 80001de:	4b03      	ldr	r3, [pc, #12]	@ (80001ec <Servo_Entrance_Open+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80001e6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	200000e0 	.word	0x200000e0

080001f0 <Servo_Entrance_Close>:

void Servo_Entrance_Close(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1300);
 80001f4:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <Servo_Entrance_Close+0x24>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f240 5214 	movw	r2, #1300	@ 0x514
 80001fc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(350);  // Tempo empirico per circa 90 gradi (da regolare)
 80001fe:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000202:	f000 fc67 	bl	8000ad4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500); // Stop
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <Servo_Entrance_Close+0x24>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800020e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000e0 	.word	0x200000e0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fbf4 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f81c 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9ba 	bl	800059c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000228:	f000 f87c 	bl	8000324 <MX_I2C1_Init>
  MX_SPI1_Init();
 800022c:	f000 f8ba 	bl	80003a4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000230:	f000 f992 	bl	8000558 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000234:	f000 f8f4 	bl	8000420 <MX_TIM1_Init>

  //sensors_init();
  //display_init();
  //wifi_bot_init();

  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000238:	2100      	movs	r1, #0
 800023a:	4807      	ldr	r0, [pc, #28]	@ (8000258 <main+0x40>)
 800023c:	f002 fd60 	bl	8002d00 <HAL_TIM_PWM_Start>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <main+0x32>
    {
      Error_Handler();
 8000246:	f000 fa27 	bl	8000698 <Error_Handler>
    }

  Servo_Entrance_Open();
 800024a:	f7ff ffbd 	bl	80001c8 <Servo_Entrance_Open>
  Servo_Entrance_Close();
 800024e:	f7ff ffcf 	bl	80001f0 <Servo_Entrance_Close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x3a>
 8000256:	bf00      	nop
 8000258:	200000e0 	.word	0x200000e0

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b09e      	sub	sp, #120	@ 0x78
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fc2b 	bl	8003ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	223c      	movs	r2, #60	@ 0x3c
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fc1d 	bl	8003ac6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800028c:	2303      	movs	r3, #3
 800028e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000290:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000294:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002aa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002b0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 f8a2 	bl	8001400 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002c2:	f000 f9e9 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f89a 	bl	800241c <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ee:	f000 f9d3 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <SystemClock_Config+0xc4>)
 80002f4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000300:	2300      	movs	r3, #0
 8000302:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fa4a 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000312:	f000 f9c1 	bl	8000698 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3778      	adds	r7, #120	@ 0x78
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	00021020 	.word	0x00021020

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <MX_I2C1_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	@ (800039c <MX_I2C1_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800032e:	4b1a      	ldr	r3, [pc, #104]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	@ (80003a0 <MX_I2C1_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_I2C1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035e:	480e      	ldr	r0, [pc, #56]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000360:	f000 fe54 	bl	800100c <HAL_I2C_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 f995 	bl	8000698 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	2100      	movs	r1, #0
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000372:	f000 fee6 	bl	8001142 <HAL_I2CEx_ConfigAnalogFilter>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 f98c 	bl	8000698 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000380:	2100      	movs	r1, #0
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_I2C1_Init+0x74>)
 8000384:	f000 ff28 	bl	80011d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f983 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000028 	.word	0x20000028
 800039c:	40005400 	.word	0x40005400
 80003a0:	00201d2b 	.word	0x00201d2b

080003a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <MX_SPI1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003be:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ca:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_SPI1_Init+0x74>)
 80003fe:	2208      	movs	r2, #8
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_SPI1_Init+0x74>)
 8000404:	f002 fb7a 	bl	8002afc <HAL_SPI_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f943 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000007c 	.word	0x2000007c
 800041c:	40013000 	.word	0x40013000

08000420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b096      	sub	sp, #88	@ 0x58
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000426:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000432:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	222c      	movs	r2, #44	@ 0x2c
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f003 fb3a 	bl	8003ac6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000452:	4b3f      	ldr	r3, [pc, #252]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000454:	4a3f      	ldr	r2, [pc, #252]	@ (8000554 <MX_TIM1_Init+0x134>)
 8000456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000458:	4b3d      	ldr	r3, [pc, #244]	@ (8000550 <MX_TIM1_Init+0x130>)
 800045a:	222f      	movs	r2, #47	@ 0x2f
 800045c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b3c      	ldr	r3, [pc, #240]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000464:	4b3a      	ldr	r3, [pc, #232]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000466:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800046a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b38      	ldr	r3, [pc, #224]	@ (8000550 <MX_TIM1_Init+0x130>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000472:	4b37      	ldr	r3, [pc, #220]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000478:	4b35      	ldr	r3, [pc, #212]	@ (8000550 <MX_TIM1_Init+0x130>)
 800047a:	2280      	movs	r2, #128	@ 0x80
 800047c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800047e:	4834      	ldr	r0, [pc, #208]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000480:	f002 fbe7 	bl	8002c52 <HAL_TIM_PWM_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 f905 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000492:	2300      	movs	r3, #0
 8000494:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800049e:	4619      	mov	r1, r3
 80004a0:	482b      	ldr	r0, [pc, #172]	@ (8000550 <MX_TIM1_Init+0x130>)
 80004a2:	f003 f9d9 	bl	8003858 <HAL_TIMEx_MasterConfigSynchronization>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004ac:	f000 f8f4 	bl	8000698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b0:	2360      	movs	r3, #96	@ 0x60
 80004b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b8:	2300      	movs	r3, #0
 80004ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004bc:	2300      	movs	r3, #0
 80004be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004d0:	2200      	movs	r2, #0
 80004d2:	4619      	mov	r1, r3
 80004d4:	481e      	ldr	r0, [pc, #120]	@ (8000550 <MX_TIM1_Init+0x130>)
 80004d6:	f002 fd13 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004e0:	f000 f8da 	bl	8000698 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004e8:	2204      	movs	r2, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4818      	ldr	r0, [pc, #96]	@ (8000550 <MX_TIM1_Init+0x130>)
 80004ee:	f002 fd07 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80004f8:	f000 f8ce 	bl	8000698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800051e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	4807      	ldr	r0, [pc, #28]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000532:	f003 fa11 	bl	8003958 <HAL_TIMEx_ConfigBreakDeadTime>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800053c:	f000 f8ac 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <MX_TIM1_Init+0x130>)
 8000542:	f000 f979 	bl	8000838 <HAL_TIM_MspPostInit>

}
 8000546:	bf00      	nop
 8000548:	3758      	adds	r7, #88	@ 0x58
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000e0 	.word	0x200000e0
 8000554:	40012c00 	.word	0x40012c00

08000558 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <MX_USB_PCD_Init+0x40>)
 8000560:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 8000564:	2208      	movs	r2, #8
 8000566:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000568:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 800056a:	2202      	movs	r2, #2
 800056c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 8000570:	2202      	movs	r2, #2
 8000572:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 8000576:	2200      	movs	r2, #0
 8000578:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 800057c:	2200      	movs	r2, #0
 800057e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	@ (8000594 <MX_USB_PCD_Init+0x3c>)
 8000582:	f000 fe75 	bl	8001270 <HAL_PCD_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800058c:	f000 f884 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000012c 	.word	0x2000012c
 8000598:	40005c00 	.word	0x40005c00

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b2:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a36      	ldr	r2, [pc, #216]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b34      	ldr	r3, [pc, #208]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a30      	ldr	r2, [pc, #192]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xf4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <MX_GPIO_Init+0xf4>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xf4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0xf4>)
 8000618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xf4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800062a:	2200      	movs	r2, #0
 800062c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000630:	4818      	ldr	r0, [pc, #96]	@ (8000694 <MX_GPIO_Init+0xf8>)
 8000632:	f000 fcd3 	bl	8000fdc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000636:	2337      	movs	r3, #55	@ 0x37
 8000638:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_GPIO_Init+0xf8>)
 800064c:	f000 fb4c 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000650:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000654:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	480a      	ldr	r0, [pc, #40]	@ (8000694 <MX_GPIO_Init+0xf8>)
 800066a:	f000 fb3d 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000684:	f000 fb30 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48001000 	.word	0x48001000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_MspInit+0x44>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006da:	2007      	movs	r0, #7
 80006dc:	f000 fad0 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <HAL_I2C_MspInit+0x7c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d127      	bne.n	800075e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_I2C_MspInit+0x80>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000726:	23c0      	movs	r3, #192	@ 0xc0
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072a:	2312      	movs	r3, #18
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000736:	2304      	movs	r3, #4
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <HAL_I2C_MspInit+0x84>)
 8000742:	f000 fad1 	bl	8000ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_I2C_MspInit+0x80>)
 800074c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_I2C_MspInit+0x80>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40005400 	.word	0x40005400
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400

08000774 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <HAL_SPI_MspInit+0x7c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d128      	bne.n	80007e8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 800079c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_SPI_MspInit+0x80>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007c6:	23e0      	movs	r3, #224	@ 0xe0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d6:	2305      	movs	r3, #5
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e4:	f000 fa80 	bl	8000ce8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	@ 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_TIM_PWM_MspInit+0x38>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10b      	bne.n	8000822 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 8000810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40012c00 	.word	0x40012c00
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_TIM_MspPostInit+0x68>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d11d      	bne.n	8000896 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_TIM_MspPostInit+0x6c>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <HAL_TIM_MspPostInit+0x6c>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_TIM_MspPostInit+0x6c>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000872:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000884:	2306      	movs	r3, #6
 8000886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000892:	f000 fa29 	bl	8000ce8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <HAL_PCD_MspInit+0x80>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d129      	bne.n	800091e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_PCD_MspInit+0x84>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_PCD_MspInit+0x84>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_PCD_MspInit+0x84>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008f4:	230e      	movs	r3, #14
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f000 f9f1 	bl	8000ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_PCD_MspInit+0x84>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <HAL_PCD_MspInit+0x84>)
 800090c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_PCD_MspInit+0x84>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40005c00 	.word	0x40005c00
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <UsageFault_Handler+0x4>

08000958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f885 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 f879 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fc17 	bl	8000218 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08003b70 	.word	0x08003b70
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	20000404 	.word	0x20000404

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f931 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fe3e 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f93b 	bl	8000cce <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f911 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	@ (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000400 	.word	0x20000400

08000abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000400 	.word	0x20000400

08000ad4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	e154      	b.n	8000fa2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8146 	beq.w	8000f9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x40>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d017      	beq.n	8000dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d123      	bne.n	8000e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	6939      	ldr	r1, [r7, #16]
 8000e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0203 	and.w	r2, r3, #3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80a0 	beq.w	8000f9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a57      	ldr	r2, [pc, #348]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <HAL_GPIO_Init+0x2d8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e74:	4a53      	ldr	r2, [pc, #332]	@ (8000fc4 <HAL_GPIO_Init+0x2dc>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e9e:	d019      	beq.n	8000ed4 <HAL_GPIO_Init+0x1ec>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <HAL_GPIO_Init+0x2e0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a48      	ldr	r2, [pc, #288]	@ (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1e4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a47      	ldr	r2, [pc, #284]	@ (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a46      	ldr	r2, [pc, #280]	@ (8000fd4 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1dc>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e008      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	4093      	lsls	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee6:	4937      	ldr	r1, [pc, #220]	@ (8000fc4 <HAL_GPIO_Init+0x2dc>)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef4:	4b38      	ldr	r3, [pc, #224]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f18:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f42:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f aea3 	bne.w	8000cf8 <HAL_GPIO_Init+0x10>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e08d      	b.n	800113a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fb5a 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	@ 0x24
 800103c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800105c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800106c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e006      	b.n	8001094 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001092:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d108      	bne.n	80010ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	e007      	b.n	80010be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69d9      	ldr	r1, [r3, #28]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2220      	movs	r2, #32
 8001126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b20      	cmp	r3, #32
 8001156:	d138      	bne.n	80011ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001162:	2302      	movs	r3, #2
 8001164:	e032      	b.n	80011cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2224      	movs	r2, #36	@ 0x24
 8001172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0201 	bic.w	r2, r2, #1
 8001184:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001194:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
  }
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d139      	bne.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e033      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800122a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001262:	2302      	movs	r3, #2
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0b9      	b.n	80013f6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fb06 	bl	80008a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fbd3 	bl	8003a54 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e03e      	b.n	8001332 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	3311      	adds	r3, #17
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3310      	adds	r3, #16
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3313      	adds	r3, #19
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	3320      	adds	r3, #32
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3324      	adds	r3, #36	@ 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3bb      	bcc.n	80012b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e044      	b.n	80013cc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3b5      	bcc.n	8001342 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013e2:	f002 fb52 	bl	8003a8a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001406:	af00      	add	r7, sp, #0
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001410:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f000 bff4 	b.w	800240e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 816d 	beq.w	8001716 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800143c:	4bb4      	ldr	r3, [pc, #720]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4bb1      	ldr	r3, [pc, #708]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d157      	bne.n	8001504 <HAL_RCC_OscConfig+0x104>
 8001454:	4bae      	ldr	r3, [pc, #696]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001460:	d150      	bne.n	8001504 <HAL_RCC_OscConfig+0x104>
 8001462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001466:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001476:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b3f      	cmp	r3, #63	@ 0x3f
 8001482:	d802      	bhi.n	800148a <HAL_RCC_OscConfig+0x8a>
 8001484:	4ba2      	ldr	r3, [pc, #648]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0xb6>
 800148a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800148e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800149e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014a2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80014b2:	4b97      	ldr	r3, [pc, #604]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ba:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80014be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80014c2:	fa92 f2a2 	rbit	r2, r2
 80014c6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80014ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80014ce:	fab2 f282 	clz	r2, r2
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	f042 0220 	orr.w	r2, r2, #32
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	f002 021f 	and.w	r2, r2, #31
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f202 	lsl.w	r2, r1, r2
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8114 	beq.w	8001714 <HAL_RCC_OscConfig+0x314>
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 810b 	bne.w	8001714 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	f000 bf85 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x124>
 8001516:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7d      	ldr	r2, [pc, #500]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e036      	b.n	8001592 <HAL_RCC_OscConfig+0x192>
 8001524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x14e>
 8001534:	4b76      	ldr	r3, [pc, #472]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a75      	ldr	r2, [pc, #468]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b73      	ldr	r3, [pc, #460]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a72      	ldr	r2, [pc, #456]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e021      	b.n	8001592 <HAL_RCC_OscConfig+0x192>
 800154e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x17a>
 8001560:	4b6b      	ldr	r3, [pc, #428]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6a      	ldr	r2, [pc, #424]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a67      	ldr	r2, [pc, #412]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e00b      	b.n	8001592 <HAL_RCC_OscConfig+0x192>
 800157a:	4b65      	ldr	r3, [pc, #404]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a64      	ldr	r2, [pc, #400]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b62      	ldr	r3, [pc, #392]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a61      	ldr	r2, [pc, #388]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001590:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b5f      	ldr	r3, [pc, #380]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	f023 020f 	bic.w	r2, r3, #15
 800159a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	495a      	ldr	r1, [pc, #360]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d054      	beq.n	8001666 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fa7e 	bl	8000abc <HAL_GetTick>
 80015c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa79 	bl	8000abc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	@ 0x64
 80015d4:	d902      	bls.n	80015dc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f000 bf19 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 80015dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015e0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80015f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80015fc:	d802      	bhi.n	8001604 <HAL_RCC_OscConfig+0x204>
 80015fe:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e015      	b.n	8001630 <HAL_RCC_OscConfig+0x230>
 8001604:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001608:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001618:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800161c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001620:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001634:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001638:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800163c:	fa92 f2a2 	rbit	r2, r2
 8001640:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001644:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0b0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1c6>
 8001664:	e057      	b.n	8001716 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fa29 	bl	8000abc <HAL_GetTick>
 800166a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fa24 	bl	8000abc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b64      	cmp	r3, #100	@ 0x64
 800167e:	d902      	bls.n	8001686 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	f000 bec4 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 8001686:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800168a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800169a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016a6:	d802      	bhi.n	80016ae <HAL_RCC_OscConfig+0x2ae>
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x2da>
 80016ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016b2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80016c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016c6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80016ca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_RCC_OscConfig+0x310>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016de:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80016e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80016e6:	fa92 f2a2 	rbit	r2, r2
 80016ea:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80016ee:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80016f2:	fab2 f282 	clz	r2, r2
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	f042 0220 	orr.w	r2, r2, #32
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f002 021f 	and.w	r2, r2, #31
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1b0      	bne.n	8001670 <HAL_RCC_OscConfig+0x270>
 800170e:	e002      	b.n	8001716 <HAL_RCC_OscConfig+0x316>
 8001710:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 816c 	beq.w	8001a04 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800172c:	4bcc      	ldr	r3, [pc, #816]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001738:	4bc9      	ldr	r3, [pc, #804]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d16d      	bne.n	8001820 <HAL_RCC_OscConfig+0x420>
 8001744:	4bc6      	ldr	r3, [pc, #792]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d167      	bne.n	8001820 <HAL_RCC_OscConfig+0x420>
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001762:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b3f      	cmp	r3, #63	@ 0x3f
 800176e:	d802      	bhi.n	8001776 <HAL_RCC_OscConfig+0x376>
 8001770:	4bbb      	ldr	r3, [pc, #748]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e013      	b.n	800179e <HAL_RCC_OscConfig+0x39e>
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800178e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800179a:	4bb1      	ldr	r3, [pc, #708]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2202      	movs	r2, #2
 80017a0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80017a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80017a8:	fa92 f2a2 	rbit	r2, r2
 80017ac:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80017b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80017b4:	fab2 f282 	clz	r2, r2
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f042 0220 	orr.w	r2, r2, #32
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f002 021f 	and.w	r2, r2, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3e6>
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d002      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f000 be14 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	21f8      	movs	r1, #248	@ 0xf8
 80017fc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001804:	fa91 f1a1 	rbit	r1, r1
 8001808:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800180c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001810:	fab1 f181 	clz	r1, r1
 8001814:	b2c9      	uxtb	r1, r1
 8001816:	408b      	lsls	r3, r1
 8001818:	4991      	ldr	r1, [pc, #580]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e0f1      	b.n	8001a04 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8083 	beq.w	8001938 <HAL_RCC_OscConfig+0x538>
 8001832:	2301      	movs	r3, #1
 8001834:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001844:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001852:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	461a      	mov	r2, r3
 800185a:	2301      	movs	r3, #1
 800185c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f92d 	bl	8000abc <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f928 	bl	8000abc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d902      	bls.n	800187e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f000 bdc8 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 800187e:	2302      	movs	r3, #2
 8001880:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001890:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b3f      	cmp	r3, #63	@ 0x3f
 800189c:	d802      	bhi.n	80018a4 <HAL_RCC_OscConfig+0x4a4>
 800189e:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e013      	b.n	80018cc <HAL_RCC_OscConfig+0x4cc>
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80018bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80018c8:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	2202      	movs	r2, #2
 80018ce:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80018d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80018de:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80018e2:	fab2 f282 	clz	r2, r2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f042 0220 	orr.w	r2, r2, #32
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f002 021f 	and.w	r2, r2, #31
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0b4      	beq.n	8001868 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	21f8      	movs	r1, #248	@ 0xf8
 8001914:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800191c:	fa91 f1a1 	rbit	r1, r1
 8001920:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001924:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001928:	fab1 f181 	clz	r1, r1
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	408b      	lsls	r3, r1
 8001930:	494b      	ldr	r1, [pc, #300]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e065      	b.n	8001a04 <HAL_RCC_OscConfig+0x604>
 8001938:	2301      	movs	r3, #1
 800193a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800194a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001958:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f8aa 	bl	8000abc <HAL_GetTick>
 8001968:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff f8a5 	bl	8000abc <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d902      	bls.n	8001984 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	f000 bd45 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80019a2:	d802      	bhi.n	80019aa <HAL_RCC_OscConfig+0x5aa>
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e013      	b.n	80019d2 <HAL_RCC_OscConfig+0x5d2>
 80019aa:	2302      	movs	r3, #2
 80019ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80019c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_RCC_OscConfig+0x660>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	2202      	movs	r2, #2
 80019d4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80019d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019dc:	fa92 f2a2 	rbit	r2, r2
 80019e0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80019e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f042 0220 	orr.w	r2, r2, #32
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f002 021f 	and.w	r2, r2, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1b4      	bne.n	800196e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8115 	beq.w	8001c44 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d07e      	beq.n	8001b28 <HAL_RCC_OscConfig+0x728>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x664>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2301      	movs	r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f832 	bl	8000abc <HAL_GetTick>
 8001a58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5c:	e00f      	b.n	8001a7e <HAL_RCC_OscConfig+0x67e>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff f828 	bl	8000abc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d902      	bls.n	8001a7e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f000 bcc8 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad8:	4bb0      	ldr	r3, [pc, #704]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	6019      	str	r1, [r3, #0]
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f1a3 	rbit	r1, r3
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001afe:	6019      	str	r1, [r3, #0]
  return result;
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0a0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x668>
 8001b26:	e08d      	b.n	8001c44 <HAL_RCC_OscConfig+0x844>
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b4a:	601a      	str	r2, [r3, #0]
  return result;
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b90      	ldr	r3, [pc, #576]	@ (8001da0 <HAL_RCC_OscConfig+0x9a0>)
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	2300      	movs	r3, #0
 8001b68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe ffa7 	bl	8000abc <HAL_GetTick>
 8001b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7fe ffa2 	bl	8000abc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d902      	bls.n	8001b8a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f000 bc42 	b.w	800240e <HAL_RCC_OscConfig+0x100e>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b92:	2202      	movs	r2, #2
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bda:	2202      	movs	r2, #2
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fa93 f2a3 	rbit	r2, r3
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bf4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	4b69      	ldr	r3, [pc, #420]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c02:	2102      	movs	r1, #2
 8001c04:	6019      	str	r1, [r3, #0]
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f1a3 	rbit	r1, r3
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c1c:	6019      	str	r1, [r3, #0]
  return result;
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d197      	bne.n	8001b74 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 819e 	beq.w	8001f96 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c60:	4b4e      	ldr	r3, [pc, #312]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a4a      	ldr	r2, [pc, #296]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	61d3      	str	r3, [r2, #28]
 8001c78:	4b48      	ldr	r3, [pc, #288]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001c92:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b42      	ldr	r3, [pc, #264]	@ (8001da4 <HAL_RCC_OscConfig+0x9a4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11a      	bne.n	8001cdc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8001da4 <HAL_RCC_OscConfig+0x9a4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	@ (8001da4 <HAL_RCC_OscConfig+0x9a4>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ff03 	bl	8000abc <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7fe fefe 	bl	8000abc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	@ 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e39e      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_OscConfig+0x9a4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ef      	beq.n	8001cbc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x8fa>
 8001cec:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x966>
 8001cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x924>
 8001d0a:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a20      	ldr	r2, [pc, #128]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	e020      	b.n	8001d66 <HAL_RCC_OscConfig+0x966>
 8001d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x94e>
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a18      	ldr	r2, [pc, #96]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x966>
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d9c <HAL_RCC_OscConfig+0x99c>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7fe fea0 	bl	8000abc <HAL_GetTick>
 8001d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e012      	b.n	8001da8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe fe9b 	bl	8000abc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e339      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
 8001da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001db0:	2202      	movs	r2, #2
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ddc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dee:	601a      	str	r2, [r3, #0]
  return result;
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001df8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0xa10>
 8001e0a:	4b98      	ldr	r3, [pc, #608]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	e013      	b.n	8001e38 <HAL_RCC_OscConfig+0xa38>
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4b8d      	ldr	r3, [pc, #564]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e3c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e40:	2102      	movs	r1, #2
 8001e42:	6011      	str	r1, [r2, #0]
 8001e44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	fa92 f1a2 	rbit	r1, r2
 8001e52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e56:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e5a:	6011      	str	r1, [r2, #0]
  return result;
 8001e5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e60:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f43f af7f 	beq.w	8001d82 <HAL_RCC_OscConfig+0x982>
 8001e84:	e07d      	b.n	8001f82 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7fe fe19 	bl	8000abc <HAL_GetTick>
 8001e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7fe fe14 	bl	8000abc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e2b2      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fa93 f2a3 	rbit	r2, r3
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ef8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0xb10>
 8001f0a:	4b58      	ldr	r3, [pc, #352]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0xb38>
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f3c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001f40:	2102      	movs	r1, #2
 8001f42:	6011      	str	r1, [r2, #0]
 8001f44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f48:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	fa92 f1a2 	rbit	r1, r2
 8001f52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f56:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f5a:	6011      	str	r1, [r2, #0]
  return result;
 8001f5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f60:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d186      	bne.n	8001e90 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f82:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a37      	ldr	r2, [pc, #220]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8232 	beq.w	800240c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	f000 8201 	beq.w	80023b8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	f040 8157 	bne.w	8002276 <HAL_RCC_OscConfig+0xe76>
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fda:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fec:	601a      	str	r2, [r3, #0]
  return result;
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ff6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002002:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	461a      	mov	r2, r3
 800200a:	2300      	movs	r3, #0
 800200c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fd55 	bl	8000abc <HAL_GetTick>
 8002012:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	e009      	b.n	800202c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fd50 	bl	8000abc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1f0      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 800202c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002030:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002034:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002050:	601a      	str	r2, [r3, #0]
  return result;
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800205a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b3f      	cmp	r3, #63	@ 0x3f
 8002064:	d804      	bhi.n	8002070 <HAL_RCC_OscConfig+0xc70>
 8002066:	4b01      	ldr	r3, [pc, #4]	@ (800206c <HAL_RCC_OscConfig+0xc6c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e029      	b.n	80020c0 <HAL_RCC_OscConfig+0xcc0>
 800206c:	40021000 	.word	0x40021000
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002078:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002082:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800209e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4bc3      	ldr	r3, [pc, #780]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80020c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	fa92 f1a2 	rbit	r1, r2
 80020dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020e4:	6011      	str	r1, [r2, #0]
  return result;
 80020e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d185      	bne.n	8002018 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4baf      	ldr	r3, [pc, #700]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	430b      	orrs	r3, r1
 800212e:	49a7      	ldr	r1, [pc, #668]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002138:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800213c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002158:	601a      	str	r2, [r3, #0]
  return result;
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002162:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800216e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fc9f 	bl	8000abc <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002182:	e009      	b.n	8002198 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe fc9a 	bl	8000abc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e13a      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80021a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80021d0:	d802      	bhi.n	80021d8 <HAL_RCC_OscConfig+0xdd8>
 80021d2:	4b7e      	ldr	r3, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e027      	b.n	8002228 <HAL_RCC_OscConfig+0xe28>
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002206:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	4b69      	ldr	r3, [pc, #420]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800222c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002230:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002234:	6011      	str	r1, [r2, #0]
 8002236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800223a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	fa92 f1a2 	rbit	r1, r2
 8002244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002248:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800224c:	6011      	str	r1, [r2, #0]
  return result;
 800224e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002252:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f042 0220 	orr.w	r2, r2, #32
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f002 021f 	and.w	r2, r2, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d087      	beq.n	8002184 <HAL_RCC_OscConfig+0xd84>
 8002274:	e0ca      	b.n	800240c <HAL_RCC_OscConfig+0x100c>
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800227e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800229a:	601a      	str	r2, [r3, #0]
  return result;
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80022a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	461a      	mov	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fbfe 	bl	8000abc <HAL_GetTick>
 80022c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	e009      	b.n	80022da <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fbf9 	bl	8000abc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e099      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022fe:	601a      	str	r2, [r3, #0]
  return result;
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002308:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b3f      	cmp	r3, #63	@ 0x3f
 8002312:	d802      	bhi.n	800231a <HAL_RCC_OscConfig+0xf1a>
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e027      	b.n	800236a <HAL_RCC_OscConfig+0xf6a>
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_OscConfig+0xfcc>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002372:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002394:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d187      	bne.n	80022c6 <HAL_RCC_OscConfig+0xec6>
 80023b6:	e029      	b.n	800240c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d103      	bne.n	80023d0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e020      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
 80023cc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_RCC_OscConfig+0x1018>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10b      	bne.n	8002408 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80023f4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b09e      	sub	sp, #120	@ 0x78
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e154      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b89      	ldr	r3, [pc, #548]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b86      	ldr	r3, [pc, #536]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4984      	ldr	r1, [pc, #528]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b82      	ldr	r3, [pc, #520]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e13c      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4978      	ldr	r1, [pc, #480]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80cd 	beq.w	800262a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d137      	bne.n	8002508 <HAL_RCC_ClockConfig+0xec>
 8002498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80024b0:	d802      	bhi.n	80024b8 <HAL_RCC_ClockConfig+0x9c>
 80024b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	e00f      	b.n	80024d8 <HAL_RCC_ClockConfig+0xbc>
 80024b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80024cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024d4:	4b62      	ldr	r3, [pc, #392]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d171      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0ea      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d137      	bne.n	8002580 <HAL_RCC_ClockConfig+0x164>
 8002510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002514:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800251e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b3f      	cmp	r3, #63	@ 0x3f
 8002528:	d802      	bhi.n	8002530 <HAL_RCC_ClockConfig+0x114>
 800252a:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e00f      	b.n	8002550 <HAL_RCC_ClockConfig+0x134>
 8002530:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002534:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	647b      	str	r3, [r7, #68]	@ 0x44
 800253e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002542:	643b      	str	r3, [r7, #64]	@ 0x40
 8002544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800254c:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002554:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002556:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002558:	fa92 f2a2 	rbit	r2, r2
 800255c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800255e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f002 021f 	and.w	r2, r2, #31
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d135      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0ae      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
 8002580:	2302      	movs	r3, #2
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b3f      	cmp	r3, #63	@ 0x3f
 8002596:	d802      	bhi.n	800259e <HAL_RCC_ClockConfig+0x182>
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e00d      	b.n	80025ba <HAL_RCC_ClockConfig+0x19e>
 800259e:	2302      	movs	r3, #2
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025aa:	2302      	movs	r3, #2
 80025ac:	623b      	str	r3, [r7, #32]
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	2202      	movs	r2, #2
 80025bc:	61ba      	str	r2, [r7, #24]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	617a      	str	r2, [r7, #20]
  return result;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f002 021f 	and.w	r2, r2, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e07a      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 0203 	bic.w	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	491a      	ldr	r1, [pc, #104]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fa:	f7fe fa5f 	bl	8000abc <HAL_GetTick>
 80025fe:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002600:	e00a      	b.n	8002618 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002602:	f7fe fa5b 	bl	8000abc <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e062      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 020c 	and.w	r2, r3, #12
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	429a      	cmp	r2, r3
 8002628:	d1eb      	bne.n	8002602 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d215      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	4906      	ldr	r1, [pc, #24]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d006      	beq.n	8002664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e041      	b.n	80026de <HAL_RCC_ClockConfig+0x2c2>
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_RCC_ClockConfig+0x2cc>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	491a      	ldr	r1, [pc, #104]	@ (80026e8 <HAL_RCC_ClockConfig+0x2cc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <HAL_RCC_ClockConfig+0x2cc>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4912      	ldr	r1, [pc, #72]	@ (80026e8 <HAL_RCC_ClockConfig+0x2cc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026a2:	f000 f829 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4601      	mov	r1, r0
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <HAL_RCC_ClockConfig+0x2cc>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b0:	22f0      	movs	r2, #240	@ 0xf0
 80026b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	fa92 f2a2 	rbit	r2, r2
 80026ba:	60fa      	str	r2, [r7, #12]
  return result;
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	40d3      	lsrs	r3, r2
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x2d0>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	fa21 f303 	lsr.w	r3, r1, r3
 80026ce:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <HAL_RCC_ClockConfig+0x2d4>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026d2:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_RCC_ClockConfig+0x2d8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f9ac 	bl	8000a34 <HAL_InitTick>
  
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3778      	adds	r7, #120	@ 0x78
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08003b38 	.word	0x08003b38
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x30>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x36>
 8002726:	e026      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	613b      	str	r3, [r7, #16]
      break;
 800272c:	e026      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a17      	ldr	r2, [pc, #92]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002754:	4a0e      	ldr	r2, [pc, #56]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	fbb2 f2f3 	udiv	r2, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e004      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <HAL_RCC_GetSysClockFreq+0xa4>)
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	e002      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 8002778:	613b      	str	r3, [r7, #16]
      break;
 800277a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277c:	693b      	ldr	r3, [r7, #16]
}
 800277e:	4618      	mov	r0, r3
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200
 8002794:	08003b48 	.word	0x08003b48
 8002798:	08003b58 	.word	0x08003b58
 800279c:	003d0900 	.word	0x003d0900

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b092      	sub	sp, #72	@ 0x48
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80d2 	beq.w	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10e      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a49      	ldr	r2, [pc, #292]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b44      	ldr	r3, [pc, #272]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7fe f959 	bl	8000abc <HAL_GetTick>
 800280a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe f955 	bl	8000abc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	@ 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e167      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282c:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002834:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8082 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002848:	429a      	cmp	r2, r3
 800284a:	d07a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284c:	4b2b      	ldr	r3, [pc, #172]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002856:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	461a      	mov	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800287e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	461a      	mov	r2, r3
 800289a:	2300      	movs	r3, #0
 800289c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800289e:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d049      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe f905 	bl	8000abc <HAL_GetTick>
 80028b2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe f901 	bl	8000abc <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e111      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	2302      	movs	r3, #2
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
  return result;
 80028e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80028f6:	4b01      	ldr	r3, [pc, #4]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	e00d      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	10908100 	.word	0x10908100
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	4b78      	ldr	r3, [pc, #480]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	613a      	str	r2, [r7, #16]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	fa92 f2a2 	rbit	r2, r2
 8002922:	60fa      	str	r2, [r7, #12]
  return result;
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0b9      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002942:	4b6d      	ldr	r3, [pc, #436]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	496a      	ldr	r1, [pc, #424]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002950:	4313      	orrs	r3, r2
 8002952:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002954:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4a65      	ldr	r2, [pc, #404]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002974:	4b60      	ldr	r3, [pc, #384]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f023 0203 	bic.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	495d      	ldr	r1, [pc, #372]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002992:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4956      	ldr	r1, [pc, #344]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b0:	4b51      	ldr	r3, [pc, #324]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	494e      	ldr	r1, [pc, #312]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f023 0210 	bic.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4947      	ldr	r1, [pc, #284]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029ec:	4b42      	ldr	r3, [pc, #264]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	493f      	ldr	r1, [pc, #252]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f023 0220 	bic.w	r2, r3, #32
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4938      	ldr	r1, [pc, #224]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a28:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	4930      	ldr	r1, [pc, #192]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4929      	ldr	r1, [pc, #164]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	4921      	ldr	r1, [pc, #132]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a82:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	491a      	ldr	r1, [pc, #104]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002aa0:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	4912      	ldr	r1, [pc, #72]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	490b      	ldr	r1, [pc, #44]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae8:	4903      	ldr	r1, [pc, #12]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3748      	adds	r7, #72	@ 0x48
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e09d      	b.n	8002c4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b1e:	d009      	beq.n	8002b34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
 8002b26:	e005      	b.n	8002b34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fe10 	bl	8000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b74:	d902      	bls.n	8002b7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e002      	b.n	8002b82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b8a:	d007      	beq.n	8002b9c <HAL_SPI_Init+0xa0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	ea42 0103 	orr.w	r1, r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	f003 0204 	and.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c18:	ea42 0103 	orr.w	r1, r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e049      	b.n	8002cf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fd fdbd 	bl	80007f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f000 fa49 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_TIM_PWM_Start+0x24>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e03c      	b.n	8002d9e <HAL_TIM_PWM_Start+0x9e>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d109      	bne.n	8002d3e <HAL_TIM_PWM_Start+0x3e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	bf14      	ite	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	2300      	moveq	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e02f      	b.n	8002d9e <HAL_TIM_PWM_Start+0x9e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d109      	bne.n	8002d58 <HAL_TIM_PWM_Start+0x58>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e022      	b.n	8002d9e <HAL_TIM_PWM_Start+0x9e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d109      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x72>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e015      	b.n	8002d9e <HAL_TIM_PWM_Start+0x9e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d109      	bne.n	8002d8c <HAL_TIM_PWM_Start+0x8c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e008      	b.n	8002d9e <HAL_TIM_PWM_Start+0x9e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e097      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start+0xb6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002db4:	e023      	b.n	8002dfe <HAL_TIM_PWM_Start+0xfe>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0xc6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc4:	e01b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xfe>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0xd6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_PWM_Start+0xfe>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xe6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xfe>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xf6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_PWM_Start+0xfe>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fd00 	bl	800380c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <HAL_TIM_PWM_Start+0x1e0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x13e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <HAL_TIM_PWM_Start+0x1e4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x13e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x13e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <HAL_TIM_PWM_Start+0x1ec>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x13e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_TIM_PWM_Start+0x1f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x142>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_PWM_Start+0x144>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ee0 <HAL_TIM_PWM_Start+0x1e0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6a:	d013      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a20      	ldr	r2, [pc, #128]	@ (8002ef4 <HAL_TIM_PWM_Start+0x1f4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <HAL_TIM_PWM_Start+0x1f8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x194>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <HAL_TIM_PWM_Start+0x1e4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_PWM_Start+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d115      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <HAL_TIM_PWM_Start+0x1fc>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d015      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x1d2>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eac:	d011      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40013400 	.word	0x40013400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	00010007 	.word	0x00010007

08002f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ff      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b14      	cmp	r3, #20
 8002f2a:	f200 80f0 	bhi.w	800310e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	0800310f 	.word	0x0800310f
 8002f3c:	0800310f 	.word	0x0800310f
 8002f40:	0800310f 	.word	0x0800310f
 8002f44:	08002fc9 	.word	0x08002fc9
 8002f48:	0800310f 	.word	0x0800310f
 8002f4c:	0800310f 	.word	0x0800310f
 8002f50:	0800310f 	.word	0x0800310f
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800310f 	.word	0x0800310f
 8002f5c:	0800310f 	.word	0x0800310f
 8002f60:	0800310f 	.word	0x0800310f
 8002f64:	0800304b 	.word	0x0800304b
 8002f68:	0800310f 	.word	0x0800310f
 8002f6c:	0800310f 	.word	0x0800310f
 8002f70:	0800310f 	.word	0x0800310f
 8002f74:	0800308d 	.word	0x0800308d
 8002f78:	0800310f 	.word	0x0800310f
 8002f7c:	0800310f 	.word	0x0800310f
 8002f80:	0800310f 	.word	0x0800310f
 8002f84:	080030cd 	.word	0x080030cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f966 	bl	8003260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e0a5      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f9d6 	bl	8003380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e084      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa3f 	bl	8003494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e064      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 faa7 	bl	80035a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e043      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 faf0 	bl	8003678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030ca:	e023      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fb34 	bl	8003740 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800310c:	e002      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
      break;
 8003112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a42      	ldr	r2, [pc, #264]	@ (8003244 <TIM_Base_SetConfig+0x11c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00f      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d00b      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <TIM_Base_SetConfig+0x120>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <TIM_Base_SetConfig+0x124>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_Base_SetConfig+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	@ (8003250 <TIM_Base_SetConfig+0x128>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a33      	ldr	r2, [pc, #204]	@ (8003244 <TIM_Base_SetConfig+0x11c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003180:	d017      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a30      	ldr	r2, [pc, #192]	@ (8003248 <TIM_Base_SetConfig+0x120>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <TIM_Base_SetConfig+0x124>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00f      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2e      	ldr	r2, [pc, #184]	@ (8003250 <TIM_Base_SetConfig+0x128>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00b      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2d      	ldr	r2, [pc, #180]	@ (8003254 <TIM_Base_SetConfig+0x12c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <TIM_Base_SetConfig+0x130>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2b      	ldr	r2, [pc, #172]	@ (800325c <TIM_Base_SetConfig+0x134>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a16      	ldr	r2, [pc, #88]	@ (8003244 <TIM_Base_SetConfig+0x11c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00f      	beq.n	8003210 <TIM_Base_SetConfig+0xe8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <TIM_Base_SetConfig+0x128>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0xe8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <TIM_Base_SetConfig+0x12c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0xe8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <TIM_Base_SetConfig+0x130>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0xe8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a14      	ldr	r2, [pc, #80]	@ (800325c <TIM_Base_SetConfig+0x134>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40013400 	.word	0x40013400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0201 	bic.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 0302 	bic.w	r3, r3, #2
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a2c      	ldr	r2, [pc, #176]	@ (800336c <TIM_OC1_SetConfig+0x10c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00f      	beq.n	80032e0 <TIM_OC1_SetConfig+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <TIM_OC1_SetConfig+0x110>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <TIM_OC1_SetConfig+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003374 <TIM_OC1_SetConfig+0x114>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_OC1_SetConfig+0x80>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a29      	ldr	r2, [pc, #164]	@ (8003378 <TIM_OC1_SetConfig+0x118>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC1_SetConfig+0x80>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a28      	ldr	r2, [pc, #160]	@ (800337c <TIM_OC1_SetConfig+0x11c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10c      	bne.n	80032fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0308 	bic.w	r3, r3, #8
 80032e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <TIM_OC1_SetConfig+0x10c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <TIM_OC1_SetConfig+0xc2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1a      	ldr	r2, [pc, #104]	@ (8003370 <TIM_OC1_SetConfig+0x110>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00b      	beq.n	8003322 <TIM_OC1_SetConfig+0xc2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <TIM_OC1_SetConfig+0x114>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_OC1_SetConfig+0xc2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <TIM_OC1_SetConfig+0x118>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC1_SetConfig+0xc2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <TIM_OC1_SetConfig+0x11c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40013400 	.word	0x40013400
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800

08003380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 0210 	bic.w	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0320 	bic.w	r3, r3, #32
 80033ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a28      	ldr	r2, [pc, #160]	@ (8003480 <TIM_OC2_SetConfig+0x100>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC2_SetConfig+0x6c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <TIM_OC2_SetConfig+0x104>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10d      	bne.n	8003408 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <TIM_OC2_SetConfig+0x100>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <TIM_OC2_SetConfig+0xb0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1c      	ldr	r2, [pc, #112]	@ (8003484 <TIM_OC2_SetConfig+0x104>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00b      	beq.n	8003430 <TIM_OC2_SetConfig+0xb0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <TIM_OC2_SetConfig+0x108>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_OC2_SetConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <TIM_OC2_SetConfig+0x10c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_OC2_SetConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <TIM_OC2_SetConfig+0x110>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d113      	bne.n	8003458 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003436:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800343e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800

08003494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <TIM_OC3_SetConfig+0xfc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_OC3_SetConfig+0x6a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <TIM_OC3_SetConfig+0x100>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10d      	bne.n	800351a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003518:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	@ (8003590 <TIM_OC3_SetConfig+0xfc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00f      	beq.n	8003542 <TIM_OC3_SetConfig+0xae>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1b      	ldr	r2, [pc, #108]	@ (8003594 <TIM_OC3_SetConfig+0x100>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00b      	beq.n	8003542 <TIM_OC3_SetConfig+0xae>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1a      	ldr	r2, [pc, #104]	@ (8003598 <TIM_OC3_SetConfig+0x104>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <TIM_OC3_SetConfig+0xae>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	@ (800359c <TIM_OC3_SetConfig+0x108>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_OC3_SetConfig+0xae>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <TIM_OC3_SetConfig+0x10c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	621a      	str	r2, [r3, #32]
}
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40013400 	.word	0x40013400
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800

080035a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	031b      	lsls	r3, r3, #12
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <TIM_OC4_SetConfig+0xc0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00f      	beq.n	8003628 <TIM_OC4_SetConfig+0x84>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a17      	ldr	r2, [pc, #92]	@ (8003668 <TIM_OC4_SetConfig+0xc4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_OC4_SetConfig+0x84>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a16      	ldr	r2, [pc, #88]	@ (800366c <TIM_OC4_SetConfig+0xc8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_OC4_SetConfig+0x84>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <TIM_OC4_SetConfig+0xcc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC4_SetConfig+0x84>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <TIM_OC4_SetConfig+0xd0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d109      	bne.n	800363c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800362e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <TIM_OC5_SetConfig+0xb4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00f      	beq.n	80036f2 <TIM_OC5_SetConfig+0x7a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <TIM_OC5_SetConfig+0xb8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <TIM_OC5_SetConfig+0x7a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <TIM_OC5_SetConfig+0xbc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_OC5_SetConfig+0x7a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <TIM_OC5_SetConfig+0xc0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_OC5_SetConfig+0x7a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a13      	ldr	r2, [pc, #76]	@ (800373c <TIM_OC5_SetConfig+0xc4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d109      	bne.n	8003706 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	621a      	str	r2, [r3, #32]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40013400 	.word	0x40013400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800376e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	051b      	lsls	r3, r3, #20
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <TIM_OC6_SetConfig+0xb8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00f      	beq.n	80037bc <TIM_OC6_SetConfig+0x7c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <TIM_OC6_SetConfig+0xbc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00b      	beq.n	80037bc <TIM_OC6_SetConfig+0x7c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a16      	ldr	r2, [pc, #88]	@ (8003800 <TIM_OC6_SetConfig+0xc0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_OC6_SetConfig+0x7c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <TIM_OC6_SetConfig+0xc4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_OC6_SetConfig+0x7c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	@ (8003808 <TIM_OC6_SetConfig+0xc8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d109      	bne.n	80037d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40013400 	.word	0x40013400
 8003800:	40014000 	.word	0x40014000
 8003804:	40014400 	.word	0x40014400
 8003808:	40014800 	.word	0x40014800

0800380c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e063      	b.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2b      	ldr	r2, [pc, #172]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2a      	ldr	r2, [pc, #168]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e2:	d013      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10c      	bne.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4313      	orrs	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40013400 	.word	0x40013400
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40014000 	.word	0x40014000

08003958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e065      	b.n	8003a40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d115      	bne.n	8003a2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	051b      	lsls	r3, r3, #20
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400

08003a54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a5c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003a60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	4013      	ands	r3, r2
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <memset>:
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <memset+0xa>
 8003ace:	4770      	bx	lr
 8003ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad4:	e7f9      	b.n	8003aca <memset+0x4>
	...

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 f818 	bl	8003b20 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003b68 	.word	0x08003b68
 8003b14:	08003b68 	.word	0x08003b68
 8003b18:	08003b68 	.word	0x08003b68
 8003b1c:	08003b6c 	.word	0x08003b6c

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
